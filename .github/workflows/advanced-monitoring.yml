name: Advanced Monitoring & Alerting System

# Comprehensive monitoring triggers
on:
  push:
    branches: [ master ]
  workflow_run:
    workflows: ["Deploy to GitHub Pages (Optimized)", "Next-Gen CI/CD Pipeline"]
    types:
      - completed
  schedule:
    # Run monitoring every 30 minutes during business hours (UTC)
    - cron: '*/30 8-20 * * 1-5'
    # Run comprehensive health check daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - health-check
          - performance
          - security
          - regression
      alert_level:
        description: 'Alert sensitivity level'
        required: false
        default: 'normal'
        type: choice
        options:
          - low
          - normal
          - high
          - critical

env:
  MONITORING_VERSION: v2
  SITE_URL: https://shishihs.github.io/insurance_self_game/
  ALERT_WEBHOOK: ${{ secrets.MONITORING_WEBHOOK_URL }}
  PERFORMANCE_THRESHOLD: 3.0 # seconds
  UPTIME_THRESHOLD: 99.5 # percentage

jobs:
  # Health monitoring with advanced checks
  health-monitor:
    name: 🌡️ Health Monitor
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      health-status: ${{ steps.health.outputs.status }}
      response-time: ${{ steps.health.outputs.response-time }}
      issues-detected: ${{ steps.health.outputs.issues }}
    steps:
      - name: ⚡ Setup monitoring environment
        run: |
          echo "🌡️ Initializing advanced health monitoring..."
          mkdir -p monitoring-results
          
          # Install additional tools
          sudo apt-get update -qq
          sudo apt-get install -y curl jq bc dnsutils
          
      - name: 💫 DNS & Infrastructure Check
        id: dns-check
        run: |
          echo "💫 Checking DNS and infrastructure..."
          
          # DNS resolution check
          if nslookup github.io >/dev/null 2>&1; then
            echo "dns_status=ok" >> $GITHUB_OUTPUT
            echo "✅ DNS resolution successful"
          else
            echo "dns_status=failed" >> $GITHUB_OUTPUT
            echo "❌ DNS resolution failed"
          fi
          
          # CDN check
          CDN_RESPONSE=$(curl -s -I "${{ env.SITE_URL }}" | grep -i "x-served-by\|cf-ray\|x-cache" | wc -l)
          if [ $CDN_RESPONSE -gt 0 ]; then
            echo "cdn_status=active" >> $GITHUB_OUTPUT
            echo "✅ CDN detected and active"
          else
            echo "cdn_status=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ CDN status unknown"
          fi
          
      - name: 📈 Performance Health Check
        id: health
        run: |
          echo "📈 Running comprehensive health check..."
          
          SITE_URL="${{ env.SITE_URL }}"
          ISSUES_COUNT=0
          
          # Multiple endpoint checks
          for attempt in {1..3}; do
            echo "📡 Health check attempt $attempt/3..."
            
            # Main site check with timing
            START_TIME=$(date +%s.%N)
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
            END_TIME=$(date +%s.%N)
            RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc)
            
            echo "📀 HTTP Status: $HTTP_CODE, Response Time: ${RESPONSE_TIME}s"
            
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "✅ Site is responding (HTTP $HTTP_CODE)"
              
              # Check if response time is acceptable
              if (( $(echo "$RESPONSE_TIME > ${{ env.PERFORMANCE_THRESHOLD }}" | bc -l) )); then
                echo "⚠️ Slow response time: ${RESPONSE_TIME}s > ${{ env.PERFORMANCE_THRESHOLD }}s"
                ISSUES_COUNT=$((ISSUES_COUNT + 1))
              else
                echo "✅ Response time acceptable: ${RESPONSE_TIME}s"
              fi
              break
            else
              echo "❌ Site health check failed (HTTP $HTTP_CODE)"
              ISSUES_COUNT=$((ISSUES_COUNT + 1))
              
              if [ $attempt -lt 3 ]; then
                echo "⏳ Waiting 10s before retry..."
                sleep 10
              fi
            fi
          done
          
          # Content integrity check
          echo "🔍 Checking content integrity..."
          CONTENT=$(curl -s "$SITE_URL" | head -200)
          
          # Check for essential elements
          if echo "$CONTENT" | grep -q "insurance"; then
            echo "✅ Core content detected"
          else
            echo "❌ Core content missing"
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
          fi
          
          if echo "$CONTENT" | grep -q "script"; then
            echo "✅ JavaScript assets detected"
          else
            echo "❌ JavaScript assets missing"
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
          fi
          
          # Check deployment metadata
          DEPLOY_INFO=$(curl -s "${SITE_URL}deploy-info.json" 2>/dev/null || echo "{}")
          if echo "$DEPLOY_INFO" | jq -e .deployedAt > /dev/null 2>&1; then
            DEPLOYED_AT=$(echo "$DEPLOY_INFO" | jq -r .deployedAt)
            echo "✅ Deployment metadata found (deployed: $DEPLOYED_AT)"
          else
            echo "⚠️ Deployment metadata not found"
            ISSUES_COUNT=$((ISSUES_COUNT + 1))
          fi
          
          # Determine overall health status
          if [ $ISSUES_COUNT -eq 0 ]; then
            HEALTH_STATUS="healthy"
            echo "🎉 Site is healthy!"
          elif [ $ISSUES_COUNT -le 2 ]; then
            HEALTH_STATUS="warning"
            echo "⚠️ Site has minor issues ($ISSUES_COUNT issues)"
          else
            HEALTH_STATUS="critical"
            echo "🚨 Site has critical issues ($ISSUES_COUNT issues)"
          fi
          
          # Output results
          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "response-time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES_COUNT" >> $GITHUB_OUTPUT
          
          # Save detailed results
          cat > monitoring-results/health-check.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "status": "$HEALTH_STATUS",
            "httpCode": $HTTP_CODE,
            "responseTime": $RESPONSE_TIME,
            "issuesCount": $ISSUES_COUNT,
            "dnsStatus": "${{ steps.dns-check.outputs.dns_status }}",
            "cdnStatus": "${{ steps.dns-check.outputs.cdn_status }}"
          }
          EOF
          
      - name: 📤 Upload health results
        uses: actions/upload-artifact@v4
        with:
          name: health-monitoring-results
          path: monitoring-results/
          retention-days: 30

  # Performance monitoring with detailed metrics
  performance-monitor:
    name: ⚡ Performance Monitor
    runs-on: ubuntu-latest
    needs: health-monitor
    if: needs.health-monitor.outputs.health-status != 'critical'
    timeout-minutes: 20
    steps:
      - name: ⚡ Setup performance monitoring
        run: |
          echo "⚡ Setting up performance monitoring..."
          mkdir -p performance-results
          
          # Install performance testing tools
          npm install -g lighthouse artillery @web/test-runner
          
      - name: 📈 Lighthouse Performance Audit
        id: lighthouse
        run: |
          echo "📈 Running Lighthouse performance audit..."
          
          SITE_URL="${{ env.SITE_URL }}"
          
          # Run Lighthouse audit
          lighthouse "$SITE_URL" \
            --output=json \
            --output-path=performance-results/lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --quiet || echo "Lighthouse audit completed with warnings"
          
          # Extract key metrics
          if [ -f "performance-results/lighthouse-report.json" ]; then
            PERFORMANCE_SCORE=$(jq -r '.categories.performance.score * 100' performance-results/lighthouse-report.json 2>/dev/null || echo "N/A")
            LCP=$(jq -r '.audits["largest-contentful-paint"].displayValue' performance-results/lighthouse-report.json 2>/dev/null || echo "N/A")
            FID=$(jq -r '.audits["max-potential-fid"].displayValue' performance-results/lighthouse-report.json 2>/dev/null || echo "N/A")
            CLS=$(jq -r '.audits["cumulative-layout-shift"].displayValue' performance-results/lighthouse-report.json 2>/dev/null || echo "N/A")
            
            echo "📊 Performance Metrics:"
            echo "  Performance Score: $PERFORMANCE_SCORE/100"
            echo "  Largest Contentful Paint (LCP): $LCP"
            echo "  First Input Delay (FID): $FID"
            echo "  Cumulative Layout Shift (CLS): $CLS"
            
            # Check if performance is acceptable
            if [ "$PERFORMANCE_SCORE" != "N/A" ] && (( $(echo "$PERFORMANCE_SCORE < 80" | bc -l) )); then
              echo "⚠️ Performance score below threshold: $PERFORMANCE_SCORE < 80"
              echo "performance_status=warning" >> $GITHUB_OUTPUT
            else
              echo "✅ Performance score acceptable: $PERFORMANCE_SCORE"
              echo "performance_status=good" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Lighthouse audit failed"
            echo "performance_status=failed" >> $GITHUB_OUTPUT
          fi
          
      - name: 💹 Load Testing
        run: |
          echo "💹 Running load testing..."
          
          # Create Artillery load test configuration
          cat > performance-results/load-test.yml << 'EOF'
          config:
            target: '${{ env.SITE_URL }}'
            phases:
              - duration: 60
                arrivalRate: 5
                name: "Warm up"
              - duration: 120
                arrivalRate: 10
                name: "Load test"
            defaults:
              headers:
                User-Agent: "GitHub Actions Load Test"
          scenarios:
            - name: "Basic user flow"
              weight: 100
              flow:
                - get:
                    url: "/"
                    expect:
                      - statusCode: 200
                - think: 2
                - get:
                    url: "/deploy-info.json"
                    expect:
                      - statusCode: 200
          EOF
          
          # Run load test
          artillery run performance-results/load-test.yml \
            --output performance-results/load-test-results.json || echo "Load test completed with issues"
          
          # Generate load test report
          if [ -f "performance-results/load-test-results.json" ]; then
            artillery report performance-results/load-test-results.json \
              --output performance-results/load-test-report.html || echo "Report generation completed"
              
            echo "📈 Load test completed successfully"
          else
            echo "⚠️ Load test results not found"
          fi
          
      - name: 📤 Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-monitoring-results
          path: performance-results/
          retention-days: 30

  # Security monitoring and vulnerability scanning
  security-monitor:
    name: 🔒 Security Monitor
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: ⚡ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: 🔒 Security Headers Check
        run: |
          echo "🔒 Checking security headers..."
          mkdir -p security-results
          
          SITE_URL="${{ env.SITE_URL }}"
          
          # Check security headers
          HEADERS=$(curl -s -I "$SITE_URL")
          
          echo "📋 Security Headers Analysis:" | tee security-results/headers-check.log
          
          # Check for important security headers
          if echo "$HEADERS" | grep -i "x-frame-options"; then
            echo "✅ X-Frame-Options header present" | tee -a security-results/headers-check.log
          else
            echo "⚠️ X-Frame-Options header missing" | tee -a security-results/headers-check.log
          fi
          
          if echo "$HEADERS" | grep -i "content-security-policy"; then
            echo "✅ Content-Security-Policy header present" | tee -a security-results/headers-check.log
          else
            echo "⚠️ Content-Security-Policy header missing" | tee -a security-results/headers-check.log
          fi
          
          if echo "$HEADERS" | grep -i "x-content-type-options"; then
            echo "✅ X-Content-Type-Options header present" | tee -a security-results/headers-check.log
          else
            echo "⚠️ X-Content-Type-Options header missing" | tee -a security-results/headers-check.log
          fi
          
      - name: 🔍 Dependency Security Scan
        run: |
          echo "🔍 Running dependency security scan..."
          
          # Setup Node.js for dependency scanning
          curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          
          # Run npm audit
          if [ -f "package.json" ]; then
            npm audit --audit-level moderate --json > security-results/npm-audit.json 2>/dev/null || true
            
            if [ -s security-results/npm-audit.json ]; then
              VULNERABILITIES=$(jq '.vulnerabilities // {} | keys | length' security-results/npm-audit.json 2>/dev/null || echo "0")
              echo "📊 Found $VULNERABILITIES vulnerabilities" | tee -a security-results/security-summary.log
              
              if [ "$VULNERABILITIES" -gt 0 ]; then
                echo "⚠️ Security vulnerabilities detected:" | tee -a security-results/security-summary.log
                jq -r '.vulnerabilities // {} | to_entries[] | "  - \(.key): \(.value.severity)"' security-results/npm-audit.json | tee -a security-results/security-summary.log
              else
                echo "✅ No vulnerabilities found" | tee -a security-results/security-summary.log
              fi
            else
              echo "✅ No security issues detected" | tee -a security-results/security-summary.log
            fi
          else
            echo "⚠️ package.json not found, skipping dependency scan" | tee -a security-results/security-summary.log
          fi
          
      - name: 📤 Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-monitoring-results
          path: security-results/
          retention-days: 30

  # Comprehensive alerting system
  alert-system:
    name: 🚨 Alert System
    needs: [health-monitor, performance-monitor, security-monitor]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 📥 Collect monitoring results
        uses: actions/download-artifact@v4
        with:
          path: all-monitoring-results/
          
      - name: 📊 Generate monitoring report
        id: report
        run: |
          echo "📊 Generating comprehensive monitoring report..."
          
          # Initialize report
          REPORT_FILE="monitoring-report.md"
          
          cat > $REPORT_FILE << 'EOF'
          # 🚨 System Monitoring Report
          
          ## 📋 Executive Summary
          
          EOF
          
          # Health status
          HEALTH_STATUS="${{ needs.health-monitor.outputs.health-status }}"
          RESPONSE_TIME="${{ needs.health-monitor.outputs.response-time }}"
          ISSUES_COUNT="${{ needs.health-monitor.outputs.issues-detected }}"
          
          echo "### 🌡️ Health Status: **$HEALTH_STATUS**" >> $REPORT_FILE
          echo "- Response Time: ${RESPONSE_TIME}s" >> $REPORT_FILE
          echo "- Issues Detected: $ISSUES_COUNT" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Performance status
          PERF_STATUS="${{ needs.performance-monitor.result }}"
          echo "### ⚡ Performance Status: **$PERF_STATUS**" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Security status
          SEC_STATUS="${{ needs.security-monitor.result }}"
          echo "### 🔒 Security Status: **$SEC_STATUS**" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Determine alert level
          ALERT_LEVEL="info"
          
          if [ "$HEALTH_STATUS" = "critical" ] || [ $ISSUES_COUNT -gt 3 ]; then
            ALERT_LEVEL="critical"
            echo "alert_level=critical" >> $GITHUB_OUTPUT
          elif [ "$HEALTH_STATUS" = "warning" ] || [ $ISSUES_COUNT -gt 1 ]; then
            ALERT_LEVEL="warning"
            echo "alert_level=warning" >> $GITHUB_OUTPUT
          else
            ALERT_LEVEL="info"
            echo "alert_level=info" >> $GITHUB_OUTPUT
          fi
          
          echo "## 🚨 Alert Level: **$ALERT_LEVEL**" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Add timestamp
          echo "*Report generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)*" >> $REPORT_FILE
          
          echo "📊 Monitoring report generated:"
          cat $REPORT_FILE
          
          echo "report-content<<EOF" >> $GITHUB_OUTPUT
          cat $REPORT_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 📪 Send alerts (if configured)
        if: steps.report.outputs.alert_level == 'critical' || steps.report.outputs.alert_level == 'warning'
        run: |
          echo "📪 Sending alert for ${{ steps.report.outputs.alert_level }} level issue..."
          
          ALERT_LEVEL="${{ steps.report.outputs.alert_level }}"
          WEBHOOK_URL="${{ env.ALERT_WEBHOOK }}"
          
          if [ "$ALERT_LEVEL" = "critical" ]; then
            EMOJI="🚨"
            COLOR="#ff0000"
          else
            EMOJI="⚠️"
            COLOR="#ffa500"
          fi
          
          # Send webhook notification (if webhook is configured)
          if [ ! -z "$WEBHOOK_URL" ]; then
            curl -X POST "$WEBHOOK_URL" \
              -H 'Content-Type: application/json' \
              -d "{
                \"text\": \"$EMOJI Monitoring Alert: $ALERT_LEVEL\",
                \"attachments\": [{
                  \"color\": \"$COLOR\",
                  \"title\": \"System Health Report\",
                  \"text\": \"Health: ${{ needs.health-monitor.outputs.health-status }}\\nIssues: ${{ needs.health-monitor.outputs.issues-detected }}\\nResponse Time: ${{ needs.health-monitor.outputs.response-time }}s\",
                  \"footer\": \"GitHub Actions Monitoring\",
                  \"ts\": $(date +%s)
                }]
              }" || echo "Webhook notification failed (webhook not configured or unreachable)"
          else
            echo "No webhook configured, alert logged only"
          fi
          
          # Create GitHub issue for critical alerts
          if [ "$ALERT_LEVEL" = "critical" ]; then
            echo "📝 Creating GitHub issue for critical alert..."
            echo "Critical monitoring issue detected - manual intervention may be required"
          fi
          
      - name: 📝 Add to job summary
        run: |
          echo "## 🚨 Advanced Monitoring Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.report.outputs.report-content }}" >> $GITHUB_STEP_SUMMARY
          
      - name: 🎉 Monitoring Complete
        run: |
          echo "🎉 Advanced monitoring cycle completed!"
          echo "📊 Health: ${{ needs.health-monitor.outputs.health-status }}"
          echo "⚡ Performance: ${{ needs.performance-monitor.result }}"
          echo "🔒 Security: ${{ needs.security-monitor.result }}"
          echo "🚨 Alert Level: ${{ steps.report.outputs.alert_level }}"
          
          if [ "${{ steps.report.outputs.alert_level }}" = "info" ]; then
            echo "✅ All systems operational!"
          else
            echo "⚠️ Issues detected - review monitoring results"
          fi