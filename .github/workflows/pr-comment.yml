name: PR Status Comment

on:
  workflow_run:
    workflows: ["PR Automated Review"]
    types: [completed]

permissions:
  contents: read
  pull-requests: write
  checks: read

jobs:
  comment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Download PR number
        uses: actions/github-script@v7
        id: pr-number
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id
            });
            
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: context.payload.workflow_run.workflow_id,
              run_id: context.payload.workflow_run.id
            });
            
            if (runs.data.workflow_runs.length > 0) {
              const run = runs.data.workflow_runs[0];
              if (run.pull_requests && run.pull_requests.length > 0) {
                return run.pull_requests[0].number;
              }
            }
            return null;
      
      - name: Create or update comment
        if: steps.pr-number.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-number.outputs.result }};
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.workflow_run.head_sha
            });
            
            let comment = '## 🤖 自動レビュー結果\n\n';
            comment += `**ワークフロー実行**: [#${context.payload.workflow_run.id}](${context.payload.workflow_run.html_url})\n`;
            comment += `**実行時刻**: ${new Date(context.payload.workflow_run.created_at).toLocaleString('ja-JP')}\n\n`;
            
            comment += '| チェック項目 | 状態 | 詳細 |\n';
            comment += '|---|---|---|\n';
            
            const checkRuns = checks.check_runs.filter(check => 
              check.app.slug === 'github-actions'
            );
            
            checkRuns.forEach(check => {
              let status = '⏳';
              let detail = check.status;
              
              if (check.conclusion === 'success') {
                status = '✅';
                detail = '成功';
              } else if (check.conclusion === 'failure') {
                status = '❌';
                detail = '失敗';
              } else if (check.conclusion === 'cancelled') {
                status = '⚪';
                detail = 'キャンセル';
              } else if (check.status === 'in_progress') {
                status = '🔄';
                detail = '実行中';
              }
              
              comment += `| ${check.name} | ${status} | ${detail} |\n`;
            });
            
            // 全体の結果サマリー
            const success = checkRuns.every(check => check.conclusion === 'success');
            const hasFailure = checkRuns.some(check => check.conclusion === 'failure');
            const inProgress = checkRuns.some(check => check.status === 'in_progress');
            
            comment += '\n### 📊 総合結果\n';
            if (inProgress) {
              comment += '🔄 **実行中**: チェックが進行中です...\n';
            } else if (success) {
              comment += '✅ **すべてのチェックに合格しました！** マージの準備ができています。\n';
            } else if (hasFailure) {
              comment += '❌ **チェックに失敗しました。** 上記の失敗項目を修正してください。\n';
            }
            
            // 既存のコメントを探す
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🤖 自動レビュー結果')
            );
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: comment
              });
            }