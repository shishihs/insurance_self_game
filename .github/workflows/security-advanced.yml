name: Advanced Security Scanning Pipeline

on:
  push:
    branches: [ master, staging ]
  pull_request:
    branches: [ master ]
  schedule:
    # Daily comprehensive security scan at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - sast-only
          - dependencies-only
          - vulnerability-scan

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

jobs:
  # SAST (Static Application Security Testing)
  sast-analysis:
    name: SAST Analysis
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        
    - name: ESLint Security Analysis
      run: |
        echo "üîç Running ESLint security analysis..."
        npm run lint -- --format json --output-file eslint-security-report.json || true
        
        # Parse and analyze ESLint results
        if [ -f eslint-security-report.json ]; then
          SECURITY_ISSUES=$(cat eslint-security-report.json | jq '[.[] | select(.messages[] | .ruleId | test("security"))] | length')
          echo "Security issues found: $SECURITY_ISSUES"
          
          if [ "$SECURITY_ISSUES" -gt 0 ]; then
            echo "## üö® ESLint Security Issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat eslint-security-report.json | jq -r '.[] | select(.messages[] | .ruleId | test("security")) | .filePath as $file | .messages[] | select(.ruleId | test("security")) | "- **\($file)**: \(.message) (Rule: \(.ruleId))"' >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
    - name: Semgrep Security Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/vue
        generateSarif: "1"
        
    - name: Upload Semgrep results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif
        
    - name: Upload security artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sast-reports
        path: |
          eslint-security-report.json
          semgrep.sarif
        retention-days: 30

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: 'npm'
        
    - name: Comprehensive Dependency Audit
      run: |
        echo "üîç Running comprehensive dependency security audit..."
        
        # NPM Audit
        echo "### NPM Audit Results" >> audit-report.md
        npm audit --json > npm-audit.json || true
        
        if [ -s npm-audit.json ]; then
          CRITICAL=$(cat npm-audit.json | jq '.vulnerabilities // {} | to_entries[] | select(.value.severity == "critical") | length')
          HIGH=$(cat npm-audit.json | jq '.vulnerabilities // {} | to_entries[] | select(.value.severity == "high") | length')
          MODERATE=$(cat npm-audit.json | jq '.vulnerabilities // {} | to_entries[] | select(.value.severity == "moderate") | length')
          LOW=$(cat npm-audit.json | jq '.vulnerabilities // {} | to_entries[] | select(.value.severity == "low") | length')
          
          echo "| Severity | Count |" >> audit-report.md
          echo "|----------|-------|" >> audit-report.md
          echo "| Critical | $CRITICAL |" >> audit-report.md
          echo "| High | $HIGH |" >> audit-report.md
          echo "| Moderate | $MODERATE |" >> audit-report.md
          echo "| Low | $LOW |" >> audit-report.md
          echo "" >> audit-report.md
          
          # Fail on critical or too many high severity vulnerabilities
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 5 ]; then
            echo "‚ùå Critical security vulnerabilities found!"
            echo "Critical: $CRITICAL, High: $HIGH"
            cat audit-report.md >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi
        
    - name: Check for known vulnerable packages
      run: |
        echo "üîç Checking for known vulnerable packages..."
        
        # Create a list of potentially dangerous packages
        cat > vulnerable-packages.txt << EOF
        event-stream
        flatmap-stream
        eslint-scope
        getcookies
        rc
        npm-user-validate
        EOF
        
        # Check if any vulnerable packages are installed
        VULNERABLE_FOUND=false
        while read -r package; do
          if npm list "$package" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Potentially vulnerable package found: $package"
            VULNERABLE_FOUND=true
          fi
        done < vulnerable-packages.txt
        
        if [ "$VULNERABLE_FOUND" = true ]; then
          echo "## ‚ö†Ô∏è Potentially Vulnerable Packages Detected" >> $GITHUB_STEP_SUMMARY
          echo "Manual review required for the packages listed above." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: License Compliance Check
      run: |
        echo "üìã Performing license compliance check..."
        
        # Check for copyleft licenses that might be problematic
        find node_modules -name "package.json" -exec grep -l "GPL-[23]\.0\|AGPL-[13]\.0\|LGPL-[23]\.0" {} \; > problematic-licenses.txt 2>/dev/null || true
        
        if [ -s problematic-licenses.txt ]; then
          echo "## ‚ö†Ô∏è License Compliance Issues" >> $GITHUB_STEP_SUMMARY
          echo "The following packages have potentially problematic licenses:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          while read -r file; do
            package_name=$(dirname "$file" | sed 's|node_modules/||g' | sed 's|/@.*||g')
            license=$(grep -o '"license":\s*"[^"]*"' "$file" | cut -d'"' -f4)
            echo "- **$package_name**: $license" >> $GITHUB_STEP_SUMMARY
          done < problematic-licenses.txt
        fi
        
    - name: Supply Chain Security
      run: |
        echo "üîó Analyzing supply chain security..."
        
        # Check for packages with too many dependencies (potential security risk)
        npm list --depth=0 --json > dependencies.json
        
        # Analyze dependency tree depth
        MAX_DEPTH=$(npm list --depth=10 --json | jq '.dependencies | .. | objects | keys | length' | sort -nr | head -1)
        
        echo "Maximum dependency depth: $MAX_DEPTH"
        if [ "$MAX_DEPTH" -gt 100 ]; then
          echo "‚ö†Ô∏è Very deep dependency tree detected (depth: $MAX_DEPTH)"
          echo "## ‚ö†Ô∏è Deep Dependency Tree" >> $GITHUB_STEP_SUMMARY
          echo "Dependency tree depth ($MAX_DEPTH) may indicate supply chain risks." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-reports
        path: |
          npm-audit.json
          audit-report.md
          dependencies.json
        retention-days: 14

  # Container and Infrastructure Security (if applicable)
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Docker Security Scan (if Dockerfile exists)
      run: |
        if [ -f Dockerfile ]; then
          echo "üê≥ Docker security scan would run here"
          # For now, just document that we would scan Docker images
          echo "## üê≥ Docker Security" >> $GITHUB_STEP_SUMMARY
          echo "Docker security scanning configured for future use." >> $GITHUB_STEP_SUMMARY
        else
          echo "No Dockerfile found, skipping container security scan"
        fi
        
    - name: GitHub Security Configuration Audit
      run: |
        echo "‚öôÔ∏è Auditing GitHub security configuration..."
        
        # Check for security-related files
        SECURITY_FILES=(
          ".github/workflows/security-advanced.yml"
          ".github/workflows/quality-gates.yml"
          ".github/dependabot.yml"
          ".gitignore"
          "package-lock.json"
          "tsconfig.json"
          "eslint.config.mjs"
        )
        
        echo "## üîß Security Configuration Status" >> $GITHUB_STEP_SUMMARY
        echo "| File | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        
        for file in "${SECURITY_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "| $file | ‚úÖ Present |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| $file | ‚ùå Missing |" >> $GITHUB_STEP_SUMMARY
          fi
        done

  # Security Testing Integration
  security-tests:
    name: Security Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Security Tests
      run: |
        echo "üîí Running comprehensive security test suite..."
        
        # Run security-specific tests
        npm run test:run src/__tests__/security -- --verbose --coverage
        
        # Run security integration tests
        if [ -d "src/__tests__/integration" ]; then
          npm run test:run src/__tests__/integration -- --testNamePattern="security|Security" --verbose
        fi
        
    - name: Security Performance Tests
      run: |
        echo "‚ö° Running security performance tests..."
        
        # Test security functions under load
        npm run test:run src/__tests__/performance -- --testNamePattern="security|Security" || echo "Security performance tests not available"
        
    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: |
          coverage/
          test-results.json
        retention-days: 7

  # Security Report Aggregation
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-security, infrastructure-security, security-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate Security Summary
      run: |
        echo "# üõ°Ô∏è Comprehensive Security Report" >> security-summary.md
        echo "" >> security-summary.md
        echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## üìä Scan Results Overview" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Component | Status |" >> security-summary.md
        echo "|-----------|--------|" >> security-summary.md
        echo "| SAST Analysis | ${{ needs.sast-analysis.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
        echo "| Dependency Security | ${{ needs.dependency-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
        echo "| Infrastructure Security | ${{ needs.infrastructure-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
        echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> security-summary.md
        echo "" >> security-summary.md
        
        # Overall security status
        if [ "${{ needs.sast-analysis.result }}" = "success" ] && [ "${{ needs.dependency-security.result }}" = "success" ] && [ "${{ needs.security-tests.result }}" != "failure" ]; then
          echo "## üéâ Overall Security Status: ‚úÖ GOOD" >> security-summary.md
          echo "" >> security-summary.md
          echo "All critical security checks passed. The application appears to be secure for deployment." >> security-summary.md
        else
          echo "## ‚ö†Ô∏è Overall Security Status: ‚ùå NEEDS ATTENTION" >> security-summary.md
          echo "" >> security-summary.md
          echo "Some security checks failed. Please review the individual scan results and address any critical issues before deployment." >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## üîç Detailed Reports" >> security-summary.md
        echo "" >> security-summary.md
        echo "- **SAST Analysis**: Check CodeQL and Semgrep results in Security tab" >> security-summary.md
        echo "- **Dependency Audit**: Review npm audit results in workflow logs" >> security-summary.md
        echo "- **Security Tests**: View test coverage and results in artifacts" >> security-summary.md
        
        # Add to GitHub Step Summary
        cat security-summary.md >> $GITHUB_STEP_SUMMARY
        
    - name: Upload Security Summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-summary.md
        retention-days: 30
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üõ°Ô∏è Security Scan Results\n\n${summary}`
          });