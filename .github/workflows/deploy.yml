name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      NODE_OPTIONS: "--max-old-space-size=4096"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        
    - name: Setup npm cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-cache-

    - name: Install dependencies
      run: |
        # Clean install to avoid rollup native dependency issues
        rm -rf node_modules
        npm ci
      
    - name: Type check
      run: npm run type-check
      
    - name: Lint
      run: npm run lint || echo "⚠️ Lint failed but continuing deployment"
      continue-on-error: true
      
    - name: Test
      run: npm run test:run -- --reporter=verbose || echo "⚠️ Tests failed but continuing deployment"
      continue-on-error: true
      
    - name: Build
      run: npm run build
      
    - name: Create .nojekyll file
      run: touch dist/.nojekyll
      
    - name: Debug build output
      run: |
        echo "=== Build output verification ==="
        ls -la dist/
        echo "=== HTML content ==="
        head -10 dist/index.html
        echo "=== JS files ==="
        ls -la dist/js/ || echo "No js directory"
      
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Wait for deployment
      run: sleep 30
      
    - name: Verify deployment
      run: |
        echo "Verifying deployment at ${{ steps.deployment.outputs.page_url }}"
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deployment.outputs.page_url }}")
        if [ $response -eq 200 ]; then
          echo "✅ Deployment successful - HTTP $response"
        else
          echo "❌ Deployment failed - HTTP $response"
          exit 1
        fi
