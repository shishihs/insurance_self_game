name: Quality Gates & Security Pipeline

on:
  push:
    branches: [ master, develop, staging ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - security
          - performance
          - dependencies

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Security scanning
  security-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Install dependencies
      run: npm ci
      
    - name: NPM Security Audit
      run: |
        echo "🔍 Running NPM security audit..."
        npm run audit --audit-level moderate --json > npm-audit.json || true
        
        # Parse and display results
        if [ -s npm-audit.json ]; then
          VULNERABILITIES=$(cat npm-audit.json | jq '.vulnerabilities // {} | keys | length')
          echo "Found $VULNERABILITIES vulnerabilities"
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "## 🚨 Security Vulnerabilities Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat npm-audit.json | jq -r '.vulnerabilities // {} | to_entries[] | "- **\(.key)**: \(.value.severity) severity"' >> $GITHUB_STEP_SUMMARY
            
            # Fail on high/critical vulnerabilities
            HIGH_CRIT=$(cat npm-audit.json | jq '.vulnerabilities // {} | to_entries[] | select(.value.severity == "high" or .value.severity == "critical") | length')
            if [ "$HIGH_CRIT" -gt 0 ]; then
              echo "❌ High/Critical vulnerabilities found: $HIGH_CRIT"
              exit 1
            fi
          fi
        fi
        
    - name: License compliance check
      run: |
        echo "📋 Checking license compliance..."
        npm run licenses list --json > licenses.json
        
        # Check for problematic licenses
        PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0")
        
        for license in "${PROBLEMATIC_LICENSES[@]}"; do
          if grep -q "$license" licenses.json; then
            echo "⚠️ Problematic license found: $license"
            echo "## ⚠️ License Issues" >> $GITHUB_STEP_SUMMARY
            echo "Found potentially problematic license: $license" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Dependency analysis
      run: |
        echo "📦 Analyzing dependencies..."
        
        # Count dependencies
        DEPS=$(cat package.json | jq '.dependencies // {} | keys | length')
        DEV_DEPS=$(cat package.json | jq '.devDependencies // {} | keys | length')
        
        echo "Dependencies: $DEPS, Dev Dependencies: $DEV_DEPS"
        
        # Check for outdated packages
        npm run outdated --format json > outdated.json || true
        
        if [ -s outdated.json ]; then
          OUTDATED_COUNT=$(cat outdated.json | jq 'length')
          echo "📈 Outdated packages: $OUTDATED_COUNT"
          
          if [ "$OUTDATED_COUNT" -gt 0 ]; then
            echo "## 📦 Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat outdated.json | jq -r '.[] | "- **\(.name)**: \(.current) → \(.latest)"' >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
    - name: Code quality metrics
      run: |
        echo "📊 Calculating code quality metrics..."
        
        # Lines of code
        LOC=$(find src -name "*.ts" -o -name "*.vue" -o -name "*.js" | xargs wc -l | tail -1 | awk '{print $1}')
        echo "Lines of code: $LOC"
        
        # Complexity analysis (simple)
        COMPLEXITY=$(grep -r "if\|for\|while\|switch\|catch" src --include="*.ts" --include="*.vue" | wc -l)
        echo "Cyclomatic complexity (approximate): $COMPLEXITY"
        
        # TODO/FIXME count
        TODOS=$(grep -r "TODO\|FIXME\|XXX" src --include="*.ts" --include="*.vue" | wc -l)
        echo "TODOs/FIXMEs: $TODOS"
        
        # Add to summary
        echo "## 📊 Code Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lines of Code | $LOC |" >> $GITHUB_STEP_SUMMARY
        echo "| Cyclomatic Complexity | $COMPLEXITY |" >> $GITHUB_STEP_SUMMARY
        echo "| TODOs/FIXMEs | $TODOS |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependencies | $DEPS |" >> $GITHUB_STEP_SUMMARY
        echo "| Dev Dependencies | $DEV_DEPS |" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload security artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          npm-audit.json
          licenses.json
          outdated.json
        retention-days: 30

  # Performance regression detection
  performance-gate:
    name: Performance Regression Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build current PR
      run: |
        echo "🔨 Building PR version..."
        npm run build
        
        # Analyze bundle size
        BUNDLE_SIZE=$(du -sb dist | cut -f1)
        echo "PR bundle size: $BUNDLE_SIZE bytes"
        echo "CURRENT_BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV
        
    - name: Checkout base branch
      run: |
        git fetch origin ${{ github.base_ref }}
        git checkout FETCH_HEAD
        
    - name: Build base version
      run: |
        echo "🔨 Building base version..."
        npm ci
        npm run build
        
        # Analyze bundle size
        BUNDLE_SIZE=$(du -sb dist | cut -f1)
        echo "Base bundle size: $BUNDLE_SIZE bytes"
        echo "BASE_BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV
        
    - name: Compare performance
      run: |
        echo "📊 Comparing performance metrics..."
        
        CURRENT_SIZE=${{ env.CURRENT_BUNDLE_SIZE }}
        BASE_SIZE=${{ env.BASE_BUNDLE_SIZE }}
        
        # Calculate percentage increase
        INCREASE=$(echo "scale=2; ($CURRENT_SIZE - $BASE_SIZE) * 100 / $BASE_SIZE" | bc)
        
        echo "Bundle size change: $INCREASE%"
        
        # Alert if bundle size increased by more than 10%
        if (( $(echo "$INCREASE > 10" | bc -l) )); then
          echo "⚠️ Bundle size increased significantly: $INCREASE%"
          echo "## ⚠️ Performance Alert" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Bundle size increased by $INCREASE% ($(echo "scale=0; ($CURRENT_SIZE - $BASE_SIZE) / 1024" | bc) KB)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Base | Current | Change |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size | $(echo "scale=1; $BASE_SIZE / 1024" | bc) KB | $(echo "scale=1; $CURRENT_SIZE / 1024" | bc) KB | +$INCREASE% |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if increase is more than 25%
          if (( $(echo "$INCREASE > 25" | bc -l) )); then
            echo "❌ Bundle size increase too large, failing build"
            exit 1
          fi
        else
          echo "✅ Bundle size acceptable: $INCREASE%"
        fi

  # Code coverage gate
  coverage-gate:
    name: Code Coverage Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: |
        npm run test:coverage
        
    - name: Coverage analysis
      run: |
        if [ -f coverage/coverage-summary.json ]; then
          LINES_PCT=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          BRANCHES_PCT=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          STATEMENTS_PCT=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          
          echo "📊 Coverage Summary:"
          echo "  Lines: $LINES_PCT%"
          echo "  Functions: $FUNCTIONS_PCT%"
          echo "  Branches: $BRANCHES_PCT%"
          echo "  Statements: $STATEMENTS_PCT%"
          
          # Add to summary
          echo "## 📈 Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lines | $LINES_PCT% |" >> $GITHUB_STEP_SUMMARY
          echo "| Functions | $FUNCTIONS_PCT% |" >> $GITHUB_STEP_SUMMARY
          echo "| Branches | $BRANCHES_PCT% |" >> $GITHUB_STEP_SUMMARY
          echo "| Statements | $STATEMENTS_PCT% |" >> $GITHUB_STEP_SUMMARY
          
          # Check minimum coverage thresholds
          MIN_COVERAGE=75
          
          if (( $(echo "$LINES_PCT < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Line coverage below threshold: $LINES_PCT% < $MIN_COVERAGE%"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Coverage below minimum threshold of $MIN_COVERAGE%**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Coverage meets requirements: $LINES_PCT% >= $MIN_COVERAGE%"
          fi
        else
          echo "❌ Coverage report not found"
          exit 1
        fi
        
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # Integration with main workflow
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [security-audit, performance-gate, coverage-gate]
    if: always()
    
    steps:
    - name: Determine overall status
      run: |
        SECURITY_STATUS="${{ needs.security-audit.result }}"
        PERFORMANCE_STATUS="${{ needs.performance-gate.result }}"
        COVERAGE_STATUS="${{ needs.coverage-gate.result }}"
        
        echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Gate | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | $([ "$SECURITY_STATUS" = "success" ] && echo "✅ Passed" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Gate | $([ "$PERFORMANCE_STATUS" = "success" ] && echo "✅ Passed" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Gate | $([ "$COVERAGE_STATUS" = "success" ] && echo "✅ Passed" || echo "❌ Failed") |" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$SECURITY_STATUS" = "success" ] && [ "$COVERAGE_STATUS" = "success" ] && [ "$PERFORMANCE_STATUS" != "failure" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **All quality gates passed!**" >> $GITHUB_STEP_SUMMARY
          echo "quality_gates_passed=true" >> $GITHUB_ENV
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Some quality gates failed. Review required.**" >> $GITHUB_STEP_SUMMARY
          echo "quality_gates_passed=false" >> $GITHUB_ENV
        fi