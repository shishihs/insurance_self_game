/**\n * ゲーム状態管理システム - メインエクスポート\n * \n * このモジュールは包括的な状態管理システムを提供します：\n * - セーブ/ロード機能\n * - 拡張統計システム\n * - Undo/Redo機能\n * - LocalStorage最適化\n * - プレイヤー分析\n */\n\n// 状態管理の中核\nexport { GameStateManager } from './GameStateManager'\nexport type { \n  SaveData, \n  SaveMetadata, \n  EnhancedPlayerStats,\n  InsuranceUsagePattern,\n  Achievement,\n  DailyProgress,\n  PlayStreak,\n  GameStateSnapshot,\n  SaveSlot\n} from './GameStateManager'\n\n// セーブ/ロードサービス\nexport { SaveLoadService, SaveLoadUtils } from './SaveLoadService'\nexport type { \n  SaveLoadResult,\n  SaveOptions,\n  LoadOptions\n} from './SaveLoadService'\n\n// ストレージ最適化\nexport { StorageOptimizer } from '../storage/StorageOptimizer'\nexport type {\n  CompressionOptions,\n  CacheOptions,\n  BatchOptions,\n  StorageOptimizerConfig,\n  StorageStats\n} from '../storage/StorageOptimizer'\n\n// プレイヤー分析\nexport { GameAnalytics } from '../analytics/GameAnalytics'\nexport type {\n  PlayerAction,\n  StrategyPattern,\n  EfficiencyMetrics,\n  LearningProgress\n} from '../analytics/GameAnalytics'\n\n// Undo/Redo機能\nexport { UndoRedoManager } from '../commands/UndoRedoManager'\nexport { CommandHistory } from '../commands/CommandHistory'\nexport type {\n  UndoRedoEvent,\n  UndoRedoConfig,\n  CommandHistoryConfig,\n  CommandHistoryStats,\n  UndoRedoResult\n} from '../commands/UndoRedoManager'\n\n// コマンドシステム\nexport {\n  CardSelectionCommand,\n  ChallengeCommand,\n  InsurancePurchaseCommand,\n  NextTurnCommand,\n  NoOpCommand,\n  CompositeCommand,\n  SnapshotCommand\n} from '../commands/GameCommand'\nexport type {\n  GameCommand,\n  CommandCategory\n} from '../commands/GameCommand'\n\n// UIコンポーネント\nexport { SaveLoadMenu } from '../ui/SaveLoadMenu'\nexport { StatisticsPanel } from '../ui/StatisticsPanel'\n\n/**\n * 統合ゲーム状態管理システム\n * すべての状態管理機能を統合して提供する高レベルAPIクラス\n */\nexport class IntegratedGameStateSystem {\n  private stateManager: GameStateManager\n  private saveLoadService: SaveLoadService\n  private storageOptimizer: StorageOptimizer\n  private analytics: GameAnalytics\n  private undoRedoManager: UndoRedoManager\n  \n  constructor(config?: {\n    storageConfig?: Partial<StorageOptimizerConfig>\n    undoRedoConfig?: Partial<UndoRedoConfig>\n  }) {\n    this.stateManager = GameStateManager.getInstance()\n    this.saveLoadService = new SaveLoadService()\n    this.storageOptimizer = StorageOptimizer.getInstance(config?.storageConfig)\n    this.analytics = new GameAnalytics()\n    this.undoRedoManager = new UndoRedoManager(config?.undoRedoConfig)\n  }\n  \n  /**\n   * システムを初期化\n   */\n  initialize(game: Game): void {\n    this.stateManager.setCurrentGame(game)\n    this.undoRedoManager.setCurrentGame(game)\n    \n    // 分析システムにゲーム開始を記録\n    this.analytics.recordAction({\n      type: 'game_complete',\n      gameStage: game.stage,\n      turn: game.turn,\n      vitality: game.vitality,\n      data: { sessionStart: true }\n    })\n    \n    console.log('🎮 統合ゲーム状態管理システムを初期化しました')\n  }\n  \n  /**\n   * 包括的な状態情報を取得\n   */\n  getSystemStatus(): {\n    saveSlots: SaveSlot[]\n    storageInfo: ReturnType<StorageOptimizer['getStorageInfo']>\n    undoRedoState: ReturnType<UndoRedoManager['getHistoryState']>\n    analytics: {\n      stats: EnhancedPlayerStats\n      efficiency: EfficiencyMetrics\n      patterns: StrategyPattern[]\n      learning: LearningProgress\n    }\n    performance: {\n      storageStats: StorageStats\n      undoRedoStats: CommandHistoryStats\n    }\n  } {\n    return {\n      saveSlots: this.saveLoadService.getSaveSlots(),\n      storageInfo: this.storageOptimizer.getStorageInfo(),\n      undoRedoState: this.undoRedoManager.getHistoryState(),\n      analytics: {\n        stats: this.stateManager.getEnhancedStats(),\n        efficiency: this.analytics.getEfficiencyMetrics(),\n        patterns: this.analytics.getStrategyPatterns(),\n        learning: this.analytics.getLearningProgress()\n      },\n      performance: {\n        storageStats: this.storageOptimizer.getStats(),\n        undoRedoStats: this.undoRedoManager.getHistoryStats()\n      }\n    }\n  }\n  \n  /**\n   * システム全体を最適化\n   */\n  async optimizeSystem(): Promise<{\n    cleanupResult: Awaited<ReturnType<StorageOptimizer['cleanup']>>\n    performanceGain: number\n  }> {\n    const beforeStats = this.storageOptimizer.getStats()\n    \n    // ストレージクリーンアップ\n    const cleanupResult = await this.storageOptimizer.cleanup()\n    \n    // バッチ処理を強制実行\n    await this.storageOptimizer.flushBatch()\n    \n    const afterStats = this.storageOptimizer.getStats()\n    const performanceGain = afterStats.averageOperationTime > 0 \n      ? (beforeStats.averageOperationTime - afterStats.averageOperationTime) / beforeStats.averageOperationTime\n      : 0\n    \n    console.log('⚡ システム最適化完了:', {\n      freedSpace: cleanupResult.freedSpace,\n      performanceGain: `${(performanceGain * 100).toFixed(1)}%`\n    })\n    \n    return { cleanupResult, performanceGain }\n  }\n  \n  /**\n   * システム全体をリセット\n   */\n  async resetSystem(): Promise<void> {\n    // 全データのバックアップを作成\n    const backup = this.saveLoadService.exportSaveData()\n    \n    // 各システムをクリア\n    this.stateManager = GameStateManager.getInstance()\n    this.undoRedoManager.clearHistory()\n    this.storageOptimizer.clearCache()\n    this.analytics.resetAnalytics()\n    \n    console.log('🔄 システム全体をリセットしました')\n    \n    // バックアップをログに出力（手動復旧用）\n    if (backup.success) {\n      console.log('💾 バックアップデータ:', backup.data)\n    }\n  }\n  \n  /**\n   * システムを安全に終了\n   */\n  async shutdown(): Promise<void> {\n    // 未保存のデータを保存\n    await this.storageOptimizer.flushBatch()\n    \n    // 各システムをクリーンアップ\n    this.storageOptimizer.destroy()\n    this.undoRedoManager.destroy()\n    this.stateManager.destroy()\n    \n    console.log('⏹️ 統合ゲーム状態管理システムを終了しました')\n  }\n  \n  // ===== 便利なヘルパーメソッド =====\n  \n  /**\n   * ワンクリックでゲームをセーブ、統計更新、最適化を実行\n   */\n  async quickSave(game: Game, slotId: string = 'quick'): Promise<SaveLoadResult> {\n    // ゲーム完了統計を更新\n    this.stateManager.onGameComplete(game.stats)\n    \n    // セーブを実行\n    const saveResult = await this.saveLoadService.saveGame(game, slotId, {\n      slotName: `クイックセーブ - ${new Date().toLocaleString()}`,\n      overwrite: true\n    })\n    \n    if (saveResult.success) {\n      // バックグラウンドで最適化\n      setTimeout(() => {\n        this.optimizeSystem().catch(console.error)\n      }, 100)\n    }\n    \n    return saveResult\n  }\n  \n  /**\n   * インテリジェントなロード（最適なセーブデータを自動選択）\n   */\n  async smartLoad(): Promise<SaveLoadResult> {\n    const slots = this.saveLoadService.getSaveSlots()\n    const nonEmptySlots = slots.filter(slot => !slot.isEmpty)\n    \n    if (nonEmptySlots.length === 0) {\n      return {\n        success: false,\n        message: 'ロード可能なセーブデータがありません',\n        affectedCommands: 0\n      }\n    }\n    \n    // 最新のセーブデータを選択\n    const latestSlot = nonEmptySlots.reduce((latest, current) => \n      current.lastSaved > latest.lastSaved ? current : latest\n    )\n    \n    return await this.saveLoadService.loadGame(latestSlot.id, {\n      validateData: true\n    })\n  }\n  \n  /**\n   * AIによるプレイ改善提案\n   */\n  getPlayImprovementSuggestions(): {\n    immediate: string[]\n    strategic: string[]\n    longTerm: string[]\n  } {\n    const advice = this.analytics.generatePersonalizedAdvice()\n    const efficiency = this.analytics.getEfficiencyMetrics()\n    const patterns = this.analytics.getStrategyPatterns()\n    \n    const immediate: string[] = []\n    const strategic: string[] = []\n    const longTerm: string[] = []\n    \n    // 即座に改善可能な点\n    if (efficiency.decisionSpeed > 8) {\n      immediate.push('決定時間を短縮することで集中力が向上します')\n    }\n    \n    if (efficiency.optimalPlayRate < 60) {\n      immediate.push('より強力なカードの組み合わせを意識してみてください')\n    }\n    \n    // 戦略的改善点\n    if (patterns.length > 0) {\n      const dominantPattern = patterns[0]\n      if (dominantPattern.successRate < 0.7) {\n        strategic.push(`現在の「${dominantPattern.name}」の成功率を向上させるか、他の戦略を試してみてください`)\n      }\n    }\n    \n    strategic.push(...advice.slice(0, 2))\n    \n    // 長期的な目標\n    const stats = this.stateManager.getEnhancedStats()\n    if (stats.gamesCompleted < 10) {\n      longTerm.push('様々な戦略を試して自分に合ったプレイスタイルを見つけましょう')\n    } else if (stats.gamesCompleted >= 10) {\n      longTerm.push('一貫したプレイスタイルを確立し、効率性を追求しましょう')\n    }\n    \n    return { immediate, strategic, longTerm }\n  }\n}\n\n// デフォルトエクスポート\nexport default IntegratedGameStateSystem"