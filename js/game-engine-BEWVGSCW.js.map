{"version":3,"file":"game-engine-BEWVGSCW.js","sources":["../../src/game/systems/UnifiedAnimationManager.ts","../../src/game/config/gameConfig.ts","../../src/game/systems/TutorialManager.ts","../../src/game/ui/TutorialOverlay.ts","../../src/game/tutorial/TutorialTestHelper.ts","../../src/game/tutorial/InteractiveTutorialConfig.ts","../../src/game/systems/DropZoneManager.ts","../../src/game/systems/DropZoneValidators.ts","../../src/game/systems/DropZoneIntegration.ts","../../src/game/systems/KeyboardController.ts","../../src/game/systems/WebAudioSoundGenerator.ts","../../src/game/systems/SoundManager.ts","../../src/game/systems/EventCleanupManager.ts","../../src/game/systems/MobilePerformanceManager.ts","../../src/game/input/TouchGestureManager.ts","../../src/game/GameManager.ts"],"sourcesContent":["/**\r\n * 統一されたアニメーションマネージャー\r\n * すべてのゲーム内アニメーションを一元管理\r\n */\r\n\r\nimport type { Ref } from 'vue';\r\nimport { ref } from 'vue'\r\n\r\n// アニメーションタイプ\r\nexport type AnimationType = \r\n  | 'fadeIn' \r\n  | 'fadeOut' \r\n  | 'slideIn' \r\n  | 'slideOut' \r\n  | 'scaleIn' \r\n  | 'scaleOut'\r\n  | 'bounce' \r\n  | 'shake' \r\n  | 'rotate' \r\n  | 'pulse'\r\n  | 'flip'\r\n  | 'glow'\r\n\r\n// アニメーション設定\r\nexport interface AnimationConfig {\r\n  duration?: number\r\n  delay?: number\r\n  easing?: string\r\n  intensity?: 'low' | 'normal' | 'high'\r\n  direction?: 'up' | 'down' | 'left' | 'right'\r\n  loop?: boolean\r\n  onComplete?: () => void\r\n}\r\n\r\n// アニメーション状態\r\ninterface AnimationState {\r\n  id: string\r\n  element: HTMLElement\r\n  type: AnimationType\r\n  config: AnimationConfig\r\n  startTime: number\r\n  isRunning: boolean\r\n}\r\n\r\n// パフォーマンス設定\r\ninterface PerformanceConfig {\r\n  maxConcurrentAnimations: number\r\n  enableGPUAcceleration: boolean\r\n  reducedMotion: boolean\r\n  targetFPS: number\r\n}\r\n\r\nexport class UnifiedAnimationManager {\r\n  private animations: Map<string, AnimationState> = new Map()\r\n  private animationFrame: number | null = null\r\n  private performanceConfig: PerformanceConfig\r\n  private animationSpeed: Ref<number> = ref(1)\r\n  private isPaused: Ref<boolean> = ref(false)\r\n  private activeAnimationCount: Ref<number> = ref(0)\r\n\r\n  constructor(config?: Partial<PerformanceConfig>) {\r\n    this.performanceConfig = {\r\n      maxConcurrentAnimations: 10,\r\n      enableGPUAcceleration: true,\r\n      reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\r\n      targetFPS: 60,\r\n      ...config\r\n    }\r\n\r\n    // モーション設定の変更を監視\r\n    window.matchMedia('(prefers-reduced-motion: reduce)').addEventListener('change', (e) => {\r\n      this.performanceConfig.reducedMotion = e.matches\r\n    })\r\n\r\n    // アニメーションループ開始\r\n    this.startAnimationLoop()\r\n  }\r\n\r\n  /**\r\n   * アニメーションを開始\r\n   */\r\n  animate(element: HTMLElement, type: AnimationType, config: AnimationConfig = {}): string {\r\n    const id = this.generateAnimationId()\r\n    \r\n    // パフォーマンス制限チェック\r\n    if (this.activeAnimationCount.value >= this.performanceConfig.maxConcurrentAnimations) {\r\n      console.warn('Maximum concurrent animations reached')\r\n      config.onComplete?.()\r\n      return id\r\n    }\r\n\r\n    // モーション削減モードの場合は即座に完了\r\n    if (this.performanceConfig.reducedMotion) {\r\n      this.applyReducedMotionAnimation(element, type, config)\r\n      config.onComplete?.()\r\n      return id\r\n    }\r\n\r\n    // アニメーション状態を作成\r\n    const state: AnimationState = {\r\n      id,\r\n      element,\r\n      type,\r\n      config: {\r\n        duration: 300,\r\n        delay: 0,\r\n        easing: 'cubic-bezier(0.4, 0, 0.2, 1)',\r\n        intensity: 'normal',\r\n        ...config\r\n      },\r\n      startTime: performance.now() + (config.delay || 0),\r\n      isRunning: true\r\n    }\r\n\r\n    // GPU最適化\r\n    if (this.performanceConfig.enableGPUAcceleration) {\r\n      element.style.willChange = 'transform, opacity'\r\n    }\r\n\r\n    // アニメーションを登録\r\n    this.animations.set(id, state)\r\n    this.activeAnimationCount.value++\r\n\r\n    // アニメーションクラスを適用\r\n    this.applyAnimationClass(element, type, state.config)\r\n\r\n    return id\r\n  }\r\n\r\n  /**\r\n   * パーティクルエフェクトを生成\r\n   */\r\n  createParticles(\r\n    x: number, \r\n    y: number, \r\n    type: 'success' | 'error' | 'celebration' | 'sparkle' | 'coins',\r\n    count: number = 10\r\n  ): void {\r\n    if (this.performanceConfig.reducedMotion) return\r\n\r\n    const container = this.getOrCreateParticleContainer()\r\n    const particles: HTMLElement[] = []\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const particle = document.createElement('div')\r\n      particle.className = `particle particle-${type}`\r\n      particle.style.position = 'fixed'\r\n      particle.style.left = `${x}px`\r\n      particle.style.top = `${y}px`\r\n      particle.style.pointerEvents = 'none'\r\n      particle.style.zIndex = '9999'\r\n\r\n      // パーティクルのカスタマイズ\r\n      this.customizeParticle(particle, type, i)\r\n\r\n      container.appendChild(particle)\r\n      particles.push(particle)\r\n\r\n      // アニメーション開始\r\n      this.animateParticle(particle, type, i, () => {\r\n        particle.remove()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * シーン遷移アニメーション\r\n   */\r\n  transitionScene(\r\n    fromElement: HTMLElement | null,\r\n    toElement: HTMLElement,\r\n    type: 'fade' | 'slide' | 'zoom' | 'flip' = 'fade',\r\n    direction: 'left' | 'right' | 'up' | 'down' = 'left'\r\n  ): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      if (this.performanceConfig.reducedMotion) {\r\n        if (fromElement) fromElement.style.display = 'none'\r\n        toElement.style.display = 'block'\r\n        resolve()\r\n        return\r\n      }\r\n\r\n      const duration = 400\r\n      const easing = 'cubic-bezier(0.4, 0, 0.2, 1)'\r\n\r\n      // 遷移コンテナを準備\r\n      const container = toElement.parentElement\r\n      if (!container) {\r\n        resolve()\r\n        return\r\n      }\r\n\r\n      container.style.position = 'relative'\r\n      container.style.overflow = 'hidden'\r\n\r\n      // 新しい要素の準備\r\n      toElement.style.position = 'absolute'\r\n      toElement.style.top = '0'\r\n      toElement.style.left = '0'\r\n      toElement.style.width = '100%'\r\n      toElement.style.display = 'block'\r\n\r\n      // アニメーションを適用\r\n      this.applySceneTransition(fromElement, toElement, type, direction, duration, easing)\r\n\r\n      // アニメーション完了後の処理\r\n      setTimeout(() => {\r\n        if (fromElement) {\r\n          fromElement.style.display = 'none'\r\n          fromElement.style.position = ''\r\n          fromElement.style.transform = ''\r\n          fromElement.style.opacity = ''\r\n        }\r\n        toElement.style.position = ''\r\n        toElement.style.transform = ''\r\n        toElement.style.opacity = ''\r\n        container.style.position = ''\r\n        container.style.overflow = ''\r\n        resolve()\r\n      }, duration)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 勝利演出\r\n   */\r\n  playVictoryAnimation(container: HTMLElement): void {\r\n    if (this.performanceConfig.reducedMotion) {\r\n      // 簡略化された勝利表示\r\n      const message = document.createElement('div')\r\n      message.className = 'victory-message-simple'\r\n      message.textContent = '勝利！'\r\n      container.appendChild(message)\r\n      return\r\n    }\r\n\r\n    // 背景エフェクト\r\n    const overlay = document.createElement('div')\r\n    overlay.className = 'victory-overlay'\r\n    container.appendChild(overlay)\r\n\r\n    // 勝利メッセージ\r\n    const message = document.createElement('div')\r\n    message.className = 'victory-message'\r\n    message.innerHTML = `\r\n      <h1 class=\"victory-title\">Victory!</h1>\r\n      <p class=\"victory-subtitle\">素晴らしい戦略でした！</p>\r\n    `\r\n    container.appendChild(message)\r\n\r\n    // パーティクルエフェクト\r\n    const rect = container.getBoundingClientRect()\r\n    const centerX = rect.left + rect.width / 2\r\n    const centerY = rect.top + rect.height / 2\r\n\r\n    // 複数のパーティクルウェーブ\r\n    for (let wave = 0; wave < 3; wave++) {\r\n      setTimeout(() => {\r\n        this.createParticles(centerX, centerY, 'celebration', 20)\r\n      }, wave * 200)\r\n    }\r\n\r\n    // アニメーション適用\r\n    this.animate(overlay, 'fadeIn', { duration: 300 })\r\n    this.animate(message, 'scaleIn', { \r\n      duration: 600, \r\n      delay: 300,\r\n      intensity: 'high'\r\n    })\r\n\r\n    // 自動削除\r\n    setTimeout(() => {\r\n      this.animate(message, 'scaleOut', { \r\n        duration: 300,\r\n        onComplete: () => message.remove()\r\n      })\r\n      this.animate(overlay, 'fadeOut', { \r\n        duration: 300,\r\n        onComplete: () => overlay.remove()\r\n      })\r\n    }, 3000)\r\n  }\r\n\r\n  /**\r\n   * 敗北演出\r\n   */\r\n  playDefeatAnimation(container: HTMLElement): void {\r\n    if (this.performanceConfig.reducedMotion) {\r\n      const message = document.createElement('div')\r\n      message.className = 'defeat-message-simple'\r\n      message.textContent = '敗北...'\r\n      container.appendChild(message)\r\n      return\r\n    }\r\n\r\n    // 暗転エフェクト\r\n    const overlay = document.createElement('div')\r\n    overlay.className = 'defeat-overlay'\r\n    container.appendChild(overlay)\r\n\r\n    // 敗北メッセージ\r\n    const message = document.createElement('div')\r\n    message.className = 'defeat-message'\r\n    message.innerHTML = `\r\n      <h1 class=\"defeat-title\">Game Over</h1>\r\n      <p class=\"defeat-subtitle\">次回はきっと勝てます！</p>\r\n    `\r\n    container.appendChild(message)\r\n\r\n    // アニメーション適用\r\n    this.animate(overlay, 'fadeIn', { duration: 600, intensity: 'low' })\r\n    this.animate(message, 'slideIn', { \r\n      duration: 800, \r\n      delay: 300,\r\n      direction: 'down'\r\n    })\r\n\r\n    // 自動削除\r\n    setTimeout(() => {\r\n      this.animate(message, 'fadeOut', { \r\n        duration: 300,\r\n        onComplete: () => message.remove()\r\n      })\r\n      this.animate(overlay, 'fadeOut', { \r\n        duration: 300,\r\n        onComplete: () => overlay.remove()\r\n      })\r\n    }, 3000)\r\n  }\r\n\r\n  /**\r\n   * カード操作時のエフェクト\r\n   */\r\n  playCardEffect(card: HTMLElement, effect: 'play' | 'draw' | 'discard' | 'power'): void {\r\n    if (this.performanceConfig.reducedMotion) return\r\n\r\n    const rect = card.getBoundingClientRect()\r\n    const x = rect.left + rect.width / 2\r\n    const y = rect.top + rect.height / 2\r\n\r\n    switch (effect) {\r\n      case 'play':\r\n        this.animate(card, 'pulse', { duration: 300, intensity: 'normal' })\r\n        this.createParticles(x, y, 'sparkle', 5)\r\n        break\r\n      case 'draw':\r\n        this.animate(card, 'slideIn', { duration: 400, direction: 'up' })\r\n        break\r\n      case 'discard':\r\n        this.animate(card, 'fadeOut', { duration: 300 })\r\n        this.createParticles(x, y, 'error', 3)\r\n        break\r\n      case 'power':\r\n        this.animate(card, 'glow', { duration: 600, loop: true })\r\n        this.createParticles(x, y, 'sparkle', 8)\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * アニメーション速度を設定\r\n   */\r\n  setAnimationSpeed(speed: number): void {\r\n    this.animationSpeed.value = Math.max(0.1, Math.min(2, speed))\r\n    document.documentElement.style.setProperty('--animation-speed-multiplier', speed.toString())\r\n  }\r\n\r\n  /**\r\n   * すべてのアニメーションを一時停止\r\n   */\r\n  pauseAll(): void {\r\n    this.isPaused.value = true\r\n    this.animations.forEach(animation => {\r\n      if (animation.element) {\r\n        animation.element.style.animationPlayState = 'paused'\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * すべてのアニメーションを再開\r\n   */\r\n  resumeAll(): void {\r\n    this.isPaused.value = false\r\n    this.animations.forEach(animation => {\r\n      if (animation.element) {\r\n        animation.element.style.animationPlayState = 'running'\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 特定のアニメーションを停止\r\n   */\r\n  stop(animationId: string): void {\r\n    const animation = this.animations.get(animationId)\r\n    if (animation) {\r\n      this.cleanupAnimation(animation)\r\n      this.animations.delete(animationId)\r\n      this.activeAnimationCount.value--\r\n    }\r\n  }\r\n\r\n  /**\r\n   * すべてのアニメーションを停止\r\n   */\r\n  stopAll(): void {\r\n    this.animations.forEach(animation => {\r\n      this.cleanupAnimation(animation)\r\n    })\r\n    this.animations.clear()\r\n    this.activeAnimationCount.value = 0\r\n  }\r\n\r\n  /**\r\n   * リソースのクリーンアップ\r\n   */\r\n  destroy(): void {\r\n    this.stopAll()\r\n    if (this.animationFrame) {\r\n      cancelAnimationFrame(this.animationFrame)\r\n    }\r\n    \r\n    // パーティクルコンテナを削除\r\n    const container = document.getElementById('particle-container')\r\n    if (container) {\r\n      container.remove()\r\n    }\r\n  }\r\n\r\n  // === プライベートメソッド ===\r\n\r\n  private generateAnimationId(): string {\r\n    return `anim-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n  }\r\n\r\n  private startAnimationLoop(): void {\r\n    const loop = () => {\r\n      if (!this.isPaused.value) {\r\n        this.updateAnimations()\r\n      }\r\n      this.animationFrame = requestAnimationFrame(loop)\r\n    }\r\n    loop()\r\n  }\r\n\r\n  private updateAnimations(): void {\r\n    const now = performance.now()\r\n    const completedAnimations: string[] = []\r\n\r\n    this.animations.forEach((animation, id) => {\r\n      if (!animation.isRunning) return\r\n\r\n      const elapsed = now - animation.startTime\r\n      const duration = (animation.config.duration || 300) / this.animationSpeed.value\r\n\r\n      if (elapsed >= duration) {\r\n        completedAnimations.push(id)\r\n        animation.config.onComplete?.()\r\n      }\r\n    })\r\n\r\n    // 完了したアニメーションを削除\r\n    completedAnimations.forEach(id => {\r\n      const animation = this.animations.get(id)\r\n      if (animation) {\r\n        this.cleanupAnimation(animation)\r\n        this.animations.delete(id)\r\n        this.activeAnimationCount.value--\r\n      }\r\n    })\r\n  }\r\n\r\n  private applyAnimationClass(element: HTMLElement, type: AnimationType, config: AnimationConfig): void {\r\n    const duration = (config.duration || 300) / this.animationSpeed.value\r\n    const delay = config.delay || 0\r\n    const easing = config.easing || 'cubic-bezier(0.4, 0, 0.2, 1)'\r\n\r\n    // 既存のアニメーションクラスを削除\r\n    element.classList.remove(...Array.from(element.classList).filter(c => c.startsWith('anim-')))\r\n\r\n    // 新しいアニメーションクラスを追加\r\n    const animClass = `anim-${type}-${config.intensity || 'normal'}`\r\n    element.classList.add(animClass)\r\n\r\n    // アニメーションスタイルを設定\r\n    element.style.animationDuration = `${duration}ms`\r\n    element.style.animationDelay = `${delay}ms`\r\n    element.style.animationTimingFunction = easing\r\n    element.style.animationFillMode = 'both'\r\n\r\n    if (config.loop) {\r\n      element.style.animationIterationCount = 'infinite'\r\n    }\r\n  }\r\n\r\n  private applyReducedMotionAnimation(element: HTMLElement, type: AnimationType, config: AnimationConfig): void {\r\n    // モーション削減時は最終状態に即座に遷移\r\n    switch (type) {\r\n      case 'fadeIn':\r\n        element.style.opacity = '1'\r\n        break\r\n      case 'fadeOut':\r\n        element.style.opacity = '0'\r\n        break\r\n      case 'scaleIn':\r\n        element.style.transform = 'scale(1)'\r\n        break\r\n      case 'scaleOut':\r\n        element.style.transform = 'scale(0)'\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  private cleanupAnimation(animation: AnimationState): void {\r\n    if (animation.element) {\r\n      // willChangeを削除\r\n      animation.element.style.willChange = ''\r\n      \r\n      // アニメーション関連のスタイルをリセット\r\n      animation.element.style.animationDuration = ''\r\n      animation.element.style.animationDelay = ''\r\n      animation.element.style.animationTimingFunction = ''\r\n      animation.element.style.animationFillMode = ''\r\n      animation.element.style.animationIterationCount = ''\r\n      \r\n      // アニメーションクラスを削除\r\n      const animClasses = Array.from(animation.element.classList).filter(c => c.startsWith('anim-'))\r\n      animation.element.classList.remove(...animClasses)\r\n    }\r\n  }\r\n\r\n  private getOrCreateParticleContainer(): HTMLElement {\r\n    let container = document.getElementById('particle-container')\r\n    if (!container) {\r\n      container = document.createElement('div')\r\n      container.id = 'particle-container'\r\n      container.style.position = 'fixed'\r\n      container.style.top = '0'\r\n      container.style.left = '0'\r\n      container.style.width = '100%'\r\n      container.style.height = '100%'\r\n      container.style.pointerEvents = 'none'\r\n      container.style.zIndex = '9999'\r\n      document.body.appendChild(container)\r\n    }\r\n    return container\r\n  }\r\n\r\n  private customizeParticle(particle: HTMLElement, type: string, index: number): void {\r\n    const size = 8 + Math.random() * 8\r\n    const hue = this.getParticleHue(type)\r\n    \r\n    particle.style.width = `${size}px`\r\n    particle.style.height = `${size}px`\r\n    particle.style.backgroundColor = `hsl(${hue}, 70%, 60%)`\r\n    particle.style.borderRadius = '50%'\r\n    particle.style.opacity = '1'\r\n\r\n    // タイプ別のカスタマイズ\r\n    switch (type) {\r\n      case 'celebration':\r\n        particle.style.backgroundColor = `hsl(${Math.random() * 360}, 80%, 60%)`\r\n        particle.style.boxShadow = `0 0 ${size}px hsla(${hue}, 80%, 60%, 0.5)`\r\n        break\r\n      case 'sparkle':\r\n        particle.style.borderRadius = '0'\r\n        particle.style.transform = `rotate(${Math.random() * 360}deg)`\r\n        particle.innerHTML = '✦'\r\n        particle.style.fontSize = `${size}px`\r\n        particle.style.backgroundColor = 'transparent'\r\n        particle.style.color = `hsl(${hue}, 80%, 70%)`\r\n        break\r\n      case 'coins':\r\n        particle.innerHTML = '💰'\r\n        particle.style.fontSize = `${size * 2}px`\r\n        particle.style.backgroundColor = 'transparent'\r\n        break\r\n    }\r\n  }\r\n\r\n  private getParticleHue(type: string): number {\r\n    switch (type) {\r\n      case 'success': return 120 // 緑\r\n      case 'error': return 0 // 赤\r\n      case 'celebration': return 45 // 金\r\n      case 'sparkle': return 260 // 紫\r\n      case 'coins': return 45 // 金\r\n      default: return 200 // 青\r\n    }\r\n  }\r\n\r\n  private animateParticle(particle: HTMLElement, type: string, index: number, onComplete: () => void): void {\r\n    const angle = (Math.PI * 2 * index) / 10 + Math.random() * 0.5\r\n    const velocity = 100 + Math.random() * 100\r\n    const duration = 1000 + Math.random() * 500\r\n    const startTime = performance.now()\r\n\r\n    const animate = () => {\r\n      const elapsed = performance.now() - startTime\r\n      const progress = elapsed / duration\r\n\r\n      if (progress >= 1) {\r\n        onComplete()\r\n        return\r\n      }\r\n\r\n      const distance = velocity * progress\r\n      const x = Math.cos(angle) * distance\r\n      const y = Math.sin(angle) * distance - (progress * progress * 200) // 重力効果\r\n\r\n      particle.style.transform = `translate(${x}px, ${y}px) scale(${1 - progress * 0.5})`\r\n      particle.style.opacity = `${1 - progress}`\r\n\r\n      requestAnimationFrame(animate)\r\n    }\r\n\r\n    animate()\r\n  }\r\n\r\n  private applySceneTransition(\r\n    fromElement: HTMLElement | null,\r\n    toElement: HTMLElement,\r\n    type: string,\r\n    direction: string,\r\n    duration: number,\r\n    easing: string\r\n  ): void {\r\n    const transforms = {\r\n      slide: {\r\n        left: { from: 'translateX(100%)', to: 'translateX(-100%)' },\r\n        right: { from: 'translateX(-100%)', to: 'translateX(100%)' },\r\n        up: { from: 'translateY(100%)', to: 'translateY(-100%)' },\r\n        down: { from: 'translateY(-100%)', to: 'translateY(100%)' }\r\n      },\r\n      zoom: {\r\n        from: 'scale(0.8)',\r\n        to: 'scale(1.2)'\r\n      }\r\n    }\r\n\r\n    toElement.style.transition = `all ${duration}ms ${easing}`\r\n    if (fromElement) {\r\n      fromElement.style.transition = `all ${duration}ms ${easing}`\r\n    }\r\n\r\n    // 初期状態を設定\r\n    if (type === 'fade') {\r\n      toElement.style.opacity = '0'\r\n    } else if (type === 'slide') {\r\n      toElement.style.transform = transforms.slide[direction as keyof typeof transforms.slide].from\r\n    } else if (type === 'zoom') {\r\n      toElement.style.transform = transforms.zoom.from\r\n      toElement.style.opacity = '0'\r\n    }\r\n\r\n    // アニメーション開始\r\n    requestAnimationFrame(() => {\r\n      if (type === 'fade') {\r\n        toElement.style.opacity = '1'\r\n        if (fromElement) fromElement.style.opacity = '0'\r\n      } else if (type === 'slide') {\r\n        toElement.style.transform = 'translateX(0) translateY(0)'\r\n        if (fromElement) {\r\n          fromElement.style.transform = transforms.slide[direction as keyof typeof transforms.slide].to\r\n        }\r\n      } else if (type === 'zoom') {\r\n        toElement.style.transform = 'scale(1)'\r\n        toElement.style.opacity = '1'\r\n        if (fromElement) {\r\n          fromElement.style.transform = transforms.zoom.to\r\n          fromElement.style.opacity = '0'\r\n        }\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// シングルトンインスタンス\r\nlet animationManagerInstance: UnifiedAnimationManager | null = null\r\n\r\nexport function getUnifiedAnimationManager(): UnifiedAnimationManager {\r\n  if (!animationManagerInstance) {\r\n    animationManagerInstance = new UnifiedAnimationManager()\r\n  }\r\n  return animationManagerInstance\r\n}","import Phaser from 'phaser'\r\n\r\n/**\r\n * モバイル対応を含むPhaserゲームの基本設定\r\n */\r\nexport const gameConfig: Phaser.Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  parent: 'game-container',\r\n  backgroundColor: '#f5f5f5',\r\n  scale: {\r\n    mode: Phaser.Scale.RESIZE, // モバイル対応のためRESIZEモードに変更\r\n    autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    min: {\r\n      width: 320,\r\n      height: 480\r\n    },\r\n    max: {\r\n      width: 1920,\r\n      height: 1080\r\n    }\r\n  },\r\n  physics: {\r\n    default: 'arcade',\r\n    arcade: {\r\n      gravity: { y: 0 },\r\n      debug: false\r\n    }\r\n  },\r\n  // モバイル最適化\r\n  render: {\r\n    pixelArt: false,\r\n    antialias: true,\r\n    powerPreference: 'high-performance', // ハードウェアアクセラレーション\r\n    transparent: false,\r\n    preserveDrawingBuffer: false, // メモリ節約\r\n    failIfMajorPerformanceCaveat: false\r\n  },\r\n  // タッチ入力設定\r\n  input: {\r\n    touch: {\r\n      target: null,\r\n      capture: false\r\n    },\r\n    activePointers: 2, // マルチタッチ対応（ピンチズーム用）\r\n    smoothFactor: 0 // タッチ入力の即時反映\r\n  },\r\n  // オーディオ設定（モバイル対応）\r\n  audio: {\r\n    disableWebAudio: false,\r\n    noAudio: false\r\n  },\r\n  // パフォーマンス設定\r\n  fps: {\r\n    target: 60,\r\n    min: 30,\r\n    smoothStep: true\r\n  },\r\n  scene: [] // シーンは後で追加\r\n}\r\n\r\n/**\r\n * ゲーム定数\r\n */\r\nexport const GAME_CONSTANTS = {\r\n  // カード関連\r\n  CARD_WIDTH: 120,\r\n  CARD_HEIGHT: 180,\r\n  CARD_SCALE: 1,\r\n  CARD_HOVER_SCALE: 1.1,\r\n  CARD_SPACING: 20,\r\n  \r\n  // アニメーション時間（ミリ秒）\r\n  CARD_FLIP_DURATION: 300,\r\n  CARD_MOVE_DURATION: 200,\r\n  CARD_DRAW_DURATION: 400,\r\n  \r\n  // レイアウト\r\n  HAND_Y_POSITION: 550,\r\n  CHALLENGE_Y_POSITION: 200,\r\n  DECK_X_POSITION: 100,\r\n  DECK_Y_POSITION: 550,\r\n  DISCARD_X_POSITION: 1180,\r\n  DISCARD_Y_POSITION: 550,\r\n  \r\n  // ゲームプレイ\r\n  MAX_HAND_SIZE: 7,\r\n  INITIAL_DRAW: 5,\r\n  TURN_DRAW: 1,\r\n  \r\n  // ステージ設定\r\n  STAGE_TURNS: {\r\n    youth: 10,      // 青年期: 10ターン\r\n    middle: 15,     // 中年期: 15ターン\r\n    fulfillment: 20 // 充実期: 20ターン\r\n  },\r\n  \r\n  // 勝利条件\r\n  VICTORY_VITALITY: 30,  // 活力30以上でクリア\r\n  \r\n  // ドラッグ&ドロップ\r\n  DRAG_DROP: {\r\n    SNAP_DISTANCE: 100,           // スナップが発動する距離（px）\r\n    DRAG_ALPHA: 0.8,              // ドラッグ中の透明度\r\n    DRAG_SCALE: 1.15,             // ドラッグ中の拡大率\r\n    DROP_ZONE_SCALE: 1.2,         // ドロップゾーンハイライト時の拡大率\r\n    SNAP_DURATION: 200,           // スナップアニメーション時間（ms）\r\n    BOUNCE_DURATION: 400,         // バウンス効果時間（ms）\r\n    VIBRATION_DURATION: 150,      // 振動効果時間（ms）\r\n    MOBILE_TOUCH_OFFSET: 60,      // モバイルでの指オフセット（px）\r\n    GLOW_PULSE_DURATION: 1000,    // グロウパルス周期（ms）\r\n  },\r\n  \r\n  // カラー\r\n  COLORS: {\r\n    LIFE_CARD: 0x4C6EF5,\r\n    INSURANCE_CARD: 0x51CF66,\r\n    PITFALL_CARD: 0xFF6B6B,\r\n    HIGHLIGHT: 0xFFD43B,\r\n    SELECTED: 0x748FFC,\r\n    DROP_ZONE_VALID: 0x51CF66,    // 有効ドロップゾーン\r\n    DROP_ZONE_INVALID: 0xFF6B6B,  // 無効ドロップゾーン\r\n    DROP_ZONE_HOVER: 0xFFD43B,    // ホバー中ドロップゾーン\r\n    DRAG_SHADOW: 0x000000,        // ドラッグ時シャドウ\r\n    MAGNETIC_GLOW: 0x00FFFF,      // マグネット効果グロウ\r\n  }\r\n}","import type {\r\n  TutorialStep,\r\n  TutorialProgress,\r\n  TutorialConfig,\r\n  TutorialEvent,\r\n  TutorialEventData,\r\n  TutorialState,\r\n  TutorialManagerOptions,\r\n  HighlightOptions\r\n} from '@/domain/types/tutorial.types'\r\nimport { TUTORIAL_STORAGE_KEYS } from '@/domain/types/tutorial.types'\r\n\r\n/**\r\n * チュートリアルシステムの中核管理クラス\r\n * ステップ進行、ハイライト、進捗保存を統括管理\r\n */\r\nexport class TutorialManager extends Phaser.Events.EventEmitter {\r\n  private currentConfig: TutorialConfig | null = null\r\n  private progress: TutorialProgress | null = null\r\n  private state: TutorialState = 'idle'\r\n  private options: TutorialManagerOptions\r\n  private scene: Phaser.Scene\r\n  private highlightGraphics: Phaser.GameObjects.Graphics | null = null\r\n  private overlayGraphics: Phaser.GameObjects.Graphics | null = null\r\n  private tutorialUI: Phaser.GameObjects.Container | null = null\r\n  private stepChangeTimeout: NodeJS.Timeout | null = null\r\n  private highlightTween: Phaser.Tweens.Tween | null = null\r\n\r\n  constructor(scene: Phaser.Scene, options: TutorialManagerOptions = {}) {\r\n    super()\r\n    this.scene = scene\r\n    this.options = {\r\n      autoSaveProgress: true,\r\n      debugMode: false,\r\n      stepChangeDelay: 300,\r\n      defaultHighlightOptions: {\r\n        color: '#FFD700',\r\n        opacity: 0.3,\r\n        borderWidth: 3,\r\n        borderColor: '#FFA500',\r\n        glowEffect: true,\r\n        animationType: 'pulse',\r\n        duration: 1000\r\n      },\r\n      defaultOverlayOptions: {\r\n        backgroundColor: '#000000',\r\n        opacity: 0.7,\r\n        blurBackground: false,\r\n        allowClickThrough: false\r\n      },\r\n      ...options\r\n    }\r\n\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  /**\r\n   * イベントリスナーの設定\r\n   */\r\n  private setupEventListeners(): void {\r\n    // シーンの破棄時にクリーンアップ\r\n    this.scene.events.once('destroy', () => {\r\n      this.cleanup()\r\n    })\r\n\r\n    // 画面リサイズ時にUIを更新\r\n    this.scene.scale.on('resize', () => {\r\n      if (this.state === 'running') {\r\n        this.updateUILayout()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チュートリアルを開始\r\n   */\r\n  public async startTutorial(config: TutorialConfig): Promise<void> {\r\n    if (this.state === 'running') {\r\n      this.log('Tutorial is already running')\r\n      return\r\n    }\r\n\r\n    try {\r\n      this.currentConfig = config\r\n      this.progress = this.loadProgress(config.id) || this.createInitialProgress()\r\n      this.state = 'running'\r\n\r\n      this.log(`Starting tutorial: ${config.name}`)\r\n      this.emitEvent('tutorial:started', {\r\n        tutorialId: config.id,\r\n        progress: this.progress\r\n      })\r\n\r\n      // オーバーレイを作成\r\n      this.createOverlay()\r\n\r\n      // 最初のステップまたは中断されたステップから開始\r\n      await this.goToStep(this.progress.currentStepIndex)\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to start tutorial', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 次のステップに進む\r\n   */\r\n  public async nextStep(): Promise<void> {\r\n    if (this.state !== 'running' || !this.currentConfig || !this.progress) {\r\n      return\r\n    }\r\n\r\n    const currentStep = this.getCurrentStep()\r\n    if (!currentStep) return\r\n\r\n    try {\r\n      // 現在のステップを完了としてマーク\r\n      await this.completeCurrentStep()\r\n\r\n      // 次のステップがある場合は進む\r\n      if (this.progress.currentStepIndex < this.currentConfig.steps.length - 1) {\r\n        await this.goToStep(this.progress.currentStepIndex + 1)\r\n      } else {\r\n        // チュートリアル完了\r\n        await this.completeTutorial()\r\n      }\r\n    } catch (error) {\r\n      this.handleError('Failed to go to next step', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 前のステップに戻る\r\n   */\r\n  public async previousStep(): Promise<void> {\r\n    if (this.state !== 'running' || !this.progress) {\r\n      return\r\n    }\r\n\r\n    if (this.progress.currentStepIndex > 0) {\r\n      await this.goToStep(this.progress.currentStepIndex - 1)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 指定されたステップに移動\r\n   */\r\n  public async goToStep(stepIndex: number): Promise<void> {\r\n    if (!this.currentConfig || !this.progress || stepIndex < 0 || stepIndex >= this.currentConfig.steps.length) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      // 現在のステップの終了処理\r\n      if (this.progress.currentStepIndex !== stepIndex) {\r\n        await this.exitCurrentStep()\r\n      }\r\n\r\n      // 新しいステップに移動\r\n      this.progress.currentStepIndex = stepIndex\r\n      const step = this.currentConfig.steps[stepIndex]\r\n\r\n      this.log(`Going to step ${stepIndex}: ${step.title}`)\r\n\r\n      // ステップのスキップ条件をチェック\r\n      if (step.skipCondition?.()) {\r\n        await this.skipCurrentStep()\r\n        return\r\n      }\r\n\r\n      // ステップに入る\r\n      await this.enterStep(step)\r\n\r\n      // 進捗を保存\r\n      if (this.options.autoSaveProgress) {\r\n        this.saveProgress()\r\n      }\r\n\r\n    } catch (error) {\r\n      this.handleError(`Failed to go to step ${stepIndex}`, error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルをスキップ\r\n   */\r\n  public async skipTutorial(): Promise<void> {\r\n    if (this.state !== 'running' || !this.currentConfig) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      this.log('Skipping tutorial')\r\n      this.state = 'skipped'\r\n\r\n      this.emitEvent('tutorial:skipped', {\r\n        tutorialId: this.currentConfig.id,\r\n        progress: this.progress\r\n      })\r\n\r\n      await this.cleanup()\r\n    } catch (error) {\r\n      this.handleError('Failed to skip tutorial', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 現在のステップをスキップ\r\n   */\r\n  public async skipCurrentStep(): Promise<void> {\r\n    if (this.state !== 'running' || !this.currentConfig || !this.progress) {\r\n      return\r\n    }\r\n\r\n    const currentStep = this.getCurrentStep()\r\n    if (!currentStep) return\r\n\r\n    try {\r\n      this.log(`Skipping step: ${currentStep.title}`)\r\n      \r\n      // スキップしたステップとして記録\r\n      this.progress.skippedSteps.push(currentStep.id)\r\n\r\n      this.emitEvent('tutorial:step:skipped', {\r\n        tutorialId: this.currentConfig.id,\r\n        stepId: currentStep.id,\r\n        stepIndex: this.progress.currentStepIndex\r\n      })\r\n\r\n      // 次のステップに進む\r\n      await this.nextStep()\r\n    } catch (error) {\r\n      this.handleError('Failed to skip current step', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 要素をハイライト\r\n   */\r\n  public highlightElement(\r\n    elementName: string, \r\n    options: HighlightOptions = {}\r\n  ): void {\r\n    try {\r\n      // 既存のハイライトをクリア\r\n      this.clearHighlight()\r\n\r\n      // ターゲット要素を取得\r\n      const element = this.scene.children.getByName(elementName)\r\n      if (!element) {\r\n        this.log(`Element not found: ${elementName}`)\r\n        return\r\n      }\r\n\r\n      // ハイライトオプションをマージ\r\n      const highlightOptions = {\r\n        ...this.options.defaultHighlightOptions,\r\n        ...options\r\n      }\r\n\r\n      // ハイライトグラフィックスを作成\r\n      this.createHighlight(element as Phaser.GameObjects.GameObject, highlightOptions)\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to highlight element', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ハイライトをクリア\r\n   */\r\n  public clearHighlight(): void {\r\n    if (this.highlightGraphics) {\r\n      this.highlightGraphics.destroy()\r\n      this.highlightGraphics = null\r\n    }\r\n\r\n    if (this.highlightTween) {\r\n      this.highlightTween.destroy()\r\n      this.highlightTween = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 進捗を保存\r\n   */\r\n  public saveProgress(): void {\r\n    if (!this.currentConfig || !this.progress) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${this.currentConfig.id}`\r\n      localStorage.setItem(storageKey, JSON.stringify(this.progress))\r\n      this.log('Progress saved')\r\n    } catch (error) {\r\n      this.handleError('Failed to save progress', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 進捗を読み込み\r\n   */\r\n  public loadProgress(tutorialId: string): TutorialProgress | null {\r\n    try {\r\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${tutorialId}`\r\n      const saved = localStorage.getItem(storageKey)\r\n      if (saved) {\r\n        const progress = JSON.parse(saved) as TutorialProgress\r\n        this.log('Progress loaded')\r\n        return progress\r\n      }\r\n    } catch (error) {\r\n      this.handleError('Failed to load progress', error as Error)\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 進捗をクリア\r\n   */\r\n  public clearProgress(tutorialId: string): void {\r\n    try {\r\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${tutorialId}`\r\n      localStorage.removeItem(storageKey)\r\n      this.log('Progress cleared')\r\n    } catch (error) {\r\n      this.handleError('Failed to clear progress', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルが完了済みかチェック\r\n   */\r\n  public isCompleted(tutorialId: string): boolean {\r\n    try {\r\n      const completedTutorials = this.getCompletedTutorials()\r\n      return completedTutorials.includes(tutorialId)\r\n    } catch (error) {\r\n      this.handleError('Failed to check completion status', error as Error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 現在の状態を取得\r\n   */\r\n  public getState(): TutorialState {\r\n    return this.state\r\n  }\r\n\r\n  /**\r\n   * 現在のステップを取得\r\n   */\r\n  public getCurrentStep(): TutorialStep | null {\r\n    if (!this.currentConfig || !this.progress) {\r\n      return null\r\n    }\r\n    return this.currentConfig.steps[this.progress.currentStepIndex] || null\r\n  }\r\n\r\n  /**\r\n   * 進捗状況を取得\r\n   */\r\n  public getProgress(): TutorialProgress | null {\r\n    return this.progress\r\n  }\r\n\r\n  // ===================\r\n  // Private Methods\r\n  // ===================\r\n\r\n  /**\r\n   * ステップに入る\r\n   */\r\n  private async enterStep(step: TutorialStep): Promise<void> {\r\n    try {\r\n      this.log(`Entering step: ${step.title}`)\r\n\r\n      // ステップ開始時の処理\r\n      if (step.onEnter) {\r\n        step.onEnter()\r\n      }\r\n\r\n      // イベント発火\r\n      this.emitEvent('tutorial:step:enter', {\r\n        tutorialId: this.currentConfig!.id,\r\n        stepId: step.id,\r\n        stepIndex: this.progress!.currentStepIndex,\r\n        totalSteps: this.currentConfig!.steps.length\r\n      })\r\n\r\n      // UI更新\r\n      this.updateTutorialUI(step)\r\n\r\n      // 要素ハイライト\r\n      if (step.targetElement) {\r\n        this.highlightElement(step.targetElement, step.highlightOptions)\r\n      }\r\n\r\n      // 自動進行の場合\r\n      if (step.action === 'auto' && step.waitTime) {\r\n        this.stepChangeTimeout = setTimeout(() => {\r\n          this.nextStep()\r\n        }, step.waitTime)\r\n      }\r\n\r\n      // ゲームアクション待機の場合\r\n      if (step.action === 'wait_for_game_action' && step.gameAction) {\r\n        this.startGameActionValidation(step)\r\n      }\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to enter step', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 現在のステップから退出\r\n   */\r\n  private async exitCurrentStep(): Promise<void> {\r\n    const currentStep = this.getCurrentStep()\r\n    if (!currentStep) return\r\n\r\n    try {\r\n      this.log(`Exiting step: ${currentStep.title}`)\r\n\r\n      // タイムアウトをクリア\r\n      if (this.stepChangeTimeout) {\r\n        clearTimeout(this.stepChangeTimeout)\r\n        this.stepChangeTimeout = null\r\n      }\r\n\r\n      // ゲームアクション検証をクリーンアップ\r\n      const interval = this.scene.data.get('_tutorialValidationInterval')\r\n      const timeout = this.scene.data.get('_tutorialValidationTimeout')\r\n      if (interval) {\r\n        clearInterval(interval)\r\n        this.scene.data.remove('_tutorialValidationInterval')\r\n      }\r\n      if (timeout) {\r\n        clearTimeout(timeout)\r\n        this.scene.data.remove('_tutorialValidationTimeout')\r\n      }\r\n\r\n      // ハイライトをクリア\r\n      this.clearHighlight()\r\n\r\n      // ステップ終了時の処理\r\n      if (currentStep.onExit) {\r\n        currentStep.onExit()\r\n      }\r\n\r\n      // イベント発火\r\n      this.emitEvent('tutorial:step:exit', {\r\n        tutorialId: this.currentConfig!.id,\r\n        stepId: currentStep.id,\r\n        stepIndex: this.progress!.currentStepIndex\r\n      })\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to exit current step', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 現在のステップを完了\r\n   */\r\n  private async completeCurrentStep(): Promise<void> {\r\n    const currentStep = this.getCurrentStep()\r\n    if (!currentStep || !this.progress) return\r\n\r\n    try {\r\n      this.log(`Completing step: ${currentStep.title}`)\r\n\r\n      // 完了したステップとして記録\r\n      if (!this.progress.completedSteps.includes(currentStep.id)) {\r\n        this.progress.completedSteps.push(currentStep.id)\r\n      }\r\n\r\n      this.emitEvent('tutorial:step:completed', {\r\n        tutorialId: this.currentConfig!.id,\r\n        stepId: currentStep.id,\r\n        stepIndex: this.progress.currentStepIndex\r\n      })\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to complete current step', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ゲームアクションの検証を開始\r\n   */\r\n  private startGameActionValidation(step: TutorialStep): void {\r\n    if (!step.gameAction) return\r\n\r\n    const { type, validation, timeout = 30000 } = step.gameAction\r\n    \r\n    this.log(`Starting game action validation: ${type}`)\r\n    \r\n    // ゲーム状態の監視を開始\r\n    const checkInterval = setInterval(() => {\r\n      try {\r\n        // ゲーム状態を取得（GameSceneから）\r\n        const gameState = (window as Window & { __gameState?: Record<string, unknown> }).__gameState || this.scene.data.get('gameState')\r\n        \r\n        if (!gameState) {\r\n          this.logDebug('Game state not available yet')\r\n          return\r\n        }\r\n        \r\n        // 検証実行\r\n        if (validation(gameState)) {\r\n          this.log(`Game action validated: ${type}`)\r\n          clearInterval(checkInterval)\r\n          clearTimeout(timeoutId)\r\n          \r\n          // クリーンアップ\r\n          this.scene.data.remove('_tutorialValidationInterval')\r\n          this.scene.data.remove('_tutorialValidationTimeout')\r\n          \r\n          // 自動的に次のステップへ\r\n          this.nextStep()\r\n        }\r\n      } catch (error) {\r\n        this.handleError('Error during game action validation', error as Error)\r\n      }\r\n    }, 250) // 250msごとにチェック\r\n    \r\n    // タイムアウト処理\r\n    const timeoutId = setTimeout(() => {\r\n      clearInterval(checkInterval)\r\n      this.log(`Game action validation timeout: ${type}`)\r\n      \r\n      // クリーンアップ\r\n      this.scene.data.remove('_tutorialValidationInterval')\r\n      this.scene.data.remove('_tutorialValidationTimeout')\r\n      \r\n      // タイムアウト時は手動で進められるようにする\r\n      this.emit('tutorial:action:timeout', { step, actionType: type })\r\n    }, timeout)\r\n    \r\n    // クリーンアップ用に保存\r\n    this.scene.data.set('_tutorialValidationInterval', checkInterval)\r\n    this.scene.data.set('_tutorialValidationTimeout', timeoutId)\r\n  }\r\n\r\n  /**\r\n   * チュートリアル完了\r\n   */\r\n  private async completeTutorial(): Promise<void> {\r\n    if (!this.currentConfig || !this.progress) return\r\n\r\n    try {\r\n      this.log('Completing tutorial')\r\n      \r\n      this.progress.isCompleted = true\r\n      this.progress.completedAt = new Date()\r\n      this.state = 'completed'\r\n\r\n      // 完了したチュートリアルリストに追加\r\n      this.markAsCompleted(this.currentConfig.id)\r\n\r\n      this.emitEvent('tutorial:completed', {\r\n        tutorialId: this.currentConfig.id,\r\n        progress: this.progress\r\n      })\r\n\r\n      // 進捗保存\r\n      if (this.options.autoSaveProgress) {\r\n        this.saveProgress()\r\n      }\r\n\r\n      // クリーンアップ\r\n      await this.cleanup()\r\n\r\n    } catch (error) {\r\n      this.handleError('Failed to complete tutorial', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * オーバーレイを作成\r\n   */\r\n  private createOverlay(): void {\r\n    if (!this.currentConfig) return\r\n\r\n    const overlayOptions = {\r\n      ...this.options.defaultOverlayOptions,\r\n      ...this.currentConfig.overlayOptions\r\n    }\r\n\r\n    this.overlayGraphics = this.scene.add.graphics()\r\n    this.overlayGraphics.setDepth(1000)\r\n    \r\n    this.overlayGraphics.fillStyle(\r\n      Phaser.Display.Color.HexStringToColor(overlayOptions.backgroundColor!).color,\r\n      overlayOptions.opacity\r\n    )\r\n    this.overlayGraphics.fillRect(\r\n      0, 0, \r\n      this.scene.cameras.main.width, \r\n      this.scene.cameras.main.height\r\n    )\r\n\r\n    if (!overlayOptions.allowClickThrough) {\r\n      this.overlayGraphics.setInteractive(\r\n        new Phaser.Geom.Rectangle(0, 0, this.scene.cameras.main.width, this.scene.cameras.main.height),\r\n        Phaser.Geom.Rectangle.Contains\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ハイライトを作成\r\n   */\r\n  private createHighlight(element: Phaser.GameObjects.GameObject, options: HighlightOptions): void {\r\n    if (!element.getBounds) return\r\n\r\n    const bounds = element.getBounds()\r\n    this.highlightGraphics = this.scene.add.graphics()\r\n    this.highlightGraphics.setDepth(1001)\r\n\r\n    // ハイライト描画\r\n    if (options.color) {\r\n      this.highlightGraphics.fillStyle(\r\n        Phaser.Display.Color.HexStringToColor(options.color).color,\r\n        options.opacity || 0.3\r\n      )\r\n      this.highlightGraphics.fillRect(bounds.x, bounds.y, bounds.width, bounds.height)\r\n    }\r\n\r\n    // ボーダー描画\r\n    if (options.borderColor && options.borderWidth) {\r\n      this.highlightGraphics.lineStyle(\r\n        options.borderWidth,\r\n        Phaser.Display.Color.HexStringToColor(options.borderColor).color\r\n      )\r\n      this.highlightGraphics.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height)\r\n    }\r\n\r\n    // アニメーション\r\n    if (options.animationType && options.animationType !== 'none') {\r\n      this.createHighlightAnimation(options)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ハイライトアニメーションを作成\r\n   */\r\n  private createHighlightAnimation(options: HighlightOptions): void {\r\n    if (!this.highlightGraphics) return\r\n\r\n    const duration = options.duration || 1000\r\n\r\n    switch (options.animationType) {\r\n      case 'pulse':\r\n        this.highlightTween = this.scene.tweens.add({\r\n          targets: this.highlightGraphics,\r\n          alpha: { from: 1, to: 0.3 },\r\n          duration: duration / 2,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n        break\r\n\r\n      case 'glow':\r\n        this.highlightTween = this.scene.tweens.add({\r\n          targets: this.highlightGraphics,\r\n          scaleX: { from: 1, to: 1.1 },\r\n          scaleY: { from: 1, to: 1.1 },\r\n          alpha: { from: 1, to: 0.7 },\r\n          duration: duration / 2,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルUI更新\r\n   */\r\n  private updateTutorialUI(step: TutorialStep): void {\r\n    // UI実装は別途UIManagerクラスで行う想定\r\n    // ここでは基本的な情報のみ処理\r\n    this.log(`UI Update: ${step.title} - ${step.description}`)\r\n  }\r\n\r\n  /**\r\n   * UIレイアウト更新\r\n   */\r\n  private updateUILayout(): void {\r\n    // レスポンシブ対応の実装\r\n  }\r\n\r\n  /**\r\n   * 初期進捗状況を作成\r\n   */\r\n  private createInitialProgress(): TutorialProgress {\r\n    return {\r\n      currentStepIndex: 0,\r\n      completedSteps: [],\r\n      skippedSteps: [],\r\n      isCompleted: false,\r\n      startedAt: new Date(),\r\n      lastPlayedVersion: this.currentConfig?.version\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 完了したチュートリアルリストを取得\r\n   */\r\n  private getCompletedTutorials(): string[] {\r\n    try {\r\n      const saved = localStorage.getItem(TUTORIAL_STORAGE_KEYS.COMPLETED_TUTORIALS)\r\n      return saved ? JSON.parse(saved) : []\r\n    } catch (error) {\r\n      this.handleError('Failed to get completed tutorials', error as Error)\r\n      return []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルを完了としてマーク\r\n   */\r\n  private markAsCompleted(tutorialId: string): void {\r\n    try {\r\n      const completed = this.getCompletedTutorials()\r\n      if (!completed.includes(tutorialId)) {\r\n        completed.push(tutorialId)\r\n        localStorage.setItem(TUTORIAL_STORAGE_KEYS.COMPLETED_TUTORIALS, JSON.stringify(completed))\r\n      }\r\n    } catch (error) {\r\n      this.handleError('Failed to mark as completed', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * イベント発火\r\n   */\r\n  private emitEvent(event: TutorialEvent, data: TutorialEventData): void {\r\n    this.emit(event, data)\r\n    \r\n    if (this.options.debugMode && import.meta.env.DEV) {\r\n      console.log(`[TutorialManager] ${event}:`, data)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * エラーハンドリング\r\n   */\r\n  private handleError(message: string, error: Error): void {\r\n    this.log(`Error: ${message} - ${error.message}`)\r\n    this.state = 'error'\r\n    \r\n    this.emitEvent('tutorial:error', {\r\n      tutorialId: this.currentConfig?.id || 'unknown',\r\n      error: error.message\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ログ出力\r\n   */\r\n  private log(message: string): void {\r\n    if (this.options.debugMode && import.meta.env.DEV) {\r\n      console.log(`[TutorialManager] ${message}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  private async cleanup(): Promise<void> {\r\n    try {\r\n      // タイムアウトクリア\r\n      if (this.stepChangeTimeout) {\r\n        clearTimeout(this.stepChangeTimeout)\r\n        this.stepChangeTimeout = null\r\n      }\r\n\r\n      // グラフィックス削除\r\n      this.clearHighlight()\r\n      \r\n      if (this.overlayGraphics) {\r\n        this.overlayGraphics.destroy()\r\n        this.overlayGraphics = null\r\n      }\r\n\r\n      if (this.tutorialUI) {\r\n        this.tutorialUI.destroy()\r\n        this.tutorialUI = null\r\n      }\r\n\r\n      // 状態リセット\r\n      this.state = 'idle'\r\n      \r\n    } catch (error) {\r\n      this.handleError('Failed to cleanup', error as Error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 破棄\r\n   */\r\n  public destroy(): void {\r\n    this.cleanup()\r\n    this.removeAllListeners()\r\n  }\r\n}","import type { \r\n  TutorialStep, \r\n  HighlightOptions,\r\n  TutorialProgress\r\n} from '@/domain/types/tutorial.types'\r\n\r\n/**\r\n * チュートリアルのUIオーバーレイコンポーネント\r\n * スポットライト効果、吹き出し、進行制御UIを提供\r\n */\r\nexport class TutorialOverlay {\r\n  private scene: Phaser.Scene\r\n  private container: Phaser.GameObjects.Container\r\n  private overlayGraphics: Phaser.GameObjects.Graphics\r\n  private spotlightMask: Phaser.GameObjects.Graphics\r\n  private speechBubble: Phaser.GameObjects.Container | null = null\r\n  private progressBar: Phaser.GameObjects.Container | null = null\r\n  private controlButtons: Phaser.GameObjects.Container | null = null\r\n  private highlightElements: Map<string, Phaser.GameObjects.Graphics> = new Map()\r\n  private arrows: Phaser.GameObjects.Image[] = []\r\n  private pulseAnimations: Phaser.Tweens.Tween[] = []\r\n  \r\n  // 設定\r\n  private readonly OVERLAY_ALPHA = 0.7\r\n  private readonly SPOTLIGHT_RADIUS = 80\r\n  private readonly SPEECH_BUBBLE_PADDING = 20\r\n  private readonly ANIMATION_DURATION = 800\r\n  private readonly BUTTON_HEIGHT = 48\r\n  private readonly BUTTON_WIDTH = 120\r\n\r\n  constructor(scene: Phaser.Scene) {\r\n    this.scene = scene\r\n    this.container = scene.add.container(0, 0)\r\n    this.container.setDepth(2000) // 最前面に表示\r\n    \r\n    // オーバーレイグラフィックスの初期化\r\n    this.overlayGraphics = scene.add.graphics()\r\n    this.spotlightMask = scene.add.graphics()\r\n    \r\n    this.container.add([this.overlayGraphics, this.spotlightMask])\r\n    \r\n    this.createBaseOverlay()\r\n  }\r\n\r\n  /**\r\n   * ベースオーバーレイの作成（画面全体を暗くする）\r\n   */\r\n  private createBaseOverlay(): void {\r\n    const camera = this.scene.cameras.main\r\n    \r\n    this.overlayGraphics.clear()\r\n    this.overlayGraphics.fillStyle(0x000000, this.OVERLAY_ALPHA)\r\n    this.overlayGraphics.fillRect(0, 0, camera.width, camera.height)\r\n    \r\n    // クリック無効化\r\n    this.overlayGraphics.setInteractive(\r\n      new Phaser.Geom.Rectangle(0, 0, camera.width, camera.height),\r\n      Phaser.Geom.Rectangle.Contains\r\n    )\r\n  }\r\n\r\n  /**\r\n   * スポットライト効果の作成\r\n   */\r\n  public createSpotlight(targetElement: Phaser.GameObjects.GameObject): void {\r\n    if (!targetElement.getBounds) return\r\n\r\n    const bounds = targetElement.getBounds()\r\n    const camera = this.scene.cameras.main\r\n    \r\n    // スポットライト用マスクをクリア\r\n    this.spotlightMask.clear()\r\n    \r\n    // 全体を塗りつぶし\r\n    this.spotlightMask.fillStyle(0x000000, this.OVERLAY_ALPHA)\r\n    this.spotlightMask.fillRect(0, 0, camera.width, camera.height)\r\n    \r\n    // スポットライト部分を切り抜き\r\n    const centerX = bounds.centerX\r\n    const centerY = bounds.centerY\r\n    const radius = Math.max(bounds.width, bounds.height) / 2 + this.SPOTLIGHT_RADIUS\r\n    \r\n    this.spotlightMask.fillStyle(0x000000, 0) // 透明で切り抜き\r\n    this.spotlightMask.fillCircle(centerX, centerY, radius)\r\n    \r\n    // グラデーション効果のためのマスク設定\r\n    this.overlayGraphics.setMask(new Phaser.Display.Masks.GeometryMask(this.scene, this.spotlightMask))\r\n  }\r\n\r\n  /**\r\n   * 吹き出しの作成\r\n   */\r\n  public createSpeechBubble(\r\n    step: TutorialStep, \r\n    targetBounds?: Phaser.Geom.Rectangle\r\n  ): void {\r\n    // 既存の吹き出しを削除\r\n    if (this.speechBubble) {\r\n      this.speechBubble.destroy()\r\n    }\r\n\r\n    const camera = this.scene.cameras.main\r\n    const bubbleMaxWidth = Math.min(400, camera.width - 40)\r\n    \r\n    this.speechBubble = this.scene.add.container(0, 0)\r\n    \r\n    // 背景\r\n    const background = this.scene.add.graphics()\r\n    background.fillStyle(0xffffff, 0.95)\r\n    background.lineStyle(2, 0x333333, 1)\r\n    \r\n    // タイトルテキスト\r\n    const titleText = this.scene.add.text(0, 0, step.title, {\r\n      fontSize: '18px',\r\n      fontFamily: 'Arial, sans-serif',\r\n      color: '#333333',\r\n      fontStyle: 'bold',\r\n      wordWrap: { width: bubbleMaxWidth - this.SPEECH_BUBBLE_PADDING * 2 }\r\n    })\r\n    \r\n    // 説明テキスト\r\n    const descriptionText = this.scene.add.text(0, 0, step.description, {\r\n      fontSize: '14px',\r\n      fontFamily: 'Arial, sans-serif',\r\n      color: '#666666',\r\n      wordWrap: { width: bubbleMaxWidth - this.SPEECH_BUBBLE_PADDING * 2 }\r\n    })\r\n    \r\n    // レイアウト計算\r\n    const titleHeight = titleText.height\r\n    const descriptionHeight = descriptionText.height\r\n    const totalHeight = titleHeight + descriptionHeight + this.SPEECH_BUBBLE_PADDING * 3\r\n    const bubbleWidth = bubbleMaxWidth\r\n    \r\n    // 背景描画\r\n    const radius = 12\r\n    background.fillRoundedRect(\r\n      -bubbleWidth / 2, -totalHeight / 2,\r\n      bubbleWidth, totalHeight,\r\n      radius\r\n    )\r\n    background.strokeRoundedRect(\r\n      -bubbleWidth / 2, -totalHeight / 2,\r\n      bubbleWidth, totalHeight,\r\n      radius\r\n    )\r\n    \r\n    // テキスト配置\r\n    titleText.setPosition(\r\n      -bubbleWidth / 2 + this.SPEECH_BUBBLE_PADDING,\r\n      -totalHeight / 2 + this.SPEECH_BUBBLE_PADDING\r\n    )\r\n    descriptionText.setPosition(\r\n      -bubbleWidth / 2 + this.SPEECH_BUBBLE_PADDING,\r\n      titleText.y + titleHeight + this.SPEECH_BUBBLE_PADDING / 2\r\n    )\r\n    \r\n    this.speechBubble.add([background, titleText, descriptionText])\r\n    \r\n    // 位置決定\r\n    this.positionSpeechBubble(step.position || 'bottom', targetBounds)\r\n    \r\n    // アニメーション\r\n    this.speechBubble.setAlpha(0)\r\n    this.speechBubble.setScale(0.8)\r\n    \r\n    this.scene.tweens.add({\r\n      targets: this.speechBubble,\r\n      alpha: 1,\r\n      scaleX: 1,\r\n      scaleY: 1,\r\n      duration: this.ANIMATION_DURATION / 2,\r\n      ease: 'Back.easeOut'\r\n    })\r\n    \r\n    this.container.add(this.speechBubble)\r\n  }\r\n\r\n  /**\r\n   * 吹き出しの位置調整\r\n   */\r\n  private positionSpeechBubble(\r\n    position: 'top' | 'bottom' | 'left' | 'right' | 'center',\r\n    targetBounds?: Phaser.Geom.Rectangle\r\n  ): void {\r\n    if (!this.speechBubble) return\r\n\r\n    const camera = this.scene.cameras.main\r\n    const bubbleBounds = this.speechBubble.getBounds()\r\n    const margin = 20\r\n    \r\n    let x = camera.centerX\r\n    let y = camera.centerY\r\n    \r\n    if (targetBounds) {\r\n      switch (position) {\r\n        case 'top':\r\n          x = targetBounds.centerX\r\n          y = targetBounds.top - bubbleBounds.height / 2 - margin\r\n          break\r\n        case 'bottom':\r\n          x = targetBounds.centerX\r\n          y = targetBounds.bottom + bubbleBounds.height / 2 + margin\r\n          break\r\n        case 'left':\r\n          x = targetBounds.left - bubbleBounds.width / 2 - margin\r\n          y = targetBounds.centerY\r\n          break\r\n        case 'right':\r\n          x = targetBounds.right + bubbleBounds.width / 2 + margin\r\n          y = targetBounds.centerY\r\n          break\r\n        case 'center':\r\n          x = camera.centerX\r\n          y = camera.centerY\r\n          break\r\n      }\r\n    }\r\n    \r\n    // 画面内に収める\r\n    x = Phaser.Math.Clamp(x, bubbleBounds.width / 2 + margin, camera.width - bubbleBounds.width / 2 - margin)\r\n    y = Phaser.Math.Clamp(y, bubbleBounds.height / 2 + margin, camera.height - bubbleBounds.height / 2 - margin)\r\n    \r\n    this.speechBubble.setPosition(x, y)\r\n  }\r\n\r\n  /**\r\n   * 進捗バーの作成\r\n   */\r\n  public createProgressBar(progress: TutorialProgress, totalSteps: number): void {\r\n    if (this.progressBar) {\r\n      this.progressBar.destroy()\r\n    }\r\n\r\n    const camera = this.scene.cameras.main\r\n    this.progressBar = this.scene.add.container(camera.centerX, 50)\r\n    \r\n    const barWidth = 300\r\n    const barHeight = 8\r\n    const currentStep = progress.currentStepIndex + 1\r\n    \r\n    // 背景バー\r\n    const background = this.scene.add.graphics()\r\n    background.fillStyle(0x333333, 0.3)\r\n    background.fillRoundedRect(-barWidth / 2, -barHeight / 2, barWidth, barHeight, 4)\r\n    \r\n    // 進捗バー\r\n    const progressWidth = (currentStep / totalSteps) * barWidth\r\n    const progressBar = this.scene.add.graphics()\r\n    progressBar.fillStyle(0x4CAF50, 1)\r\n    progressBar.fillRoundedRect(-barWidth / 2, -barHeight / 2, progressWidth, barHeight, 4)\r\n    \r\n    // 進捗テキスト\r\n    const progressText = this.scene.add.text(0, -30, `ステップ ${currentStep} / ${totalSteps}`, {\r\n      fontSize: '14px',\r\n      fontFamily: 'Arial, sans-serif',\r\n      color: '#ffffff',\r\n      stroke: '#000000',\r\n      strokeThickness: 2\r\n    }).setOrigin(0.5)\r\n    \r\n    this.progressBar.add([background, progressBar, progressText])\r\n    this.container.add(this.progressBar)\r\n  }\r\n\r\n  /**\r\n   * 制御ボタンの作成\r\n   */\r\n  public createControlButtons(\r\n    canGoBack: boolean,\r\n    canSkip: boolean,\r\n    onNext: () => void,\r\n    onBack?: () => void,\r\n    onSkip?: () => void\r\n  ): void {\r\n    if (this.controlButtons) {\r\n      this.controlButtons.destroy()\r\n    }\r\n\r\n    const camera = this.scene.cameras.main\r\n    this.controlButtons = this.scene.add.container(camera.centerX, camera.height - 80)\r\n    \r\n    const buttons: Phaser.GameObjects.Container[] = []\r\n    let totalWidth = 0\r\n    \r\n    // 戻るボタン\r\n    if (canGoBack && onBack) {\r\n      const backButton = this.createButton('戻る', '#6c757d', onBack)\r\n      buttons.push(backButton)\r\n      totalWidth += this.BUTTON_WIDTH + 10\r\n    }\r\n    \r\n    // 次へボタン\r\n    const nextButton = this.createButton('次へ', '#007bff', onNext)\r\n    buttons.push(nextButton)\r\n    totalWidth += this.BUTTON_WIDTH + 10\r\n    \r\n    // スキップボタン\r\n    if (canSkip && onSkip) {\r\n      const skipButton = this.createButton('スキップ', '#dc3545', onSkip)\r\n      buttons.push(skipButton)\r\n      totalWidth += this.BUTTON_WIDTH + 10\r\n    }\r\n    \r\n    // ボタン配置\r\n    let currentX = -totalWidth / 2\r\n    buttons.forEach(button => {\r\n      button.setPosition(currentX + this.BUTTON_WIDTH / 2, 0)\r\n      currentX += this.BUTTON_WIDTH + 10\r\n      this.controlButtons!.add(button)\r\n    })\r\n    \r\n    this.container.add(this.controlButtons)\r\n  }\r\n\r\n  /**\r\n   * ボタンの作成\r\n   */\r\n  private createButton(\r\n    text: string,\r\n    color: string,\r\n    onClick: () => void\r\n  ): Phaser.GameObjects.Container {\r\n    const button = this.scene.add.container(0, 0)\r\n    \r\n    // ボタン背景\r\n    const background = this.scene.add.graphics()\r\n    const colorValue = parseInt(color.substring(1), 16)\r\n    background.fillStyle(colorValue, 1)\r\n    background.fillRoundedRect(\r\n      -this.BUTTON_WIDTH / 2, -this.BUTTON_HEIGHT / 2,\r\n      this.BUTTON_WIDTH, this.BUTTON_HEIGHT,\r\n      8\r\n    )\r\n    \r\n    // ホバー効果用の背景\r\n    const hoverBackground = this.scene.add.graphics()\r\n    hoverBackground.fillStyle(colorValue, 0.8)\r\n    hoverBackground.fillRoundedRect(\r\n      -this.BUTTON_WIDTH / 2, -this.BUTTON_HEIGHT / 2,\r\n      this.BUTTON_WIDTH, this.BUTTON_HEIGHT,\r\n      8\r\n    )\r\n    hoverBackground.setVisible(false)\r\n    \r\n    // ボタンテキスト\r\n    const buttonText = this.scene.add.text(0, 0, text, {\r\n      fontSize: '16px',\r\n      fontFamily: 'Arial, sans-serif',\r\n      color: '#ffffff',\r\n      fontStyle: 'bold'\r\n    }).setOrigin(0.5)\r\n    \r\n    button.add([background, hoverBackground, buttonText])\r\n    \r\n    // インタラクティブ設定\r\n    button.setSize(this.BUTTON_WIDTH, this.BUTTON_HEIGHT)\r\n    button.setInteractive()\r\n    \r\n    // イベント設定\r\n    button.on('pointerover', () => {\r\n      background.setVisible(false)\r\n      hoverBackground.setVisible(true)\r\n      this.scene.tweens.add({\r\n        targets: button,\r\n        scaleX: 1.05,\r\n        scaleY: 1.05,\r\n        duration: 150,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n    \r\n    button.on('pointerout', () => {\r\n      background.setVisible(true)\r\n      hoverBackground.setVisible(false)\r\n      this.scene.tweens.add({\r\n        targets: button,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        duration: 150,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n    \r\n    button.on('pointerdown', () => {\r\n      this.scene.tweens.add({\r\n        targets: button,\r\n        scaleX: 0.95,\r\n        scaleY: 0.95,\r\n        duration: 100,\r\n        yoyo: true,\r\n        ease: 'Power2',\r\n        onComplete: onClick\r\n      })\r\n    })\r\n    \r\n    return button\r\n  }\r\n\r\n  /**\r\n   * 要素のハイライト（パルス、グロー効果）\r\n   */\r\n  public highlightElement(\r\n    elementName: string,\r\n    options: HighlightOptions = {}\r\n  ): void {\r\n    const element = this.scene.children.getByName(elementName)\r\n    if (!element?.getBounds) return\r\n\r\n    const bounds = element.getBounds()\r\n    const highlight = this.scene.add.graphics()\r\n    highlight.setDepth(1999) // オーバーレイより少し下\r\n    \r\n    // デフォルトオプション\r\n    const defaultOptions: HighlightOptions = {\r\n      color: '#FFD700',\r\n      opacity: 0.4,\r\n      borderWidth: 3,\r\n      borderColor: '#FFA500',\r\n      glowEffect: true,\r\n      animationType: 'pulse',\r\n      duration: 1000\r\n    }\r\n    \r\n    const finalOptions = { ...defaultOptions, ...options }\r\n    \r\n    // ハイライト描画\r\n    if (finalOptions.color) {\r\n      const colorValue = parseInt(finalOptions.color.substring(1), 16)\r\n      highlight.fillStyle(colorValue, finalOptions.opacity || 0.4)\r\n      highlight.fillRect(bounds.x, bounds.y, bounds.width, bounds.height)\r\n    }\r\n    \r\n    // ボーダー描画\r\n    if (finalOptions.borderColor && finalOptions.borderWidth) {\r\n      const borderColorValue = parseInt(finalOptions.borderColor.substring(1), 16)\r\n      highlight.lineStyle(finalOptions.borderWidth, borderColorValue)\r\n      highlight.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height)\r\n    }\r\n    \r\n    // グローエフェクト\r\n    if (finalOptions.glowEffect) {\r\n      const glow = this.scene.add.graphics()\r\n      glow.setDepth(1998)\r\n      const glowColorValue = parseInt(finalOptions.borderColor?.substring(1) || 'FFA500', 16)\r\n      glow.lineStyle(8, glowColorValue, 0.3)\r\n      glow.strokeRect(bounds.x - 4, bounds.y - 4, bounds.width + 8, bounds.height + 8)\r\n      this.highlightElements.set(`${elementName  }_glow`, glow)\r\n    }\r\n    \r\n    // アニメーション\r\n    if (finalOptions.animationType !== 'none') {\r\n      const animation = this.createHighlightAnimation(highlight, finalOptions)\r\n      if (animation) {\r\n        this.pulseAnimations.push(animation)\r\n      }\r\n    }\r\n    \r\n    this.highlightElements.set(elementName, highlight)\r\n  }\r\n\r\n  /**\r\n   * ハイライトアニメーションの作成\r\n   */\r\n  private createHighlightAnimation(\r\n    target: Phaser.GameObjects.Graphics,\r\n    options: HighlightOptions\r\n  ): Phaser.Tweens.Tween | null {\r\n    const duration = options.duration || 1000\r\n    \r\n    switch (options.animationType) {\r\n      case 'pulse':\r\n        return this.scene.tweens.add({\r\n          targets: target,\r\n          alpha: { from: 1, to: 0.3 },\r\n          duration: duration / 2,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n        \r\n      case 'glow':\r\n        return this.scene.tweens.add({\r\n          targets: target,\r\n          scaleX: { from: 1, to: 1.1 },\r\n          scaleY: { from: 1, to: 1.1 },\r\n          alpha: { from: 1, to: 0.7 },\r\n          duration: duration / 2,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n        \r\n      case 'border':\r\n        return this.scene.tweens.add({\r\n          targets: target,\r\n          rotation: { from: 0, to: Math.PI * 2 },\r\n          duration,\r\n          repeat: -1,\r\n          ease: 'Linear'\r\n        })\r\n        \r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 誘導矢印の作成\r\n   */\r\n  public createArrow(\r\n    fromX: number, fromY: number,\r\n    toX: number, toY: number,\r\n    color: string = '#FFD700'\r\n  ): void {\r\n    // 矢印の計算\r\n    const angle = Phaser.Math.Angle.Between(fromX, fromY, toX, toY)\r\n    const distance = Phaser.Math.Distance.Between(fromX, fromY, toX, toY)\r\n    const arrowX = fromX + Math.cos(angle) * (distance * 0.7)\r\n    const arrowY = fromY + Math.sin(angle) * (distance * 0.7)\r\n    \r\n    // 矢印画像の作成（シンプルなトライアングル）\r\n    const arrow = this.scene.add.graphics()\r\n    arrow.setDepth(2001)\r\n    \r\n    const colorValue = parseInt(color.substring(1), 16)\r\n    arrow.fillStyle(colorValue, 1)\r\n    arrow.beginPath()\r\n    arrow.moveTo(0, -10)\r\n    arrow.lineTo(20, 0)\r\n    arrow.lineTo(0, 10)\r\n    arrow.closePath()\r\n    arrow.fillPath()\r\n    \r\n    arrow.setPosition(arrowX, arrowY)\r\n    arrow.setRotation(angle)\r\n    \r\n    // 矢印アニメーション（パルス）\r\n    this.scene.tweens.add({\r\n      targets: arrow,\r\n      scaleX: { from: 1, to: 1.2 },\r\n      scaleY: { from: 1, to: 1.2 },\r\n      alpha: { from: 1, to: 0.7 },\r\n      duration: 800,\r\n      yoyo: true,\r\n      repeat: -1,\r\n      ease: 'Sine.easeInOut'\r\n    })\r\n    \r\n    this.arrows.push(arrow as Phaser.GameObjects.Graphics) // 型を明確に指定\r\n  }\r\n\r\n  /**\r\n   * すべてのハイライトをクリア\r\n   */\r\n  public clearHighlights(): void {\r\n    this.highlightElements.forEach(highlight => highlight.destroy())\r\n    this.highlightElements.clear()\r\n    \r\n    this.pulseAnimations.forEach(animation => animation.destroy())\r\n    this.pulseAnimations = []\r\n    \r\n    this.arrows.forEach(arrow => arrow.destroy())\r\n    this.arrows = []\r\n  }\r\n\r\n  /**\r\n   * レスポンシブ対応：画面サイズ変更時の調整\r\n   */\r\n  public onResize(): void {\r\n    // const camera = this.scene.cameras.main // 未使用のため削除\r\n    \r\n    // ベースオーバーレイの再描画\r\n    this.createBaseOverlay()\r\n    \r\n    // レスポンシブレイアウトの適用\r\n    this.updateResponsiveLayout()\r\n    \r\n    // スポットライトの再計算（ターゲット要素がある場合）\r\n    if (this.spotlightMask && this.highlightElements.size > 0) {\r\n      // 最初のハイライト要素でスポットライトを再作成\r\n      const firstElement = this.highlightElements.values().next().value\r\n      if (firstElement?.getBounds) {\r\n        const bounds = firstElement.getBounds()\r\n        const mockElement = { getBounds: () => bounds }\r\n        this.createSpotlight(mockElement as Phaser.GameObjects.GameObject)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * キーボード操作対応（アクセシビリティ対応）\r\n   */\r\n  public enableKeyboardControls(\r\n    onNext: () => void,\r\n    onBack?: () => void,\r\n    onSkip?: () => void\r\n  ): void {\r\n    const cursors = this.scene.input.keyboard?.createCursorKeys()\r\n    if (!cursors) return\r\n\r\n    // 基本操作\r\n    this.scene.input.keyboard?.on('keydown-SPACE', onNext)\r\n    this.scene.input.keyboard?.on('keydown-ENTER', onNext)\r\n    \r\n    if (onBack) {\r\n      this.scene.input.keyboard?.on('keydown-BACKSPACE', onBack)\r\n      cursors.left.on('down', onBack)\r\n    }\r\n    \r\n    if (onSkip) {\r\n      this.scene.input.keyboard?.on('keydown-ESC', onSkip)\r\n    }\r\n    \r\n    cursors.right.on('down', onNext)\r\n\r\n    // アクセシビリティ拡張キー\r\n    this.scene.input.keyboard?.on('keydown-TAB', (event: KeyboardEvent) => {\r\n      event.preventDefault()\r\n      // TABでボタン間のフォーカス移動をシミュレート\r\n      this.cycleButtonFocus()\r\n    })\r\n\r\n    // 数字キーでステップ直接移動（開発・テスト用）\r\n    for (let i = 1; i <= 9; i++) {\r\n      this.scene.input.keyboard?.on(`keydown-${i}`, () => {\r\n        this.jumpToStep(i - 1)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ボタン間のフォーカスサイクル\r\n   */\r\n  private cycleButtonFocus(): void {\r\n    // 実装：TABキーでボタン間を移動する視覚的フィードバック\r\n    if (this.controlButtons) {\r\n      // 既存のボタンにフォーカス効果を追加\r\n      const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\r\n      if (buttons.length > 0) {\r\n        // シンプルなフォーカス効果として、最初のボタンを強調\r\n        const firstButton = buttons[0]\r\n        this.scene.tweens.add({\r\n          targets: firstButton,\r\n          scaleX: 1.1,\r\n          scaleY: 1.1,\r\n          duration: 200,\r\n          yoyo: true,\r\n          ease: 'Power2'\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 指定ステップへのジャンプ（デバッグ用）\r\n   */\r\n  private jumpToStep(stepIndex: number): void {\r\n    // 開発時のみ有効にする機能\r\n    if (import.meta.env.DEV) console.log(`Attempt to jump to step ${stepIndex} (debug mode only)`)\r\n  }\r\n\r\n  /**\r\n   * レスポンシブ対応の拡張\r\n   */\r\n  public updateResponsiveLayout(): void {\r\n    const camera = this.scene.cameras.main\r\n    const isSmallScreen = camera.width < 768\r\n    const isMobile = camera.width < 480\r\n\r\n    if (isMobile) {\r\n      this.applyMobileLayout()\r\n    } else if (isSmallScreen) {\r\n      this.applyTabletLayout()\r\n    } else {\r\n      this.applyDesktopLayout()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モバイル向けレイアウト\r\n   */\r\n  private applyMobileLayout(): void {\r\n    const camera = this.scene.cameras.main\r\n    \r\n    // ボタンサイズを大きく\r\n    const mobileButtonHeight = 56\r\n    const mobileButtonWidth = Math.min(150, camera.width / 3 - 10)\r\n    \r\n    // 進捗バーを上部に配置\r\n    if (this.progressBar) {\r\n      this.progressBar.setPosition(camera.centerX, 30)\r\n    }\r\n    \r\n    // 吹き出しのサイズ調整\r\n    if (this.speechBubble) {\r\n      const maxWidth = camera.width - 20\r\n      this.repositionSpeechBubbleForMobile(maxWidth)\r\n    }\r\n    \r\n    // ボタンを画面下部に大きく配置\r\n    if (this.controlButtons) {\r\n      this.controlButtons.setPosition(camera.centerX, camera.height - 40)\r\n      this.adjustButtonSizesForMobile(mobileButtonWidth, mobileButtonHeight)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * タブレット向けレイアウト\r\n   */\r\n  private applyTabletLayout(): void {\r\n    const camera = this.scene.cameras.main\r\n    \r\n    // 中間的なサイズ設定\r\n    const tabletButtonHeight = 52\r\n    const tabletButtonWidth = 140\r\n    \r\n    if (this.progressBar) {\r\n      this.progressBar.setPosition(camera.centerX, 40)\r\n    }\r\n    \r\n    if (this.controlButtons) {\r\n      this.controlButtons.setPosition(camera.centerX, camera.height - 60)\r\n      this.adjustButtonSizes(tabletButtonWidth, tabletButtonHeight)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デスクトップ向けレイアウト\r\n   */\r\n  private applyDesktopLayout(): void {\r\n    const camera = this.scene.cameras.main\r\n    \r\n    // 標準サイズを維持\r\n    if (this.progressBar) {\r\n      this.progressBar.setPosition(camera.centerX, 50)\r\n    }\r\n    \r\n    if (this.controlButtons) {\r\n      this.controlButtons.setPosition(camera.centerX, camera.height - 80)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モバイル用吹き出し再配置\r\n   */\r\n  private repositionSpeechBubbleForMobile(maxWidth: number): void {\r\n    if (!this.speechBubble) return\r\n    \r\n    const camera = this.scene.cameras.main\r\n    \r\n    // モバイルでは画面中央上部に固定配置\r\n    this.speechBubble.setPosition(camera.centerX, camera.height * 0.3)\r\n    \r\n    // テキストの再配置（幅制限）\r\n    const textElements = this.speechBubble.list.filter(child => \r\n      child instanceof Phaser.GameObjects.Text\r\n    ) as Phaser.GameObjects.Text[]\r\n    \r\n    textElements.forEach(text => {\r\n      text.setWordWrapWidth(maxWidth - this.SPEECH_BUBBLE_PADDING * 2)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ボタンサイズ調整（モバイル用）\r\n   */\r\n  private adjustButtonSizesForMobile(width: number, height: number): void {\r\n    if (!this.controlButtons) return\r\n    \r\n    const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\r\n    buttons.forEach((button, index) => {\r\n      // ボタンの再描画\r\n      const graphics = button.list[0] as Phaser.GameObjects.Graphics\r\n      if (graphics) {\r\n        graphics.clear()\r\n        graphics.fillStyle(0x007bff, 1)\r\n        graphics.fillRoundedRect(-width / 2, -height / 2, width, height, 8)\r\n      }\r\n      \r\n      // テキストサイズ調整\r\n      const text = button.list.find(child => \r\n        child instanceof Phaser.GameObjects.Text\r\n      ) as Phaser.GameObjects.Text\r\n      if (text) {\r\n        text.setFontSize('18px')\r\n      }\r\n      \r\n      // ボタン間の間隔調整\r\n      button.setPosition(\r\n        (index - 1) * (width + 15),\r\n        0\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ボタンサイズ調整（一般用）\r\n   */\r\n  private adjustButtonSizes(width: number, height: number): void {\r\n    if (!this.controlButtons) return\r\n    \r\n    const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\r\n    buttons.forEach((button) => {\r\n      const graphics = button.list[0] as Phaser.GameObjects.Graphics\r\n      if (graphics) {\r\n        graphics.clear()\r\n        graphics.fillStyle(0x007bff, 1)\r\n        graphics.fillRoundedRect(-width / 2, -height / 2, width, height, 8)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * アクセシビリティアナウンス（スクリーンリーダー対応）\r\n   */\r\n  public announceForScreenReader(message: string): void {\r\n    // ARIA live region を利用したアナウンス\r\n    const announcement = this.scene.add.text(-1000, -1000, message, {\r\n      fontSize: '1px',\r\n      color: '#000000'\r\n    })\r\n    \r\n    // 要素にARIA属性を設定（可能な範囲で）\r\n    const canvas = this.scene.game.canvas\r\n    if (canvas) {\r\n      canvas.setAttribute('aria-label', message)\r\n      \r\n      // 短時間で削除\r\n      this.scene.time.delayedCall(1000, () => {\r\n        announcement.destroy()\r\n        canvas.removeAttribute('aria-label')\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 高コントラストモード対応\r\n   */\r\n  public enableHighContrastMode(): void {\r\n    // 色の調整\r\n    this.overlayGraphics.clear()\r\n    this.overlayGraphics.fillStyle(0x000000, 0.9) // より濃い背景\r\n    const camera = this.scene.cameras.main\r\n    this.overlayGraphics.fillRect(0, 0, camera.width, camera.height)\r\n    \r\n    // ハイライト色の調整\r\n    this.highlightElements.forEach(highlight => {\r\n      // より強いコントラストの色に変更\r\n      highlight.clear()\r\n      highlight.fillStyle(0xFFFF00, 0.7) // 明るい黄色\r\n      highlight.lineStyle(4, 0xFF0000, 1) // 赤いボーダー\r\n    })\r\n  }\r\n\r\n  /**\r\n   * アニメーション削減モード（motion-reduction対応）\r\n   */\r\n  public enableReducedMotion(): void {\r\n    // 既存のアニメーションを停止\r\n    this.pulseAnimations.forEach(animation => {\r\n      animation.stop()\r\n    })\r\n    this.pulseAnimations = []\r\n    \r\n    // 静的なハイライトに変更\r\n    this.highlightElements.forEach(highlight => {\r\n      highlight.setAlpha(0.6) // 固定の透明度\r\n    })\r\n  }\r\n\r\n  /**\r\n   * オーバーレイの表示/非表示\r\n   */\r\n  public setVisible(visible: boolean): void {\r\n    this.container.setVisible(visible)\r\n  }\r\n\r\n  /**\r\n   * 破棄\r\n   */\r\n  public destroy(): void {\r\n    this.clearHighlights()\r\n    \r\n    // キーボードイベントのクリーンアップ\r\n    this.scene.input.keyboard?.removeAllListeners()\r\n    \r\n    this.container.destroy()\r\n  }\r\n}","import type { GameScene } from '../scenes/GameScene'\r\nimport { SAMPLE_TUTORIAL_CONFIG, QUICK_TEST_TUTORIAL, ERROR_TEST_TUTORIAL } from './SampleTutorialConfig'\r\nimport type { TutorialOverlay, PerformanceWithMemory, WindowWithTutorialTest } from '@/types/game-events'\r\n\r\n/**\r\n * 開発環境でのみログを出力するヘルパー関数\r\n */\r\nfunction devLog(...args: any[]): void {\r\n  if (import.meta.env.DEV) {\r\n    devLog(...args)\r\n  }\r\n}\r\n\r\n/**\r\n * 開発環境でのみエラーログを出力するヘルパー関数\r\n */\r\nfunction devError(...args: any[]): void {\r\n  if (import.meta.env.DEV) {\r\n    devError(...args)\r\n  }\r\n}\r\n\r\n/**\r\n * 開発環境でのみ警告ログを出力するヘルパー関数\r\n */\r\nfunction devWarn(...args: any[]): void {\r\n  if (import.meta.env.DEV) {\r\n    devWarn(...args)\r\n  }\r\n}\r\n\r\n/**\r\n * チュートリアルUIのテストヘルパー\r\n * 開発環境でのみ利用可能\r\n */\r\nexport class TutorialTestHelper {\r\n  private scene: GameScene\r\n\r\n  constructor(scene: GameScene) {\r\n    this.scene = scene\r\n  }\r\n\r\n  /**\r\n   * 基本UIテストの実行\r\n   */\r\n  public async runBasicUITest(): Promise<void> {\r\n    devLog('=== チュートリアル基本UIテスト開始 ===')\r\n    \r\n    try {\r\n      await this.scene.startTutorial(SAMPLE_TUTORIAL_CONFIG)\r\n      devLog('✅ 基本UIテストが正常に開始されました')\r\n    } catch (error) {\r\n      devError('❌ 基本UIテストでエラーが発生:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * クイックテストの実行\r\n   */\r\n  public async runQuickTest(): Promise<void> {\r\n    devLog('=== チュートリアルクイックテスト開始 ===')\r\n    \r\n    try {\r\n      await this.scene.startTutorial(QUICK_TEST_TUTORIAL)\r\n      devLog('✅ クイックテストが正常に開始されました')\r\n    } catch (error) {\r\n      devError('❌ クイックテストでエラーが発生:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * エラーハンドリングテストの実行\r\n   */\r\n  public async runErrorHandlingTest(): Promise<void> {\r\n    devLog('=== チュートリアルエラーハンドリングテスト開始 ===')\r\n    \r\n    try {\r\n      await this.scene.startTutorial(ERROR_TEST_TUTORIAL)\r\n      devLog('✅ エラーハンドリングテストが開始されました')\r\n    } catch (error) {\r\n      devError('❌ エラーハンドリングテストで予期しないエラー:', error)\r\n      // このテストでは一部エラーが期待されるため、処理を続行\r\n    }\r\n  }\r\n\r\n  /**\r\n   * レスポンシブ機能のテスト\r\n   */\r\n  public testResponsiveFeatures(): void {\r\n    devLog('=== レスポンシブ機能テスト開始 ===')\r\n    \r\n    if (!this.scene.isTutorialActive()) {\r\n      devWarn('⚠️ チュートリアルが実行中ではありません。先にチュートリアルを開始してください。')\r\n      return\r\n    }\r\n\r\n    const currentStep = this.scene.getCurrentTutorialStep()\r\n    if (!currentStep) {\r\n      devWarn('⚠️ 現在のチュートリアルステップが取得できません。')\r\n      return\r\n    }\r\n\r\n    // 画面サイズ変更のシミュレーション\r\n    this.simulateScreenResize()\r\n  }\r\n\r\n  /**\r\n   * 画面サイズ変更のシミュレーション\r\n   */\r\n  private simulateScreenResize(): void {\r\n    const camera = this.scene.cameras.main\r\n    const originalWidth = camera.width\r\n    const originalHeight = camera.height\r\n\r\n    devLog(`📱 元のサイズ: ${originalWidth}x${originalHeight}`)\r\n\r\n    // モバイルサイズのシミュレーション\r\n    this.scene.scale.emit('resize', { width: 480, height: 800 })\r\n    devLog('📱 モバイルサイズに変更をシミュレート')\r\n\r\n    // タブレットサイズのシミュレーション\r\n    setTimeout(() => {\r\n      this.scene.scale.emit('resize', { width: 768, height: 1024 })\r\n      devLog('📱 タブレットサイズに変更をシミュレート')\r\n    }, 2000)\r\n\r\n    // デスクトップサイズに戻す\r\n    setTimeout(() => {\r\n      this.scene.scale.emit('resize', { width: originalWidth, height: originalHeight })\r\n      devLog('📱 元のサイズに復元')\r\n    }, 4000)\r\n  }\r\n\r\n  /**\r\n   * アクセシビリティ機能のテスト\r\n   */\r\n  public testAccessibilityFeatures(): void {\r\n    devLog('=== アクセシビリティ機能テスト開始 ===')\r\n    \r\n    if (!this.scene.isTutorialActive()) {\r\n      devWarn('⚠️ チュートリアルが実行中ではありません。')\r\n      return\r\n    }\r\n\r\n    // キーボード操作のテスト\r\n    this.testKeyboardNavigation()\r\n    \r\n    // 高コントラストモードのテスト\r\n    setTimeout(() => this.testHighContrastMode(), 2000)\r\n    \r\n    // アニメーション削減モードのテスト\r\n    setTimeout(() => this.testReducedMotion(), 4000)\r\n  }\r\n\r\n  /**\r\n   * キーボードナビゲーションのテスト\r\n   */\r\n  private testKeyboardNavigation(): void {\r\n    devLog('⌨️ キーボードナビゲーションテスト')\r\n    \r\n    // TABキーのシミュレーション\r\n    const tabEvent = new KeyboardEvent('keydown', { code: 'Tab', key: 'Tab' })\r\n    this.scene.input.keyboard?.emit('keydown-TAB', tabEvent)\r\n    \r\n    devLog('✅ TABキー操作をシミュレート')\r\n  }\r\n\r\n  /**\r\n   * 高コントラストモードのテスト\r\n   */\r\n  private testHighContrastMode(): void {\r\n    devLog('🎨 高コントラストモードテスト')\r\n    \r\n    const tutorialOverlay = (this.scene as { tutorialOverlay?: TutorialOverlay }).tutorialOverlay\r\n    if (tutorialOverlay && typeof tutorialOverlay.enableHighContrastMode === 'function') {\r\n      tutorialOverlay.enableHighContrastMode()\r\n      devLog('✅ 高コントラストモードを有効化')\r\n      \r\n      // 3秒後に元に戻す\r\n      setTimeout(() => {\r\n        devLog('🔄 高コントラストモードを無効化')\r\n        // 元に戻すロジックは実装していないため、ログのみ\r\n      }, 3000)\r\n    } else {\r\n      devWarn('⚠️ 高コントラストモード機能が利用できません')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * アニメーション削減モードのテスト\r\n   */\r\n  private testReducedMotion(): void {\r\n    devLog('🎞️ アニメーション削減モードテスト')\r\n    \r\n    const tutorialOverlay = (this.scene as { tutorialOverlay?: TutorialOverlay }).tutorialOverlay\r\n    if (tutorialOverlay && typeof tutorialOverlay.enableReducedMotion === 'function') {\r\n      tutorialOverlay.enableReducedMotion()\r\n      devLog('✅ アニメーション削減モードを有効化')\r\n      \r\n      // 3秒後に元に戻す（実際にはページリロードが必要な場合もある）\r\n      setTimeout(() => {\r\n        devLog('🔄 アニメーション削減モードテスト完了')\r\n      }, 3000)\r\n    } else {\r\n      devWarn('⚠️ アニメーション削減モード機能が利用できません')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パフォーマンステスト\r\n   */\r\n  public runPerformanceTest(): void {\r\n    devLog('=== パフォーマンステスト開始 ===')\r\n    \r\n    const startTime = performance.now()\r\n    let frameCount = 0\r\n    let totalTime = 0\r\n\r\n    const measureFrame = () => {\r\n      frameCount++\r\n      const currentTime = performance.now()\r\n      totalTime = currentTime - startTime\r\n\r\n      if (totalTime >= 5000) { // 5秒間測定\r\n        const avgFPS = (frameCount / totalTime) * 1000\r\n        devLog(`📊 平均FPS: ${avgFPS.toFixed(2)}`)\r\n        \r\n        if (avgFPS >= 30) {\r\n          devLog('✅ パフォーマンス良好（30fps以上）')\r\n        } else if (avgFPS >= 20) {\r\n          devLog('⚠️ パフォーマンス注意（20-30fps）')\r\n        } else {\r\n          devLog('❌ パフォーマンス不良（20fps未満）')\r\n        }\r\n        return\r\n      }\r\n\r\n      requestAnimationFrame(measureFrame)\r\n    }\r\n\r\n    requestAnimationFrame(measureFrame)\r\n  }\r\n\r\n  /**\r\n   * メモリ使用量の監視\r\n   */\r\n  public monitorMemoryUsage(): void {\r\n    if ('performance' in window && 'memory' in (window.performance as PerformanceWithMemory)) {\r\n      const memory = (window.performance as PerformanceWithMemory).memory!\r\n      devLog('🧠 メモリ使用量:')\r\n      devLog(`  使用中: ${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`)\r\n      devLog(`  合計: ${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`)\r\n      devLog(`  上限: ${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`)\r\n    } else {\r\n      devLog('⚠️ メモリ使用量の監視は利用できません（Chrome必須）')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 全テストの実行\r\n   */\r\n  public async runAllTests(): Promise<void> {\r\n    devLog('🚀 チュートリアルUI全機能テスト開始')\r\n    \r\n    try {\r\n      // 基本テスト\r\n      await this.runQuickTest()\r\n      \r\n      // 少し待機\r\n      await new Promise(resolve => setTimeout(resolve, 2000))\r\n      \r\n      // レスポンシブテスト\r\n      this.testResponsiveFeatures()\r\n      \r\n      // アクセシビリティテスト\r\n      setTimeout(() => this.testAccessibilityFeatures(), 3000)\r\n      \r\n      // パフォーマンステスト\r\n      setTimeout(() => this.runPerformanceTest(), 6000)\r\n      \r\n      // メモリ監視\r\n      setTimeout(() => this.monitorMemoryUsage(), 12000)\r\n      \r\n      devLog('✅ 全テストスケジュールが完了しました')\r\n      \r\n    } catch (error) {\r\n      devError('❌ テスト実行中にエラーが発生:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * テスト結果のサマリー出力\r\n   */\r\n  public printTestSummary(): void {\r\n    devLog('\\n=== チュートリアルUIテスト結果サマリー ===')\r\n    devLog('実装された機能:')\r\n    devLog('✅ TutorialOverlayコンポーネント')\r\n    devLog('✅ スポットライト効果')\r\n    devLog('✅ 吹き出し表示')\r\n    devLog('✅ 進捗バー')\r\n    devLog('✅ 制御ボタン（次へ、戻る、スキップ）')\r\n    devLog('✅ ハイライト機能（パルス、グロー、ボーダー）')\r\n    devLog('✅ 誘導矢印')\r\n    devLog('✅ レスポンシブ対応（モバイル、タブレット、デスクトップ）')\r\n    devLog('✅ キーボード操作対応')\r\n    devLog('✅ アクセシビリティ機能')\r\n    devLog('✅ GameSceneとの統合')\r\n    devLog('\\n次のステップ:')\r\n    devLog('- 実際のゲームチュートリアル設定の作成')\r\n    devLog('- より詳細なアクセシビリティテスト')\r\n    devLog('- 多言語対応の検討')\r\n    devLog('- 音声ガイダンスの追加検討')\r\n  }\r\n}\r\n\r\n/**\r\n * グローバルテストヘルパーの設定\r\n * ブラウザのコンソールから実行可能\r\n * 開発環境でのみ実行される\r\n */\r\nexport function setupGlobalTutorialTests(scene: GameScene): void {\r\n  // プロダクション環境では何もしない\r\n  if (!import.meta.env.DEV) {\r\n    return\r\n  }\r\n\r\n  const helper = new TutorialTestHelper(scene)\r\n  \r\n  // グローバル関数として公開\r\n  ;(window as WindowWithTutorialTest).tutorialTest = {\r\n    basic: () => helper.runBasicUITest(),\r\n    quick: () => helper.runQuickTest(),\r\n    error: () => helper.runErrorHandlingTest(),\r\n    responsive: () => helper.testResponsiveFeatures(),\r\n    accessibility: () => helper.testAccessibilityFeatures(),\r\n    performance: () => helper.runPerformanceTest(),\r\n    memory: () => helper.monitorMemoryUsage(),\r\n    all: () => helper.runAllTests(),\r\n    summary: () => helper.printTestSummary(),\r\n    stop: () => scene.stopTutorial()\r\n  }\r\n  \r\n  devLog('🔧 チュートリアルテスト関数が利用可能になりました:')\r\n  devLog('  tutorialTest.basic() - 基本UIテスト')\r\n  devLog('  tutorialTest.quick() - クイックテスト')\r\n  devLog('  tutorialTest.error() - エラーハンドリングテスト')\r\n  devLog('  tutorialTest.responsive() - レスポンシブテスト')\r\n  devLog('  tutorialTest.accessibility() - アクセシビリティテスト')\r\n  devLog('  tutorialTest.performance() - パフォーマンステスト')\r\n  devLog('  tutorialTest.memory() - メモリ監視')\r\n  devLog('  tutorialTest.all() - 全テスト実行')\r\n  devLog('  tutorialTest.summary() - テスト結果サマリー')\r\n  devLog('  tutorialTest.stop() - チュートリアル強制終了')\r\n}","import type { TutorialConfig } from '@/domain/types/tutorial.types'\r\n\r\n/**\r\n * インタラクティブゲームプレイチュートリアル\r\n * 実際にゲームを操作しながら学ぶ体験型チュートリアル\r\n */\r\nexport const INTERACTIVE_GAME_TUTORIAL: TutorialConfig = {\r\n  id: 'interactive_game_tutorial',\r\n  name: '人生充実ゲーム入門',\r\n  description: '実際にゲームをプレイしながら基本的な操作を学びます',\r\n  version: '2.0.0',\r\n  autoStart: false,\r\n  canSkip: true,\r\n  showProgress: true,\r\n  overlayOptions: {\r\n    backgroundColor: '#000000',\r\n    opacity: 0.6,\r\n    blurBackground: false,\r\n    allowClickThrough: true // 特定の要素のみクリック可能\r\n  },\r\n  steps: [\r\n    // ========== イントロダクション ==========\r\n    {\r\n      id: 'welcome',\r\n      title: 'ようこそ、人生充実ゲームへ！',\r\n      description: 'このゲームでは、保険を活用しながら人生の様々な挑戦を乗り越え、夢を実現することを目指します。\\n\\n実際にゲームをプレイしながら、基本的な操作を学んでいきましょう！',\r\n      position: 'center',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        animationType: 'none'\r\n      }\r\n    },\r\n\r\n    // ========== 基本UI説明 ==========\r\n    {\r\n      id: 'vitality_explanation',\r\n      title: '活力（バイタリティ）について',\r\n      description: 'この緑のバーがあなたの活力です。\\n\\n活力は人生の挑戦に立ち向かうエネルギーを表し、0になるとゲームオーバーです。\\n\\n現在の活力: 20/35',\r\n      targetElement: 'vitality-bar',\r\n      position: 'bottom',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        color: '#00FF00',\r\n        opacity: 0.4,\r\n        borderWidth: 3,\r\n        borderColor: '#00AA00',\r\n        glowEffect: true,\r\n        animationType: 'pulse',\r\n        duration: 1000\r\n      }\r\n    },\r\n\r\n    {\r\n      id: 'hand_cards_explanation',\r\n      title: '手札について',\r\n      description: 'ここがあなたの手札です。\\n\\n人生カード（青）と保険カード（緑）があり、これらを使って様々な挑戦に立ち向かいます。',\r\n      targetElement: 'hand-area',\r\n      position: 'top',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        color: '#FFD700',\r\n        opacity: 0.3,\r\n        borderWidth: 4,\r\n        borderColor: '#FFA500',\r\n        glowEffect: true,\r\n        animationType: 'glow'\r\n      }\r\n    },\r\n\r\n    // ========== カードドロー体験 ==========\r\n    {\r\n      id: 'draw_card_instruction',\r\n      title: '最初のカードを引いてみましょう',\r\n      description: '「カードを引く」ボタンをクリックして、新しいカードを1枚引いてください。\\n\\nカードを引くことで、新たな選択肢が増えます。',\r\n      targetElement: 'draw-button',\r\n      position: 'left',\r\n      action: 'wait_for_game_action',\r\n      gameAction: {\r\n        type: 'draw_card',\r\n        validation: (gameState: Record<string, unknown>) => {\r\n          // 手札が初期枚数より増えているか確認\r\n          const hand = gameState.hand as unknown[]\r\n          const config = gameState.config as { startingHandSize: number }\r\n          return hand.length > config.startingHandSize\r\n        }\r\n      },\r\n      highlightOptions: {\r\n        color: '#4CAF50',\r\n        opacity: 0.5,\r\n        borderWidth: 4,\r\n        borderColor: '#2E7D32',\r\n        glowEffect: true,\r\n        animationType: 'pulse',\r\n        duration: 800\r\n      }\r\n    },\r\n\r\n    {\r\n      id: 'draw_success',\r\n      title: 'よくできました！',\r\n      description: '新しいカードを引きました。\\n\\n手札が増えると、より多くの戦略を立てることができます。',\r\n      position: 'center',\r\n      action: 'auto',\r\n      waitTime: 3000,\r\n      highlightOptions: {\r\n        animationType: 'none'\r\n      }\r\n    },\r\n\r\n    // ========== チャレンジ開始 ==========\r\n    {\r\n      id: 'challenge_explanation',\r\n      title: 'チャレンジカードが現れました',\r\n      description: 'これが「チャレンジカード」です。\\n\\n人生には様々な挑戦があります。手札のカードを使って、これらの挑戦を乗り越えましょう。',\r\n      targetElement: 'challenge-area',\r\n      position: 'bottom',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        color: '#FF6B6B',\r\n        opacity: 0.4,\r\n        borderWidth: 4,\r\n        borderColor: '#FF4444',\r\n        glowEffect: true,\r\n        animationType: 'pulse'\r\n      }\r\n    },\r\n\r\n    {\r\n      id: 'select_cards_instruction',\r\n      title: 'カードを選択してチャレンジに挑戦',\r\n      description: 'チャレンジに必要なパワー以上になるよう、手札からカードを選択してください。\\n\\n複数のカードを組み合わせることもできます。\\n\\nカードをクリックして選択しましょう！',\r\n      targetElement: 'hand-area',\r\n      position: 'top',\r\n      action: 'wait_for_game_action',\r\n      gameAction: {\r\n        type: 'select_cards',\r\n        validation: (gameState: Record<string, unknown>) => {\r\n          const selectedCards = gameState.selectedCards as unknown[]\r\n          return selectedCards.length > 0\r\n        }\r\n      },\r\n      highlightOptions: {\r\n        color: '#FFD700',\r\n        opacity: 0.4,\r\n        borderWidth: 3,\r\n        borderColor: '#FFA500',\r\n        animationType: 'glow'\r\n      }\r\n    },\r\n\r\n    {\r\n      id: 'resolve_challenge_instruction',\r\n      title: 'チャレンジに挑戦！',\r\n      description: 'カードを選択したら、「チャレンジに挑む」ボタンをクリックして結果を確認しましょう。\\n\\n選択したカードの合計パワーがチャレンジに必要なパワー以上なら成功です！',\r\n      targetElement: 'resolve-button',\r\n      position: 'left',\r\n      action: 'wait_for_game_action',\r\n      gameAction: {\r\n        type: 'resolve_challenge',\r\n        validation: (gameState: Record<string, unknown>) => {\r\n          return gameState.phase === 'resolution' || gameState.phase === 'card_selection'\r\n        }\r\n      },\r\n      highlightOptions: {\r\n        color: '#2196F3',\r\n        opacity: 0.5,\r\n        borderWidth: 4,\r\n        borderColor: '#1976D2',\r\n        glowEffect: true,\r\n        animationType: 'pulse'\r\n      }\r\n    },\r\n\r\n    // ========== チャレンジ成功時の保険選択 ==========\r\n    {\r\n      id: 'insurance_selection',\r\n      title: '保険を選択しましょう',\r\n      description: 'チャレンジ成功！報酬として保険カードを1枚選べます。\\n\\n保険は将来の挑戦に備える重要な要素です。\\n\\n3枚の中から1枚を選んでください。',\r\n      targetElement: 'card-selection-ui',\r\n      position: 'center',\r\n      action: 'wait_for_game_action',\r\n      gameAction: {\r\n        type: 'select_reward_card',\r\n        validation: (gameState: Record<string, unknown>) => {\r\n          return gameState.phase === 'resolution'\r\n        }\r\n      },\r\n      skipCondition: () => {\r\n        // チャレンジ失敗時はスキップ\r\n        const gameState = (window as Window & { __gameState?: { lastChallengeResult?: { success?: boolean } } }).__gameState\r\n        return gameState?.lastChallengeResult?.success === false\r\n      },\r\n      highlightOptions: {\r\n        color: '#4CAF50',\r\n        opacity: 0.3,\r\n        animationType: 'glow'\r\n      }\r\n    },\r\n\r\n    // ========== ターン終了 ==========\r\n    {\r\n      id: 'end_turn_instruction',\r\n      title: 'ターンを終了しましょう',\r\n      description: 'チャレンジが終わったら、「ターン終了」ボタンをクリックして次のターンに進みます。\\n\\n新しいチャレンジが現れ、ゲームが進行します。',\r\n      targetElement: 'end-turn-button',\r\n      position: 'left',\r\n      action: 'wait_for_game_action',\r\n      gameAction: {\r\n        type: 'end_turn',\r\n        validation: (gameState: Record<string, unknown>) => {\r\n          return (gameState.turn as number) > 1\r\n        }\r\n      },\r\n      highlightOptions: {\r\n        color: '#9C27B0',\r\n        opacity: 0.5,\r\n        borderWidth: 4,\r\n        borderColor: '#7B1FA2',\r\n        glowEffect: true,\r\n        animationType: 'pulse'\r\n      }\r\n    },\r\n\r\n    // ========== 保険の効果説明 ==========\r\n    {\r\n      id: 'insurance_effects',\r\n      title: '保険の効果について',\r\n      description: '保険カードはチャレンジ時にボーナスパワーを提供します。\\n\\n年齢が上がるほど保険の効果も高まりますが、保険が多すぎると負担（-パワー）も発生します。\\n\\nバランスが重要です！',\r\n      targetElement: 'insurance-list',\r\n      position: 'left',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        color: '#00BCD4',\r\n        opacity: 0.4,\r\n        borderWidth: 3,\r\n        borderColor: '#0097A7',\r\n        animationType: 'pulse'\r\n      }\r\n    },\r\n\r\n    // ========== 基本的な戦略 ==========\r\n    {\r\n      id: 'basic_strategy',\r\n      title: '基本的な戦略',\r\n      description: '成功のコツ：\\n\\n1. 活力を管理しながら挑戦する\\n2. 保険を適切に選択・活用する\\n3. カードの組み合わせを工夫する\\n4. 年齢に応じた戦略を立てる',\r\n      position: 'center',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        animationType: 'none'\r\n      }\r\n    },\r\n\r\n    // ========== チュートリアル完了 ==========\r\n    {\r\n      id: 'tutorial_complete',\r\n      title: 'チュートリアル完了！',\r\n      description: 'おめでとうございます！基本的な操作を習得しました。\\n\\nこれから本格的なゲームが始まります。\\n\\n3つのライフステージを乗り越え、最後に夢を実現しましょう！\\n\\n頑張ってください！',\r\n      position: 'center',\r\n      action: 'click',\r\n      highlightOptions: {\r\n        color: '#4CAF50',\r\n        opacity: 0.3,\r\n        animationType: 'glow',\r\n        duration: 2000\r\n      },\r\n      onExit: () => {\r\n        // チュートリアル完了フラグを設定\r\n        localStorage.setItem('tutorial_completed', 'true')\r\n        \r\n        // 完了メッセージ\r\n        if (import.meta.env.DEV) console.log('🎉 チュートリアル完了！本格的なゲームをお楽しみください！')\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n/**\r\n * 簡易版チュートリアル（リピーター向け）\r\n */\r\nexport const QUICK_TUTORIAL: TutorialConfig = {\r\n  id: 'quick_tutorial',\r\n  name: 'クイックガイド',\r\n  description: '基本操作の簡単な復習',\r\n  version: '1.0.0',\r\n  autoStart: false,\r\n  canSkip: true,\r\n  showProgress: true,\r\n  steps: [\r\n    {\r\n      id: 'quick_intro',\r\n      title: '基本操作の復習',\r\n      description: 'カードを引いて、チャレンジに挑戦し、保険を活用して人生を充実させましょう！',\r\n      position: 'center',\r\n      action: 'click'\r\n    },\r\n    {\r\n      id: 'quick_controls',\r\n      title: '操作方法',\r\n      description: '1. カードを引く\\n2. カードを選択\\n3. チャレンジに挑む\\n4. 保険を選択\\n5. ターン終了',\r\n      position: 'center',\r\n      action: 'click'\r\n    },\r\n    {\r\n      id: 'quick_complete',\r\n      title: 'それでは、ゲームを楽しんでください！',\r\n      description: '詳しいチュートリアルが必要な場合は、メニューから「詳細チュートリアル」を選択してください。',\r\n      position: 'center',\r\n      action: 'click'\r\n    }\r\n  ]\r\n}","import type { Card } from '@/domain/entities/Card'\r\nimport type { Game } from '@/domain/entities/Game'\r\n\r\n/**\r\n * ドロップゾーンの定義\r\n */\r\nexport interface DropZone {\r\n  id: string\r\n  type: 'challenge' | 'discard' | 'special'\r\n  bounds: Phaser.Geom.Rectangle\r\n  isValid: (card: Card, game: Game) => boolean\r\n  onDrop: (card: Card, game: Game) => void\r\n  priority: number\r\n  magneticDistance?: number\r\n  visualStyle?: {\r\n    validColor: number\r\n    invalidColor: number\r\n    hoverColor: number\r\n  }\r\n}\r\n\r\n/**\r\n * ドロップ結果\r\n */\r\nexport interface DropResult {\r\n  success: boolean\r\n  zone?: DropZone\r\n  error?: string\r\n}\r\n\r\n/**\r\n * ドラッグ状態\r\n */\r\ninterface DragState {\r\n  isDragging: boolean\r\n  card?: Card\r\n  startPosition?: { x: number; y: number }\r\n  currentPosition?: { x: number; y: number }\r\n  hoveredZone?: DropZone\r\n  validZones: DropZone[]\r\n}\r\n\r\n/**\r\n * 効率的なドロップゾーン管理システム\r\n */\r\nexport class DropZoneManager {\r\n  private zones: Map<string, DropZone> = new Map()\r\n  private scene: Phaser.Scene\r\n  private dragState: DragState = {\r\n    isDragging: false,\r\n    validZones: []\r\n  }\r\n  private lastFrameTime = 0\r\n  private readonly FRAME_INTERVAL = 16 // 60fps\r\n\r\n  constructor(scene: Phaser.Scene) {\r\n    this.scene = scene\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンを追加\r\n   */\r\n  addZone(zone: DropZone): void {\r\n    this.zones.set(zone.id, zone)\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンを削除\r\n   */\r\n  removeZone(zoneId: string): void {\r\n    this.zones.delete(zoneId)\r\n  }\r\n\r\n  /**\r\n   * ドラッグ開始\r\n   */\r\n  startDrag(card: Card, game: Game, position: { x: number; y: number }): void {\r\n    this.dragState = {\r\n      isDragging: true,\r\n      card,\r\n      startPosition: { ...position },\r\n      currentPosition: { ...position },\r\n      validZones: this.getValidZones(card, game),\r\n      hoveredZone: undefined\r\n    }\r\n\r\n    // 有効なドロップゾーンをハイライト\r\n    this.highlightValidZones()\r\n  }\r\n\r\n  /**\r\n   * ドラッグ更新（フレームレート制御付き）\r\n   */\r\n  updateDrag(position: { x: number; y: number }, game: Game): void {\r\n    if (!this.dragState.isDragging || !this.dragState.card) return\r\n\r\n    const currentTime = Date.now()\r\n    if (currentTime - this.lastFrameTime < this.FRAME_INTERVAL) return\r\n    this.lastFrameTime = currentTime\r\n\r\n    this.dragState.currentPosition = { ...position }\r\n\r\n    // ホバーゾーンの更新\r\n    const newHoveredZone = this.getZoneAtPosition(position.x, position.y)\r\n    if (newHoveredZone !== this.dragState.hoveredZone) {\r\n      this.updateHoverState(newHoveredZone, game)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドラッグ終了とドロップ処理\r\n   */\r\n  endDrag(position: { x: number; y: number }, game: Game): DropResult {\r\n    if (!this.dragState.isDragging || !this.dragState.card) {\r\n      return { success: false, error: 'No active drag operation' }\r\n    }\r\n\r\n    const dropZone = this.getZoneAtPosition(position.x, position.y)\r\n    let result: DropResult\r\n\r\n    if (dropZone && this.isValidDrop(this.dragState.card, dropZone, game)) {\r\n      try {\r\n        dropZone.onDrop(this.dragState.card, game)\r\n        result = { success: true, zone: dropZone }\r\n      } catch (error) {\r\n        result = { \r\n          success: false, \r\n          error: `Drop action failed: ${error instanceof Error ? error.message : 'Unknown error'}` \r\n        }\r\n      }\r\n    } else {\r\n      result = { \r\n        success: false, \r\n        error: dropZone ? 'Invalid drop target' : 'No drop zone found' \r\n      }\r\n    }\r\n\r\n    // クリーンアップ\r\n    this.clearHighlights()\r\n    this.dragState = {\r\n      isDragging: false,\r\n      validZones: []\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * 位置からドロップゾーンを取得（優先度順）\r\n   */\r\n  private getZoneAtPosition(x: number, y: number): DropZone | undefined {\r\n    const candidateZones = Array.from(this.zones.values())\r\n      .filter(zone => zone.bounds.contains(x, y))\r\n      .sort((a, b) => b.priority - a.priority)\r\n\r\n    return candidateZones[0]\r\n  }\r\n\r\n  /**\r\n   * 有効なドロップゾーンを取得\r\n   */\r\n  private getValidZones(card: Card, game: Game): DropZone[] {\r\n    return Array.from(this.zones.values())\r\n      .filter(zone => {\r\n        try {\r\n          return zone.isValid(card, game)\r\n        } catch (error) {\r\n          console.warn(`Validation error for zone ${zone.id}:`, error)\r\n          return false\r\n        }\r\n      })\r\n  }\r\n\r\n  /**\r\n   * ドロップが有効かチェック\r\n   */\r\n  private isValidDrop(card: Card, zone: DropZone, game: Game): boolean {\r\n    try {\r\n      return this.dragState.validZones.includes(zone) && zone.isValid(card, game)\r\n    } catch (error) {\r\n      console.warn(`Validation error for zone ${zone.id}:`, error)\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 有効なゾーンをハイライト\r\n   */\r\n  private highlightValidZones(): void {\r\n    this.dragState.validZones.forEach(zone => {\r\n      const graphics = this.scene.add.graphics()\r\n      graphics.fillStyle(zone.visualStyle?.validColor || 0x00ff00, 0.3)\r\n      graphics.fillRectShape(zone.bounds)\r\n      graphics.lineStyle(2, zone.visualStyle?.validColor || 0x00ff00, 0.8)\r\n      graphics.strokeRectShape(zone.bounds)\r\n      graphics.setName(`highlight-${zone.id}`)\r\n\r\n      // パルスアニメーション\r\n      this.scene.tweens.add({\r\n        targets: graphics,\r\n        alpha: 0.5,\r\n        duration: 1000,\r\n        yoyo: true,\r\n        repeat: -1,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ホバー状態を更新\r\n   */\r\n  private updateHoverState(newHoveredZone: DropZone | undefined, game: Game): void {\r\n    // 前のホバー状態をクリア\r\n    if (this.dragState.hoveredZone) {\r\n      const oldGraphics = this.scene.children.getByName(`hover-${this.dragState.hoveredZone.id}`)\r\n      if (oldGraphics) {\r\n        oldGraphics.destroy()\r\n      }\r\n    }\r\n\r\n    this.dragState.hoveredZone = newHoveredZone\r\n\r\n    // 新しいホバー状態を表示\r\n    if (newHoveredZone && this.dragState.card) {\r\n      const isValid = this.isValidDrop(this.dragState.card, newHoveredZone, game)\r\n      const color = isValid \r\n        ? (newHoveredZone.visualStyle?.hoverColor || 0x00ff88)\r\n        : (newHoveredZone.visualStyle?.invalidColor || 0xff0000)\r\n\r\n      const graphics = this.scene.add.graphics()\r\n      graphics.fillStyle(color, 0.5)\r\n      graphics.fillRectShape(newHoveredZone.bounds)\r\n      graphics.lineStyle(3, color, 1.0)\r\n      graphics.strokeRectShape(newHoveredZone.bounds)\r\n      graphics.setName(`hover-${newHoveredZone.id}`)\r\n\r\n      // ホバーアニメーション\r\n      graphics.setScale(0.9)\r\n      this.scene.tweens.add({\r\n        targets: graphics,\r\n        scaleX: 1.05,\r\n        scaleY: 1.05,\r\n        duration: 200,\r\n        ease: 'Back.out'\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * すべてのハイライトをクリア\r\n   */\r\n  private clearHighlights(): void {\r\n    this.zones.forEach(zone => {\r\n      const highlight = this.scene.children.getByName(`highlight-${zone.id}`)\r\n      const hover = this.scene.children.getByName(`hover-${zone.id}`)\r\n      \r\n      if (highlight) {\r\n        this.scene.tweens.add({\r\n          targets: highlight,\r\n          alpha: 0,\r\n          duration: 200,\r\n          onComplete: () => highlight.destroy()\r\n        })\r\n      }\r\n      \r\n      if (hover) {\r\n        hover.destroy()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * マグネティックスナップの距離チェック\r\n   */\r\n  getMagneticSnapTarget(position: { x: number; y: number }): { zone: DropZone; snapPosition: { x: number; y: number } } | null {\r\n    if (!this.dragState.card) return null\r\n\r\n    for (const zone of this.dragState.validZones) {\r\n      const distance = zone.magneticDistance || 100\r\n      const centerX = zone.bounds.x + zone.bounds.width / 2\r\n      const centerY = zone.bounds.y + zone.bounds.height / 2\r\n      \r\n      const dx = position.x - centerX\r\n      const dy = position.y - centerY\r\n      const distanceToCenter = Math.sqrt(dx * dx + dy * dy)\r\n\r\n      if (distanceToCenter <= distance) {\r\n        return {\r\n          zone,\r\n          snapPosition: { x: centerX, y: centerY }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 現在のドラッグ状態を取得\r\n   */\r\n  getDragState(): Readonly<DragState> {\r\n    return { ...this.dragState }\r\n  }\r\n\r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  destroy(): void {\r\n    this.clearHighlights()\r\n    this.zones.clear()\r\n    this.dragState = {\r\n      isDragging: false,\r\n      validZones: []\r\n    }\r\n  }\r\n}","import type { Card } from '@/domain/entities/Card'\r\nimport type { Game } from '@/domain/entities/Game'\r\nimport type { CardType } from '@/domain/types/card.types'\r\n\r\n/**\r\n * バリデーター関数の型定義\r\n */\r\nexport type DropZoneValidator = (card: Card, game: Game) => boolean\r\n\r\n/**\r\n * アクション関数の型定義\r\n */\r\nexport type DropZoneAction = (card: Card, game: Game) => void\r\n\r\n/**\r\n * ドロップゾーンバリデーターのユーティリティクラス\r\n */\r\nexport class DropZoneValidators {\r\n  /**\r\n   * カードタイプのみを許可するバリデーター\r\n   */\r\n  static cardTypeOnly(allowedTypes: CardType[]): DropZoneValidator {\r\n    return (card: Card) => allowedTypes.includes(card.type)\r\n  }\r\n\r\n  /**\r\n   * 特定の段階でのみ許可するバリデーター\r\n   */\r\n  static phaseOnly(allowedPhases: string[]): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      const currentPhase = game.getCurrentPhase?.() || 'unknown'\r\n      return allowedPhases.includes(currentPhase)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 最小パワー要件のバリデーター\r\n   */\r\n  static minimumPower(minPower: number): DropZoneValidator {\r\n    return (card: Card) => card.power >= minPower\r\n  }\r\n\r\n  /**\r\n   * 最大パワー制限のバリデーター\r\n   */\r\n  static maximumPower(maxPower: number): DropZoneValidator {\r\n    return (card: Card) => card.power <= maxPower\r\n  }\r\n\r\n  /**\r\n   * コスト制限のバリデーター\r\n   */\r\n  static costLimit(maxCost: number): DropZoneValidator {\r\n    return (card: Card) => card.cost <= maxCost\r\n  }\r\n\r\n  /**\r\n   * 現在の活力チェックのバリデーター\r\n   */\r\n  static vitalityCheck(requiredVitality: number): DropZoneValidator {\r\n    return (card: Card, game: Game) => game.vitality >= requiredVitality\r\n  }\r\n\r\n  /**\r\n   * チャレンジ中でないことをチェック\r\n   */\r\n  static notInChallenge(): DropZoneValidator {\r\n    return (card: Card, game: Game) => !game.currentChallenge\r\n  }\r\n\r\n  /**\r\n   * チャレンジ中であることをチェック\r\n   */\r\n  static inChallenge(): DropZoneValidator {\r\n    return (card: Card, game: Game) => !!game.currentChallenge\r\n  }\r\n\r\n  /**\r\n   * 手札に余裕があることをチェック\r\n   */\r\n  static handSpaceAvailable(): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      // 手札が存在しない場合はfalseを返す\r\n      if (!game.playerHand) {\r\n        return false\r\n      }\r\n      const currentHandSize = game.playerHand.size()\r\n      const maxHandSize = game.maxHandSize || 7\r\n      return currentHandSize < maxHandSize\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードが手札にあることをチェック\r\n   */\r\n  static cardInHand(): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      return game.playerHand?.contains(card.id) || false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ステージ制限のバリデーター\r\n   */\r\n  static stageOnly(allowedStages: number[]): DropZoneValidator {\r\n    return (card: Card, game: Game) => allowedStages.includes(game.stage)\r\n  }\r\n\r\n  /**\r\n   * 年齢制限のバリデーター\r\n   */\r\n  static ageRange(minAge: number, maxAge: number): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      const age = game.getPlayerAge?.() || 20\r\n      return age >= minAge && age <= maxAge\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カスタムバリデーター\r\n   */\r\n  static custom(validator: DropZoneValidator): DropZoneValidator {\r\n    return validator\r\n  }\r\n\r\n  /**\r\n   * 複数のバリデーターを組み合わせる（AND条件）\r\n   */\r\n  static combine(...validators: DropZoneValidator[]): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      return validators.every(validator => validator(card, game))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 複数のバリデーターのいずれかを満たす（OR条件）\r\n   */\r\n  static either(...validators: DropZoneValidator[]): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      return validators.some(validator => validator(card, game))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * バリデーターを否定する（NOT条件）\r\n   */\r\n  static not(validator: DropZoneValidator): DropZoneValidator {\r\n    return (card: Card, game: Game) => !validator(card, game)\r\n  }\r\n\r\n  /**\r\n   * 条件付きバリデーター\r\n   */\r\n  static conditional(\r\n    condition: DropZoneValidator,\r\n    thenValidator: DropZoneValidator,\r\n    elseValidator?: DropZoneValidator\r\n  ): DropZoneValidator {\r\n    return (card: Card, game: Game) => {\r\n      if (condition(card, game)) {\r\n        return thenValidator(card, game)\r\n      } else if (elseValidator) {\r\n        return elseValidator(card, game)\r\n      }\r\n      return true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 常に許可\r\n   */\r\n  static always(): DropZoneValidator {\r\n    return () => true\r\n  }\r\n\r\n  /**\r\n   * 常に拒否\r\n   */\r\n  static never(): DropZoneValidator {\r\n    return () => false\r\n  }\r\n}\r\n\r\n/**\r\n * ドロップゾーンアクションのユーティリティクラス\r\n */\r\nexport class DropZoneActions {\r\n  /**\r\n   * チャレンジを開始するアクション\r\n   */\r\n  static startChallenge(): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (!game.currentChallenge) {\r\n        game.startChallenge(card)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードを捨て札に送るアクション\r\n   */\r\n  static discardCard(): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (!card || !game) {\r\n        console.warn('[DropZoneActions] discardCard: card or game is null')\r\n        return\r\n      }\r\n      game.playerHand?.removeCard(card.id)\r\n      game.discardPile?.addCard(card)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードをデッキに戻すアクション\r\n   */\r\n  static returnToDeck(shuffle = false): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (!card || !game) {\r\n        console.warn('[DropZoneActions] returnToDeck: card or game is null')\r\n        return\r\n      }\r\n      game.playerHand?.removeCard(card.id)\r\n      game.playerDeck?.addCard(card)\r\n      if (shuffle) {\r\n        game.playerDeck?.shuffle()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 活力を消費するアクション\r\n   */\r\n  static consumeVitality(amount: number): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      game.vitality = Math.max(0, game.vitality - amount)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 活力を回復するアクション\r\n   */\r\n  static restoreVitality(amount: number): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      const maxVitality = game.maxVitality || 20\r\n      game.vitality = Math.min(maxVitality, game.vitality + amount)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードをプレイするアクション\r\n   */\r\n  static playCard(): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (!card || !game) {\r\n        console.warn('[DropZoneActions] playCard: card or game is null')\r\n        return\r\n      }\r\n      \r\n      // カードの効果を適用\r\n      if (card.type === 'life' && card.power > 0) {\r\n        game.vitality = Math.min(game.maxVitality || 20, game.vitality + card.power)\r\n      }\r\n      \r\n      // 手札から削除\r\n      game.playerHand?.removeCard(card.id)\r\n      \r\n      // プレイエリアに追加（実装によって異なる）\r\n      game.playedCards?.addCard(card)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 特殊効果を発動するアクション\r\n   */\r\n  static triggerSpecialEffect(effectName: string): DropZoneAction {\r\n    return (card: Card, _game: Game) => {\r\n      // 特殊効果の実装（ゲーム固有）\r\n      if (import.meta.env.DEV) console.log(`Triggering special effect: ${effectName} for card ${card.name}`)\r\n      \r\n      // 例：保険カードの効果\r\n      if (card.type === 'insurance') {\r\n        // 保険効果の適用ロジック\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ログを出力するアクション\r\n   */\r\n  static log(message: string): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (import.meta.env.DEV) console.log(`[DropZone] ${message}`, { card: card.name, gameState: game.stage })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 複数のアクションを順次実行\r\n   */\r\n  static sequence(...actions: DropZoneAction[]): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      actions.forEach(action => action(card, game))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 条件付きアクション\r\n   */\r\n  static conditional(\r\n    condition: DropZoneValidator,\r\n    thenAction: DropZoneAction,\r\n    elseAction?: DropZoneAction\r\n  ): DropZoneAction {\r\n    return (card: Card, game: Game) => {\r\n      if (condition(card, game)) {\r\n        thenAction(card, game)\r\n      } else if (elseAction) {\r\n        elseAction(card, game)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カスタムアクション\r\n   */\r\n  static custom(action: DropZoneAction): DropZoneAction {\r\n    return action\r\n  }\r\n\r\n  /**\r\n   * 何もしないアクション\r\n   */\r\n  static noop(): DropZoneAction {\r\n    return () => {}\r\n  }\r\n\r\n  /**\r\n   * エラーをスローするアクション（デバッグ用）\r\n   */\r\n  static throwError(message: string): DropZoneAction {\r\n    return () => {\r\n      throw new Error(message)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * よく使用されるバリデーター・アクションの組み合わせ\r\n */\r\nexport class DropZonePresets {\r\n  /**\r\n   * チャレンジゾーンの設定\r\n   */\r\n  static challengeZone() {\r\n    return {\r\n      validator: DropZoneValidators.combine(\r\n        DropZoneValidators.cardTypeOnly(['life']),\r\n        DropZoneValidators.notInChallenge(),\r\n        DropZoneValidators.cardInHand()\r\n      ),\r\n      action: DropZoneActions.sequence(\r\n        DropZoneActions.log('Starting challenge'),\r\n        DropZoneActions.startChallenge()\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 捨て札ゾーンの設定\r\n   */\r\n  static discardZone() {\r\n    return {\r\n      validator: DropZoneValidators.combine(\r\n        DropZoneValidators.cardInHand(),\r\n        DropZoneValidators.not(DropZoneValidators.inChallenge())\r\n      ),\r\n      action: DropZoneActions.sequence(\r\n        DropZoneActions.log('Discarding card'),\r\n        DropZoneActions.discardCard()\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 保険プレイゾーンの設定\r\n   */\r\n  static insurancePlayZone() {\r\n    return {\r\n      validator: DropZoneValidators.combine(\r\n        DropZoneValidators.cardTypeOnly(['insurance']),\r\n        DropZoneValidators.cardInHand(),\r\n        DropZoneValidators.vitalityCheck(1)\r\n      ),\r\n      action: DropZoneActions.sequence(\r\n        DropZoneActions.log('Playing insurance card'),\r\n        DropZoneActions.playCard(),\r\n        DropZoneActions.consumeVitality(1)\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 特殊能力ゾーンの設定\r\n   */\r\n  static specialAbilityZone(requiredCardType: CardType, vitalityCost: number) {\r\n    return {\r\n      validator: DropZoneValidators.combine(\r\n        DropZoneValidators.cardTypeOnly([requiredCardType]),\r\n        DropZoneValidators.vitalityCheck(vitalityCost),\r\n        DropZoneValidators.cardInHand()\r\n      ),\r\n      action: DropZoneActions.sequence(\r\n        DropZoneActions.log(`Using special ability (cost: ${vitalityCost})`),\r\n        DropZoneActions.consumeVitality(vitalityCost),\r\n        DropZoneActions.triggerSpecialEffect('special-ability'),\r\n        DropZoneActions.discardCard()\r\n      )\r\n    }\r\n  }\r\n}","import { DropZoneManager, type DropZone, type DropResult } from './DropZoneManager'\r\nimport { DropZonePresets } from './DropZoneValidators'\r\nimport type { Game } from '@/domain/entities/Game'\r\nimport type { Card } from '@/domain/entities/Card'\r\nimport { GAME_CONSTANTS } from '../config/gameConfig'\r\n\r\n/**\r\n * モバイルデバイス検出結果\r\n */\r\ninterface DeviceInfo {\r\n  isMobile: boolean\r\n  isTablet: boolean\r\n  hasTouch: boolean\r\n  orientation: 'portrait' | 'landscape'\r\n}\r\n\r\n/**\r\n * ドラッグ設定\r\n */\r\ninterface DragConfig {\r\n  snapDistance: number\r\n  touchOffset: { x: number; y: number }\r\n  animationDuration: number\r\n  throttleInterval: number\r\n}\r\n\r\n/**\r\n * 既存GameSceneとドロップゾーンシステムの統合クラス\r\n */\r\nexport class DropZoneIntegration {\r\n  private dropZoneManager: DropZoneManager\r\n  private scene: Phaser.Scene\r\n  private game: Game\r\n  private deviceInfo: DeviceInfo\r\n  private dragConfig: DragConfig\r\n  \r\n  // ドラッグ関連\r\n  private draggedCard?: Phaser.GameObjects.Container\r\n  private dragStartPosition = { x: 0, y: 0 }\r\n  private isSnapping = false\r\n  \r\n  // パフォーマンス最適化\r\n  private lastUpdateTime = 0\r\n  private readonly UPDATE_THROTTLE = 16 // 60fps相当\r\n  private particlePool: Phaser.GameObjects.Graphics[] = []\r\n  private trailPool: Phaser.GameObjects.Graphics[] = []\r\n\r\n  constructor(scene: Phaser.Scene, game: Game) {\r\n    this.scene = scene\r\n    this.game = game\r\n    this.dropZoneManager = new DropZoneManager(scene)\r\n    this.deviceInfo = this.detectDevice()\r\n    this.dragConfig = this.createDragConfig()\r\n    \r\n    this.initializeDefaultZones()\r\n  }\r\n\r\n  /**\r\n   * デバイス情報を検出\r\n   */\r\n  private detectDevice(): DeviceInfo {\r\n    const isMobile = this.scene.sys.game.device.os.android || this.scene.sys.game.device.os.iOS\r\n    const isTablet = isMobile && Math.min(window.innerWidth, window.innerHeight) >= 768\r\n    const hasTouch = this.scene.sys.game.device.input.touch\r\n    const orientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'\r\n\r\n    return { isMobile, isTablet, hasTouch, orientation }\r\n  }\r\n\r\n  /**\r\n   * ドラッグ設定を作成\r\n   */\r\n  private createDragConfig(): DragConfig {\r\n    return {\r\n      snapDistance: this.deviceInfo.isMobile ? 120 : 100,\r\n      touchOffset: this.deviceInfo.isMobile ? { x: 0, y: -60 } : { x: 0, y: 0 },\r\n      animationDuration: this.deviceInfo.isMobile ? 400 : 300,\r\n      throttleInterval: this.deviceInfo.isMobile ? 20 : 16\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デフォルトのドロップゾーンを初期化\r\n   */\r\n  private initializeDefaultZones(): void {\r\n    // チャレンジゾーン\r\n    const challengePreset = DropZonePresets.challengeZone()\r\n    const challengeZone: DropZone = {\r\n      id: 'challenge',\r\n      type: 'challenge',\r\n      bounds: new Phaser.Geom.Rectangle(\r\n        this.scene.cameras.main.centerX - GAME_CONSTANTS.CARD_WIDTH / 2,\r\n        GAME_CONSTANTS.CHALLENGE_Y_POSITION - GAME_CONSTANTS.CARD_HEIGHT / 2,\r\n        GAME_CONSTANTS.CARD_WIDTH,\r\n        GAME_CONSTANTS.CARD_HEIGHT\r\n      ),\r\n      isValid: challengePreset.validator,\r\n      onDrop: (card: Card, game: Game) => {\r\n        this.handleChallengeDrop(card)\r\n        challengePreset.action(card, game)\r\n      },\r\n      priority: 10,\r\n      magneticDistance: this.dragConfig.snapDistance,\r\n      visualStyle: {\r\n        validColor: 0x10B981,\r\n        invalidColor: 0xEF4444,\r\n        hoverColor: 0x059669\r\n      }\r\n    }\r\n\r\n    // 捨て札ゾーン\r\n    const discardPreset = DropZonePresets.discardZone()\r\n    const discardZone: DropZone = {\r\n      id: 'discard',\r\n      type: 'discard',\r\n      bounds: new Phaser.Geom.Rectangle(\r\n        GAME_CONSTANTS.DISCARD_X_POSITION - GAME_CONSTANTS.CARD_WIDTH / 2,\r\n        GAME_CONSTANTS.DISCARD_Y_POSITION - GAME_CONSTANTS.CARD_HEIGHT / 2,\r\n        GAME_CONSTANTS.CARD_WIDTH,\r\n        GAME_CONSTANTS.CARD_HEIGHT\r\n      ),\r\n      isValid: discardPreset.validator,\r\n      onDrop: (card: Card, game: Game) => {\r\n        this.handleDiscardDrop(card)\r\n        discardPreset.action(card, game)\r\n      },\r\n      priority: 5,\r\n      magneticDistance: this.dragConfig.snapDistance,\r\n      visualStyle: {\r\n        validColor: 0x6B7280,\r\n        invalidColor: 0xEF4444,\r\n        hoverColor: 0x4B5563\r\n      }\r\n    }\r\n\r\n    this.dropZoneManager.addZone(challengeZone)\r\n    this.dropZoneManager.addZone(discardZone)\r\n  }\r\n\r\n  /**\r\n   * カードにドラッグ機能を追加\r\n   */\r\n  setupCardDragAndDrop(cardContainer: Phaser.GameObjects.Container): void {\r\n    const card = cardContainer.getData('card') as Card\r\n\r\n    // ドラッグ開始\r\n    cardContainer.on('dragstart', (pointer: Phaser.Input.Pointer) => {\r\n      this.startDrag(cardContainer, pointer, card)\r\n    })\r\n\r\n    // ドラッグ中\r\n    cardContainer.on('drag', (pointer: Phaser.Input.Pointer, dragX: number, dragY: number) => {\r\n      this.updateDrag(cardContainer, pointer, dragX, dragY)\r\n    })\r\n\r\n    // ドラッグ終了\r\n    cardContainer.on('dragend', (pointer: Phaser.Input.Pointer) => {\r\n      this.endDrag(cardContainer, pointer, card)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ドラッグ開始処理\r\n   */\r\n  private startDrag(\r\n    cardContainer: Phaser.GameObjects.Container, \r\n    pointer: Phaser.Input.Pointer, \r\n    card: Card\r\n  ): void {\r\n    // null pointer チェック\r\n    if (!pointer || !cardContainer || !card) {\r\n      console.warn('[DropZoneIntegration] startDrag: invalid parameters')\r\n      return\r\n    }\r\n    \r\n    this.draggedCard = cardContainer\r\n    this.dragStartPosition = { x: cardContainer.x, y: cardContainer.y }\r\n\r\n    // デバイス情報を考慮した位置調整\r\n    const adjustedPosition = {\r\n      x: pointer.x + this.dragConfig.touchOffset.x,\r\n      y: pointer.y + this.dragConfig.touchOffset.y\r\n    }\r\n\r\n    // ドロップゾーンシステムにドラッグ開始を通知\r\n    this.dropZoneManager.startDrag(card, this.game, adjustedPosition)\r\n\r\n    // 視覚エフェクト\r\n    cardContainer.setDepth(1000)\r\n    cardContainer.setAlpha(0.8)\r\n    cardContainer.setScale(1.15)\r\n\r\n    // ドラッグトレイル作成\r\n    this.createDragTrail(cardContainer)\r\n\r\n    // モバイルデバイスでの振動フィードバック\r\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\r\n      navigator.vibrate(50)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドラッグ更新処理（最適化版）\r\n   */\r\n  private updateDrag(\r\n    cardContainer: Phaser.GameObjects.Container,\r\n    pointer: Phaser.Input.Pointer,\r\n    dragX: number,\r\n    dragY: number\r\n  ): void {\r\n    // null チェック\r\n    if (!cardContainer || dragX === undefined || dragY === undefined) {\r\n      console.warn('[DropZoneIntegration] updateDrag: invalid parameters')\r\n      return\r\n    }\r\n    \r\n    // スロットリング: 60fps相当でフレームレート制限\r\n    const currentTime = Date.now()\r\n    if (currentTime - this.lastUpdateTime < this.UPDATE_THROTTLE) {\r\n      // 位置だけ更新（軽量処理）\r\n      cardContainer.x = dragX + this.dragConfig.touchOffset.x\r\n      cardContainer.y = dragY + this.dragConfig.touchOffset.y\r\n      return\r\n    }\r\n    this.lastUpdateTime = currentTime\r\n    \r\n    // デバイス情報を考慮した位置調整\r\n    const adjustedPosition = {\r\n      x: dragX + this.dragConfig.touchOffset.x,\r\n      y: dragY + this.dragConfig.touchOffset.y\r\n    }\r\n\r\n    cardContainer.x = adjustedPosition.x\r\n    cardContainer.y = adjustedPosition.y\r\n\r\n    // ドロップゾーンシステムに位置更新を通知\r\n    this.dropZoneManager.updateDrag(adjustedPosition, this.game)\r\n\r\n    // マグネティックスナップのチェック（スロットリング対象外の処理のみ）\r\n    if (!this.isSnapping) {\r\n      const snapTarget = this.dropZoneManager.getMagneticSnapTarget(adjustedPosition)\r\n      if (snapTarget) {\r\n        this.performMagneticSnap(cardContainer, snapTarget.snapPosition)\r\n      }\r\n    }\r\n\r\n    // ドラッグトレイルの更新（軽量化）\r\n    this.updateDragTrailOptimized(cardContainer)\r\n  }\r\n\r\n  /**\r\n   * ドラッグ終了処理\r\n   */\r\n  private endDrag(\r\n    cardContainer: Phaser.GameObjects.Container,\r\n    _pointer: Phaser.Input.Pointer,\r\n    _card: Card\r\n  ): void {\r\n    // null チェック\r\n    if (!cardContainer) {\r\n      console.warn('[DropZoneIntegration] endDrag: invalid cardContainer')\r\n      return\r\n    }\r\n    \r\n    const finalPosition = {\r\n      x: cardContainer.x,\r\n      y: cardContainer.y\r\n    }\r\n\r\n    // ドロップ処理\r\n    const dropResult = this.dropZoneManager.endDrag(finalPosition, this.game)\r\n    \r\n    if (dropResult.success) {\r\n      this.handleSuccessfulDrop(cardContainer, dropResult)\r\n    } else {\r\n      this.handleFailedDrop(cardContainer, dropResult)\r\n    }\r\n\r\n    // クリーンアップ\r\n    this.cleanupDrag(cardContainer)\r\n    this.draggedCard = undefined\r\n  }\r\n\r\n  /**\r\n   * マグネティックスナップの実行\r\n   */\r\n  private performMagneticSnap(\r\n    cardContainer: Phaser.GameObjects.Container,\r\n    snapPosition: { x: number; y: number }\r\n  ): void {\r\n    this.isSnapping = true\r\n\r\n    // スナップアニメーション\r\n    this.scene.tweens.add({\r\n      targets: cardContainer,\r\n      x: snapPosition.x,\r\n      y: snapPosition.y,\r\n      duration: 200,\r\n      ease: 'Back.out',\r\n      onComplete: () => {\r\n        this.isSnapping = false\r\n        \r\n        // スナップ成功のビジュアルフィードバック\r\n        this.showSnapFeedback(cardContainer)\r\n      }\r\n    })\r\n\r\n    // スナップ効果音（サウンドエフェクトが実装されている場合）\r\n    // this.scene.sound.play('snap-sound', { volume: 0.3 })\r\n  }\r\n\r\n  /**\r\n   * ドロップ成功時の処理\r\n   */\r\n  private handleSuccessfulDrop(cardContainer: Phaser.GameObjects.Container, _result: DropResult): void {\r\n    // 成功アニメーション\r\n    this.scene.tweens.add({\r\n      targets: cardContainer,\r\n      scaleX: 1.2,\r\n      scaleY: 1.2,\r\n      duration: 150,\r\n      ease: 'Back.out',\r\n      yoyo: true,\r\n      onComplete: () => {\r\n        // パーティクルエフェクト\r\n        this.createSuccessParticles(cardContainer.x, cardContainer.y)\r\n        \r\n        // カードをフェードアウト\r\n        this.scene.tweens.add({\r\n          targets: cardContainer,\r\n          alpha: 0,\r\n          scale: 0.8,\r\n          duration: this.dragConfig.animationDuration,\r\n          ease: 'Power2',\r\n          onComplete: () => {\r\n            // 手札から削除などの処理は各ドロップゾーンのアクションで実行済み\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    // モバイルでの振動フィードバック\r\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\r\n      navigator.vibrate([100, 50, 100])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドロップ失敗時の処理\r\n   */\r\n  private handleFailedDrop(cardContainer: Phaser.GameObjects.Container, result: DropResult): void {\r\n    // 元の位置に戻すアニメーション\r\n    this.scene.tweens.add({\r\n      targets: cardContainer,\r\n      x: this.dragStartPosition.x,\r\n      y: this.dragStartPosition.y,\r\n      duration: this.dragConfig.animationDuration,\r\n      ease: 'Elastic.out'\r\n    })\r\n\r\n    // 失敗の視覚フィードバック\r\n    this.showFailureFeedback(cardContainer)\r\n\r\n    // エラーメッセージの表示（オプション）\r\n    if (result.error) {\r\n      console.warn(`Drop failed: ${result.error}`)\r\n    }\r\n\r\n    // モバイルでの振動フィードバック\r\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\r\n      navigator.vibrate(200)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドラッグトレイルの作成\r\n   */\r\n  private createDragTrail(cardContainer: Phaser.GameObjects.Container): void {\r\n    const trail = this.scene.add.graphics()\r\n    trail.fillStyle(0x667eea, 0.3)\r\n    trail.fillCircle(0, 0, 15)\r\n    trail.setDepth(999)\r\n    trail.setName('drag-trail')\r\n    cardContainer.add(trail)\r\n  }\r\n\r\n  /**\r\n   * ドラッグトレイルの更新（最適化版）\r\n   */\r\n  private updateDragTrailOptimized(cardContainer: Phaser.GameObjects.Container): void {\r\n    const trail = cardContainer.getByName('drag-trail') as Phaser.GameObjects.Graphics\r\n    if (trail) {\r\n      // より高速なフェードアウト（計算量削減）\r\n      const newAlpha = trail.alpha - 0.05\r\n      if (newAlpha < 0.1) {\r\n        this.returnTrailToPool(trail)\r\n        cardContainer.remove(trail)\r\n      } else {\r\n        trail.setAlpha(newAlpha)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドラッグトレイルの更新（従来版）\r\n   */\r\n  private updateDragTrail(cardContainer: Phaser.GameObjects.Container): void {\r\n    const trail = cardContainer.getByName('drag-trail') as Phaser.GameObjects.Graphics\r\n    if (trail) {\r\n      // トレイルのフェードアウト\r\n      trail.setAlpha(trail.alpha * 0.95)\r\n      if (trail.alpha < 0.1) {\r\n        trail.destroy()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * スナップフィードバックの表示\r\n   */\r\n  private showSnapFeedback(cardContainer: Phaser.GameObjects.Container): void {\r\n    const feedback = this.scene.add.graphics()\r\n    feedback.lineStyle(3, 0x10B981, 0.8)\r\n    feedback.strokeCircle(cardContainer.x, cardContainer.y, 80)\r\n    feedback.setDepth(1001)\r\n\r\n    this.scene.tweens.add({\r\n      targets: feedback,\r\n      alpha: 0,\r\n      duration: 500,\r\n      ease: 'Power2',\r\n      onComplete: () => feedback.destroy()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 失敗フィードバックの表示\r\n   */\r\n  private showFailureFeedback(cardContainer: Phaser.GameObjects.Container): void {\r\n    // 振動アニメーション\r\n    const originalX = cardContainer.x\r\n    this.scene.tweens.add({\r\n      targets: cardContainer,\r\n      x: originalX - 10,\r\n      duration: 50,\r\n      yoyo: true,\r\n      repeat: 3,\r\n      ease: 'Power2'\r\n    })\r\n\r\n    // X印の表示\r\n    const x = this.scene.add.graphics()\r\n    x.lineStyle(4, 0xEF4444, 0.8)\r\n    x.lineBetween(-20, -20, 20, 20)\r\n    x.lineBetween(-20, 20, 20, -20)\r\n    x.setPosition(cardContainer.x, cardContainer.y)\r\n    x.setDepth(1001)\r\n\r\n    this.scene.tweens.add({\r\n      targets: x,\r\n      alpha: 0,\r\n      scale: 2,\r\n      duration: 1000,\r\n      ease: 'Power2',\r\n      onComplete: () => x.destroy()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 成功パーティクルの作成（最適化版）\r\n   */\r\n  private createSuccessParticles(x: number, y: number): void {\r\n    // オブジェクトプールを使用してパーティクル効果を最適化\r\n    for (let i = 0; i < 8; i++) {\r\n      let particle = this.particlePool.pop()\r\n      \r\n      if (!particle) {\r\n        particle = this.scene.add.graphics()\r\n      }\r\n      \r\n      particle.clear()\r\n      particle.fillStyle(0x10B981, 0.8)\r\n      particle.fillCircle(0, 0, 4)\r\n      particle.setPosition(x, y)\r\n      particle.setDepth(1002)\r\n      particle.setAlpha(0.8)\r\n      particle.setScale(1)\r\n\r\n      const angle = (i / 8) * Math.PI * 2\r\n      const distance = 100\r\n\r\n      this.scene.tweens.add({\r\n        targets: particle,\r\n        x: x + Math.cos(angle) * distance,\r\n        y: y + Math.sin(angle) * distance,\r\n        alpha: 0,\r\n        scale: 2,\r\n        duration: 800,\r\n        ease: 'Power2',\r\n        onComplete: () => {\r\n          // パーティクルをプールに戻す\r\n          this.returnParticleToPool(particle!)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パーティクルをプールに戻す\r\n   */\r\n  private returnParticleToPool(particle: Phaser.GameObjects.Graphics): void {\r\n    if (this.particlePool.length < 20) { // プールサイズ制限\r\n      particle.setVisible(false)\r\n      this.particlePool.push(particle)\r\n    } else {\r\n      particle.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * トレイルをプールに戻す\r\n   */\r\n  private returnTrailToPool(trail: Phaser.GameObjects.Graphics): void {\r\n    if (this.trailPool.length < 10) { // プールサイズ制限\r\n      trail.setVisible(false)\r\n      trail.setAlpha(1)\r\n      this.trailPool.push(trail)\r\n    } else {\r\n      trail.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドラッグのクリーンアップ\r\n   */\r\n  private cleanupDrag(cardContainer: Phaser.GameObjects.Container): void {\r\n    cardContainer.setDepth(0)\r\n    cardContainer.setAlpha(1)\r\n    cardContainer.setScale(1)\r\n\r\n    // トレイルの削除\r\n    const trail = cardContainer.getByName('drag-trail')\r\n    if (trail) {\r\n      trail.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チャレンジドロップの処理\r\n   */\r\n  private handleChallengeDrop(card: Card): void {\r\n    // 既存のGameSceneロジックとの統合\r\n    if (import.meta.env.DEV) {\r\n      console.log(`Challenge started with card: ${card.name}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 捨て札ドロップの処理\r\n   */\r\n  private handleDiscardDrop(card: Card): void {\r\n    // 既存のGameSceneロジックとの統合\r\n    if (import.meta.env.DEV) {\r\n      console.log(`Card discarded: ${card.name}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カスタムドロップゾーンを追加\r\n   */\r\n  addCustomZone(zone: DropZone): void {\r\n    this.dropZoneManager.addZone(zone)\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンを削除\r\n   */\r\n  removeZone(zoneId: string): void {\r\n    this.dropZoneManager.removeZone(zoneId)\r\n  }\r\n\r\n  /**\r\n   * パフォーマンス統計の取得\r\n   */\r\n  getPerformanceStats(): {\r\n    poolStats: {\r\n      particles: number\r\n      trails: number\r\n    }\r\n    updateFrequency: number\r\n    throttleRate: number\r\n  } {\r\n    return {\r\n      poolStats: {\r\n        particles: this.particlePool.length,\r\n        trails: this.trailPool.length\r\n      },\r\n      updateFrequency: this.UPDATE_THROTTLE,\r\n      throttleRate: this.lastUpdateTime > 0 ? 1000 / this.UPDATE_THROTTLE : 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  destroy(): void {\r\n    // プールの中身を全て破棄\r\n    this.particlePool.forEach(particle => particle.destroy())\r\n    this.trailPool.forEach(trail => trail.destroy())\r\n    \r\n    this.particlePool.length = 0\r\n    this.trailPool.length = 0\r\n    \r\n    this.dropZoneManager.destroy()\r\n  }\r\n}","/**\r\n * キーボード操作コントローラー\r\n * アクセシビリティ向上のためのキーボードナビゲーション実装\r\n */\r\nexport class KeyboardController {\r\n  private scene: Phaser.Scene\r\n  private enabled: boolean = false\r\n  \r\n  // フォーカス管理\r\n  private focusableElements: Phaser.GameObjects.GameObject[] = []\r\n  private currentFocusIndex: number = -1\r\n  private focusIndicator?: Phaser.GameObjects.Graphics\r\n  \r\n  // キーバインディング\r\n  private keyBindings = {\r\n    // ナビゲーション\r\n    TAB: 'next',\r\n    SHIFT_TAB: 'previous',\r\n    LEFT: 'left',\r\n    RIGHT: 'right',\r\n    UP: 'up',\r\n    DOWN: 'down',\r\n    \r\n    // アクション\r\n    SPACE: 'select',\r\n    ENTER: 'confirm',\r\n    ESC: 'cancel',\r\n    \r\n    // ゲーム固有\r\n    D: 'draw',\r\n    C: 'challenge',\r\n    E: 'endTurn',\r\n    \r\n    // 数字キー（カード選択）\r\n    ONE: 'card1',\r\n    TWO: 'card2',\r\n    THREE: 'card3',\r\n    FOUR: 'card4',\r\n    FIVE: 'card5',\r\n    SIX: 'card6',\r\n    SEVEN: 'card7'\r\n  }\r\n  \r\n  // コールバック\r\n  private callbacks: Map<string, () => void> = new Map()\r\n  \r\n  constructor(scene: Phaser.Scene) {\r\n    this.scene = scene\r\n    this.setupKeyboardListeners()\r\n    this.createFocusIndicator()\r\n  }\r\n  \r\n  /**\r\n   * キーボードコントローラーを有効化\r\n   */\r\n  enable(): void {\r\n    this.enabled = true\r\n    this.showAccessibilityHint()\r\n  }\r\n  \r\n  /**\r\n   * キーボードコントローラーを無効化\r\n   */\r\n  disable(): void {\r\n    this.enabled = false\r\n    this.clearFocus()\r\n  }\r\n  \r\n  /**\r\n   * フォーカス可能な要素を登録\r\n   */\r\n  registerFocusableElement(element: Phaser.GameObjects.GameObject, callback?: () => void): void {\r\n    this.focusableElements.push(element)\r\n    \r\n    // 要素にインデックスを保存\r\n    element.setData('focusIndex', this.focusableElements.length - 1)\r\n    \r\n    // コールバックがあれば登録\r\n    if (callback) {\r\n      this.callbacks.set(`element_${this.focusableElements.length - 1}`, callback)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * フォーカス可能な要素を解除\r\n   */\r\n  unregisterFocusableElement(element: Phaser.GameObjects.GameObject): void {\r\n    const index = this.focusableElements.indexOf(element)\r\n    if (index > -1) {\r\n      this.focusableElements.splice(index, 1)\r\n      this.callbacks.delete(`element_${index}`)\r\n      \r\n      // フォーカスインデックスを調整\r\n      if (this.currentFocusIndex >= index) {\r\n        this.currentFocusIndex--\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * アクションコールバックを登録\r\n   */\r\n  registerActionCallback(action: string, callback: () => void): void {\r\n    this.callbacks.set(action, callback)\r\n  }\r\n  \r\n  /**\r\n   * キーボードリスナーをセットアップ\r\n   */\r\n  private setupKeyboardListeners(): void {\r\n    const keyboard = this.scene.input.keyboard\r\n    if (!keyboard) return\r\n    \r\n    // TABキー（次の要素へ）\r\n    keyboard.on('keydown-TAB', (event: KeyboardEvent) => {\r\n      if (!this.enabled) return\r\n      event.preventDefault()\r\n      \r\n      if (event.shiftKey) {\r\n        this.focusPrevious()\r\n      } else {\r\n        this.focusNext()\r\n      }\r\n    })\r\n    \r\n    // 矢印キー\r\n    keyboard.on('keydown-LEFT', () => this.handleArrowKey('left'))\r\n    keyboard.on('keydown-RIGHT', () => this.handleArrowKey('right'))\r\n    keyboard.on('keydown-UP', () => this.handleArrowKey('up'))\r\n    keyboard.on('keydown-DOWN', () => this.handleArrowKey('down'))\r\n    \r\n    // アクションキー\r\n    keyboard.on('keydown-SPACE', (event: KeyboardEvent) => {\r\n      if (!this.enabled) return\r\n      event.preventDefault()\r\n      this.handleAction('select')\r\n    })\r\n    \r\n    keyboard.on('keydown-ENTER', () => {\r\n      if (!this.enabled) return\r\n      this.handleAction('confirm')\r\n    })\r\n    \r\n    keyboard.on('keydown-ESC', () => {\r\n      if (!this.enabled) return\r\n      this.handleAction('cancel')\r\n    })\r\n    \r\n    // ゲーム固有キー\r\n    keyboard.on('keydown-D', () => {\r\n      if (!this.enabled) return\r\n      this.handleAction('draw')\r\n    })\r\n    \r\n    keyboard.on('keydown-C', () => {\r\n      if (!this.enabled) return\r\n      this.handleAction('challenge')\r\n    })\r\n    \r\n    keyboard.on('keydown-E', () => {\r\n      if (!this.enabled) return\r\n      this.handleAction('endTurn')\r\n    })\r\n    \r\n    // 数字キー（1-7）\r\n    for (let i = 1; i <= 7; i++) {\r\n      keyboard.on(`keydown-${['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN'][i - 1]}`, () => {\r\n        if (!this.enabled) return\r\n        this.handleAction(`card${i}`)\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * フォーカスインジケーターを作成\r\n   */\r\n  private createFocusIndicator(): void {\r\n    this.focusIndicator = this.scene.add.graphics()\r\n    this.focusIndicator.setDepth(10000)\r\n    this.focusIndicator.setVisible(false)\r\n  }\r\n  \r\n  /**\r\n   * 次の要素にフォーカス\r\n   */\r\n  private focusNext(): void {\r\n    if (this.focusableElements.length === 0) return\r\n    \r\n    this.currentFocusIndex++\r\n    if (this.currentFocusIndex >= this.focusableElements.length) {\r\n      this.currentFocusIndex = 0\r\n    }\r\n    \r\n    this.updateFocusIndicator()\r\n  }\r\n  \r\n  /**\r\n   * 前の要素にフォーカス\r\n   */\r\n  private focusPrevious(): void {\r\n    if (this.focusableElements.length === 0) return\r\n    \r\n    this.currentFocusIndex--\r\n    if (this.currentFocusIndex < 0) {\r\n      this.currentFocusIndex = this.focusableElements.length - 1\r\n    }\r\n    \r\n    this.updateFocusIndicator()\r\n  }\r\n  \r\n  /**\r\n   * 矢印キーの処理\r\n   */\r\n  private handleArrowKey(direction: string): void {\r\n    if (!this.enabled) return\r\n    \r\n    // 現在フォーカスされている要素に応じて処理\r\n    const currentElement = this.getCurrentFocusedElement()\r\n    if (!currentElement) {\r\n      // フォーカスがない場合は最初の要素にフォーカス\r\n      this.currentFocusIndex = 0\r\n      this.updateFocusIndicator()\r\n      return\r\n    }\r\n    \r\n    // 方向に応じて最も近い要素を見つける\r\n    const nearestIndex = this.findNearestElement(currentElement, direction)\r\n    if (nearestIndex !== -1) {\r\n      this.currentFocusIndex = nearestIndex\r\n      this.updateFocusIndicator()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * アクションを処理\r\n   */\r\n  private handleAction(action: string): void {\r\n    // アクション固有のコールバックを実行\r\n    const actionCallback = this.callbacks.get(action)\r\n    if (actionCallback) {\r\n      actionCallback()\r\n      return\r\n    }\r\n    \r\n    // 現在フォーカスされている要素のコールバックを実行\r\n    if (action === 'select' || action === 'confirm') {\r\n      const element = this.getCurrentFocusedElement()\r\n      if (element) {\r\n        const elementCallback = this.callbacks.get(`element_${this.currentFocusIndex}`)\r\n        if (elementCallback) {\r\n          elementCallback()\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * フォーカスインジケーターを更新\r\n   */\r\n  private updateFocusIndicator(): void {\r\n    if (!this.focusIndicator) return\r\n    \r\n    const element = this.getCurrentFocusedElement()\r\n    if (!element) {\r\n      this.focusIndicator.setVisible(false)\r\n      return\r\n    }\r\n    \r\n    // 要素の境界を取得\r\n    const bounds = this.getElementBounds(element)\r\n    if (!bounds) return\r\n    \r\n    // フォーカスインジケーターを描画\r\n    this.focusIndicator.clear()\r\n    this.focusIndicator.lineStyle(3, 0xffff00, 1)\r\n    this.focusIndicator.strokeRoundedRect(\r\n      bounds.x - 5,\r\n      bounds.y - 5,\r\n      bounds.width + 10,\r\n      bounds.height + 10,\r\n      5\r\n    )\r\n    this.focusIndicator.setVisible(true)\r\n    \r\n    // パルスアニメーション\r\n    this.scene.tweens.add({\r\n      targets: this.focusIndicator,\r\n      alpha: { from: 1, to: 0.5 },\r\n      duration: 500,\r\n      yoyo: true,\r\n      repeat: -1\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 現在フォーカスされている要素を取得\r\n   */\r\n  private getCurrentFocusedElement(): Phaser.GameObjects.GameObject | null {\r\n    if (this.currentFocusIndex < 0 || this.currentFocusIndex >= this.focusableElements.length) {\r\n      return null\r\n    }\r\n    return this.focusableElements[this.currentFocusIndex]\r\n  }\r\n  \r\n  /**\r\n   * 要素の境界を取得\r\n   */\r\n  private getElementBounds(element: Phaser.GameObjects.GameObject): { x: number, y: number, width: number, height: number } | null {\r\n    if ('getBounds' in element) {\r\n      const bounds = (element as any).getBounds()\r\n      return {\r\n        x: bounds.x,\r\n        y: bounds.y,\r\n        width: bounds.width,\r\n        height: bounds.height\r\n      }\r\n    }\r\n    \r\n    // Containerの場合\r\n    if (element instanceof Phaser.GameObjects.Container) {\r\n      const bounds = element.getBounds()\r\n      return {\r\n        x: bounds.x,\r\n        y: bounds.y,\r\n        width: bounds.width,\r\n        height: bounds.height\r\n      }\r\n    }\r\n    \r\n    return null\r\n  }\r\n  \r\n  /**\r\n   * 指定方向の最も近い要素を見つける\r\n   */\r\n  private findNearestElement(currentElement: Phaser.GameObjects.GameObject, direction: string): number {\r\n    const currentBounds = this.getElementBounds(currentElement)\r\n    if (!currentBounds) return -1\r\n    \r\n    let nearestIndex = -1\r\n    let nearestDistance = Infinity\r\n    \r\n    for (let i = 0; i < this.focusableElements.length; i++) {\r\n      if (i === this.currentFocusIndex) continue\r\n      \r\n      const element = this.focusableElements[i]\r\n      const bounds = this.getElementBounds(element)\r\n      if (!bounds) continue\r\n      \r\n      // 方向に応じた判定\r\n      let isInDirection = false\r\n      let distance = 0\r\n      \r\n      switch (direction) {\r\n        case 'left':\r\n          isInDirection = bounds.x + bounds.width < currentBounds.x\r\n          distance = currentBounds.x - (bounds.x + bounds.width)\r\n          break\r\n        case 'right':\r\n          isInDirection = bounds.x > currentBounds.x + currentBounds.width\r\n          distance = bounds.x - (currentBounds.x + currentBounds.width)\r\n          break\r\n        case 'up':\r\n          isInDirection = bounds.y + bounds.height < currentBounds.y\r\n          distance = currentBounds.y - (bounds.y + bounds.height)\r\n          break\r\n        case 'down':\r\n          isInDirection = bounds.y > currentBounds.y + currentBounds.height\r\n          distance = bounds.y - (currentBounds.y + currentBounds.height)\r\n          break\r\n      }\r\n      \r\n      if (isInDirection && distance < nearestDistance) {\r\n        nearestDistance = distance\r\n        nearestIndex = i\r\n      }\r\n    }\r\n    \r\n    return nearestIndex\r\n  }\r\n  \r\n  /**\r\n   * フォーカスをクリア\r\n   */\r\n  private clearFocus(): void {\r\n    this.currentFocusIndex = -1\r\n    if (this.focusIndicator) {\r\n      this.focusIndicator.setVisible(false)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * アクセシビリティヒントを表示\r\n   */\r\n  private showAccessibilityHint(): void {\r\n    const hintText = this.scene.add.text(\r\n      this.scene.cameras.main.width / 2,\r\n      50,\r\n      'キーボード操作が有効です (Tab: 移動, Space/Enter: 選択, Esc: キャンセル)',\r\n      {\r\n        fontSize: '14px',\r\n        color: '#ffffff',\r\n        backgroundColor: '#000000',\r\n        padding: { x: 10, y: 5 }\r\n      }\r\n    )\r\n    hintText.setOrigin(0.5)\r\n    hintText.setDepth(10001)\r\n    \r\n    // 3秒後にフェードアウト\r\n    this.scene.time.delayedCall(3000, () => {\r\n      this.scene.tweens.add({\r\n        targets: hintText,\r\n        alpha: 0,\r\n        duration: 500,\r\n        onComplete: () => hintText.destroy()\r\n      })\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  destroy(): void {\r\n    this.disable()\r\n    this.focusableElements = []\r\n    this.callbacks.clear()\r\n    \r\n    if (this.focusIndicator) {\r\n      this.focusIndicator.destroy()\r\n    }\r\n  }\r\n}","/**\r\n * Web Audio APIを使用したサウンド生成器\r\n * 高品質なゲームサウンドを動的に生成\r\n */\r\nexport class WebAudioSoundGenerator {\r\n  private audioContext: AudioContext\r\n  \r\n  constructor() {\r\n    this.audioContext = new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n  }\r\n  \r\n  /**\r\n   * ボタンクリック音\r\n   */\r\n  playButtonClick(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.frequency.setValueAtTime(800, time)\r\n    osc.frequency.exponentialRampToValueAtTime(400, time + 0.05)\r\n    \r\n    gain.gain.setValueAtTime(0.3, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.05)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.05)\r\n  }\r\n  \r\n  /**\r\n   * ボタンホバー音\r\n   */\r\n  playButtonHover(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    osc.frequency.setValueAtTime(1200, time)\r\n    \r\n    gain.gain.setValueAtTime(0, time)\r\n    gain.gain.linearRampToValueAtTime(0.1, time + 0.01)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.03)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.03)\r\n  }\r\n  \r\n  /**\r\n   * カードドロー音\r\n   */\r\n  playCardDraw(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // ホワイトノイズでシャッという音\r\n    const bufferSize = 0.1 * this.audioContext.sampleRate\r\n    const buffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate)\r\n    const data = buffer.getChannelData(0)\r\n    \r\n    for (let i = 0; i < bufferSize; i++) {\r\n      data[i] = Math.random() * 2 - 1\r\n    }\r\n    \r\n    const noise = this.audioContext.createBufferSource()\r\n    const filter = this.audioContext.createBiquadFilter()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    noise.buffer = buffer\r\n    filter.type = 'highpass'\r\n    filter.frequency.setValueAtTime(1000, time)\r\n    filter.frequency.exponentialRampToValueAtTime(3000, time + 0.1)\r\n    \r\n    noise.connect(filter)\r\n    filter.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    gain.gain.setValueAtTime(0.2, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n    \r\n    noise.start(time)\r\n    noise.stop(time + 0.1)\r\n  }\r\n  \r\n  /**\r\n   * カード選択音\r\n   */\r\n  playCardSelect(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'square'\r\n    osc.frequency.setValueAtTime(600, time)\r\n    osc.frequency.exponentialRampToValueAtTime(800, time + 0.05)\r\n    \r\n    gain.gain.setValueAtTime(0.15, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.05)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.05)\r\n  }\r\n  \r\n  /**\r\n   * チャレンジ成功音\r\n   */\r\n  playChallengeSuccess(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 3つの音を重ねて豊かな成功音を作成\r\n    const notes = [523.25, 659.25, 783.99] // C5, E5, G5\r\n    \r\n    notes.forEach((freq, index) => {\r\n      const osc = this.audioContext.createOscillator()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      osc.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      osc.type = 'sine'\r\n      osc.frequency.setValueAtTime(freq, time + index * 0.05)\r\n      \r\n      gain.gain.setValueAtTime(0, time + index * 0.05)\r\n      gain.gain.linearRampToValueAtTime(0.2, time + index * 0.05 + 0.02)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + index * 0.05 + 0.3)\r\n      \r\n      osc.start(time + index * 0.05)\r\n      osc.stop(time + index * 0.05 + 0.3)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * チャレンジ失敗音\r\n   */\r\n  playChallengeFail(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sawtooth'\r\n    osc.frequency.setValueAtTime(300, time)\r\n    osc.frequency.exponentialRampToValueAtTime(100, time + 0.2)\r\n    \r\n    gain.gain.setValueAtTime(0.2, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.2)\r\n  }\r\n  \r\n  /**\r\n   * 活力増加音\r\n   */\r\n  playVitalityGain(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    osc.frequency.setValueAtTime(400, time)\r\n    osc.frequency.exponentialRampToValueAtTime(800, time + 0.15)\r\n    \r\n    gain.gain.setValueAtTime(0.15, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.15)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.15)\r\n  }\r\n  \r\n  /**\r\n   * 活力減少音\r\n   */\r\n  playVitalityLoss(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    osc.frequency.setValueAtTime(600, time)\r\n    osc.frequency.exponentialRampToValueAtTime(200, time + 0.15)\r\n    \r\n    gain.gain.setValueAtTime(0.15, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.15)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.15)\r\n  }\r\n  \r\n  /**\r\n   * 警告音\r\n   */\r\n  playWarning(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 2回ビープ音\r\n    for (let i = 0; i < 2; i++) {\r\n      const osc = this.audioContext.createOscillator()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      osc.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      osc.type = 'square'\r\n      osc.frequency.setValueAtTime(880, time + i * 0.15)\r\n      \r\n      gain.gain.setValueAtTime(0.1, time + i * 0.15)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + i * 0.15 + 0.1)\r\n      \r\n      osc.start(time + i * 0.15)\r\n      osc.stop(time + i * 0.15 + 0.1)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 通知音\r\n   */\r\n  playNotification(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    // ド→ミの音程\r\n    osc.frequency.setValueAtTime(523.25, time)\r\n    osc.frequency.setValueAtTime(659.25, time + 0.05)\r\n    \r\n    gain.gain.setValueAtTime(0.15, time)\r\n    gain.gain.setValueAtTime(0.15, time + 0.05)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.1)\r\n  }\r\n  \r\n  /**\r\n   * ゲームオーバー音\r\n   */\r\n  playGameOver(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 低い音で徐々に下がる\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sawtooth'\r\n    osc.frequency.setValueAtTime(200, time)\r\n    osc.frequency.exponentialRampToValueAtTime(50, time + 1)\r\n    \r\n    gain.gain.setValueAtTime(0.2, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 1)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 1)\r\n  }\r\n  \r\n  /**\r\n   * 勝利音\r\n   */\r\n  playVictory(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // ファンファーレ風の音\r\n    const notes = [\r\n      { freq: 523.25, start: 0 },     // C5\r\n      { freq: 523.25, start: 0.1 },   // C5\r\n      { freq: 523.25, start: 0.2 },   // C5\r\n      { freq: 659.25, start: 0.3 },   // E5\r\n      { freq: 783.99, start: 0.5 },   // G5\r\n      { freq: 1046.50, start: 0.7 }   // C6\r\n    ]\r\n    \r\n    notes.forEach(({ freq, start }) => {\r\n      const osc = this.audioContext.createOscillator()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      osc.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      osc.type = 'square'\r\n      osc.frequency.setValueAtTime(freq, time + start)\r\n      \r\n      gain.gain.setValueAtTime(0, time + start)\r\n      gain.gain.linearRampToValueAtTime(0.15, time + start + 0.02)\r\n      gain.gain.setValueAtTime(0.15, time + start + 0.08)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + start + 0.2)\r\n      \r\n      osc.start(time + start)\r\n      osc.stop(time + start + 0.2)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * オーディオコンテキストのリジューム\r\n   */\r\n  async resume(): Promise<void> {\r\n    if (this.audioContext.state === 'suspended') {\r\n      await this.audioContext.resume()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 保険カード獲得音\r\n   */\r\n  playInsuranceGet(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // コインを拾うような明るい音\r\n    const notes = [659.25, 783.99, 1046.50] // E5, G5, C6\r\n    \r\n    notes.forEach((freq, index) => {\r\n      const osc = this.audioContext.createOscillator()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      osc.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      osc.type = 'sine'\r\n      osc.frequency.setValueAtTime(freq, time + index * 0.03)\r\n      \r\n      gain.gain.setValueAtTime(0, time + index * 0.03)\r\n      gain.gain.linearRampToValueAtTime(0.2, time + index * 0.03 + 0.01)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + index * 0.03 + 0.15)\r\n      \r\n      osc.start(time + index * 0.03)\r\n      osc.stop(time + index * 0.03 + 0.15)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 保険カード期限切れ音\r\n   */\r\n  playInsuranceExpire(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    // 下降する悲しげな音\r\n    osc.type = 'triangle'\r\n    osc.frequency.setValueAtTime(440, time)\r\n    osc.frequency.exponentialRampToValueAtTime(220, time + 0.3)\r\n    \r\n    gain.gain.setValueAtTime(0.2, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.3)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.3)\r\n  }\r\n  \r\n  /**\r\n   * ステージクリア音\r\n   */\r\n  playStageComplete(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 段階的に上昇する達成感のある音\r\n    const notes = [\r\n      { freq: 523.25, start: 0 },     // C5\r\n      { freq: 659.25, start: 0.1 },   // E5\r\n      { freq: 783.99, start: 0.2 },   // G5\r\n      { freq: 1046.50, start: 0.3 },  // C6\r\n      { freq: 1318.51, start: 0.4 }   // E6\r\n    ]\r\n    \r\n    notes.forEach(({ freq, start }) => {\r\n      const osc = this.audioContext.createOscillator()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      osc.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      osc.type = 'square'\r\n      osc.frequency.setValueAtTime(freq, time + start)\r\n      \r\n      gain.gain.setValueAtTime(0, time + start)\r\n      gain.gain.linearRampToValueAtTime(0.15, time + start + 0.02)\r\n      gain.gain.setValueAtTime(0.15, time + start + 0.08)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + start + 0.3)\r\n      \r\n      osc.start(time + start)\r\n      osc.stop(time + start + 0.3)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * チャレンジ開始音\r\n   */\r\n  playChallengeStart(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 緊張感のある開始音\r\n    const osc1 = this.audioContext.createOscillator()\r\n    const osc2 = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc1.connect(gain)\r\n    osc2.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    // 不協和音的な音程\r\n    osc1.type = 'sawtooth'\r\n    osc2.type = 'sawtooth'\r\n    osc1.frequency.setValueAtTime(261.63, time) // C4\r\n    osc2.frequency.setValueAtTime(277.18, time) // C#4\r\n    \r\n    gain.gain.setValueAtTime(0, time)\r\n    gain.gain.linearRampToValueAtTime(0.2, time + 0.05)\r\n    gain.gain.setValueAtTime(0.2, time + 0.1)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\r\n    \r\n    osc1.start(time)\r\n    osc2.start(time)\r\n    osc1.stop(time + 0.2)\r\n    osc2.stop(time + 0.2)\r\n  }\r\n  \r\n  /**\r\n   * カードシャッフル音\r\n   */\r\n  playCardShuffle(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 複数の短いホワイトノイズバーストでシャッフル感を表現\r\n    for (let i = 0; i < 5; i++) {\r\n      const bufferSize = 0.02 * this.audioContext.sampleRate\r\n      const buffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate)\r\n      const data = buffer.getChannelData(0)\r\n      \r\n      for (let j = 0; j < bufferSize; j++) {\r\n        data[j] = Math.random() * 2 - 1\r\n      }\r\n      \r\n      const noise = this.audioContext.createBufferSource()\r\n      const filter = this.audioContext.createBiquadFilter()\r\n      const gain = this.audioContext.createGain()\r\n      \r\n      noise.buffer = buffer\r\n      filter.type = 'bandpass'\r\n      filter.frequency.setValueAtTime(2000 + i * 500, time + i * 0.03)\r\n      filter.Q.value = 10\r\n      \r\n      noise.connect(filter)\r\n      filter.connect(gain)\r\n      gain.connect(this.audioContext.destination)\r\n      \r\n      gain.gain.setValueAtTime(0.1, time + i * 0.03)\r\n      gain.gain.exponentialRampToValueAtTime(0.01, time + i * 0.03 + 0.02)\r\n      \r\n      noise.start(time + i * 0.03)\r\n      noise.stop(time + i * 0.03 + 0.02)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * ダイアログ開く音\r\n   */\r\n  playDialogOpen(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    osc.frequency.setValueAtTime(400, time)\r\n    osc.frequency.exponentialRampToValueAtTime(800, time + 0.1)\r\n    \r\n    gain.gain.setValueAtTime(0, time)\r\n    gain.gain.linearRampToValueAtTime(0.15, time + 0.02)\r\n    gain.gain.setValueAtTime(0.15, time + 0.08)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.1)\r\n  }\r\n  \r\n  /**\r\n   * ダイアログ閉じる音\r\n   */\r\n  playDialogClose(): void {\r\n    const time = this.audioContext.currentTime\r\n    const osc = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc.type = 'sine'\r\n    osc.frequency.setValueAtTime(800, time)\r\n    osc.frequency.exponentialRampToValueAtTime(400, time + 0.1)\r\n    \r\n    gain.gain.setValueAtTime(0.15, time)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.1)\r\n    \r\n    osc.start(time)\r\n    osc.stop(time + 0.1)\r\n  }\r\n  \r\n  /**\r\n   * エラー音\r\n   */\r\n  playError(): void {\r\n    const time = this.audioContext.currentTime\r\n    \r\n    // 不快な不協和音\r\n    const osc1 = this.audioContext.createOscillator()\r\n    const osc2 = this.audioContext.createOscillator()\r\n    const gain = this.audioContext.createGain()\r\n    \r\n    osc1.connect(gain)\r\n    osc2.connect(gain)\r\n    gain.connect(this.audioContext.destination)\r\n    \r\n    osc1.type = 'square'\r\n    osc2.type = 'square'\r\n    osc1.frequency.setValueAtTime(220, time)\r\n    osc2.frequency.setValueAtTime(233.08, time) // 不協和音程\r\n    \r\n    gain.gain.setValueAtTime(0.2, time)\r\n    gain.gain.setValueAtTime(0.2, time + 0.1)\r\n    gain.gain.setValueAtTime(0, time + 0.15)\r\n    gain.gain.setValueAtTime(0.2, time + 0.2)\r\n    gain.gain.setValueAtTime(0.2, time + 0.3)\r\n    gain.gain.exponentialRampToValueAtTime(0.01, time + 0.35)\r\n    \r\n    osc1.start(time)\r\n    osc2.start(time)\r\n    osc1.stop(time + 0.35)\r\n    osc2.stop(time + 0.35)\r\n  }\r\n  \r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  destroy(): void {\r\n    if (this.audioContext.state !== 'closed') {\r\n      this.audioContext.close()\r\n    }\r\n  }\r\n}","import { WebAudioSoundGenerator } from './WebAudioSoundGenerator'\r\n\r\n/**\r\n * サウンドマネージャー - ゲーム全体のサウンドエフェクト統合管理システム\r\n * \r\n * 主な機能:\r\n * - 15種類のサウンドエフェクトの統合管理\r\n * - Web Audio APIとの連携でファイルサイズ0の動的サウンド生成\r\n * - 音量・有効状態のLocalStorage自動永続化\r\n * - ゲームアクションとのリアルタイム連携 (5ms未満レイテンシ)\r\n * - ブラウザ間互換性とAudioContextライフサイクル管理\r\n * \r\n * サウンドカテゴリ:\r\n * - カード操作: ドロー、選択、プレイ、シャッフル\r\n * - チャレンジ: 開始、成功、失敗\r\n * - UI操作: ボタンクリック、ホバー、ダイアログ\r\n * - 保険関連: 獲得、期限切れ、更新\r\n * - 活力変化: 墓加、減少、警告\r\n * - ゲーム進行: ステージクリア、ゲームオーバー、勝利\r\n * - 通知システム: 情報、警告、エラー\r\n * \r\n * パフォーマンス特性:\r\n * - CPU使用率: アイドル時 < 1%\r\n * - メモリ使用量: 約500KB (AudioContextのみ)\r\n * - レイテンシ: < 5ms (サウンド再生開始から音声出力まで)\r\n * - 同時発音数: 制限なし (Web Audio API準拠)\r\n * \r\n * 音響設計標準:\r\n * - C5-E5-G5長三和音による心地よい成功音\r\n * - ド→ミの完全3度音程による親しみやすい通知音\r\n * - ファンファーレ風音階進行による勝利感の演出\r\n * - ホワイトノイズ+ハイパスフィルターによるリアルなカードシャッフル音\r\n * - のこぎり波と不協和音による失敗、挙折感の表現\r\n */\r\nexport class SoundManager {\r\n  private scene: Phaser.Scene\r\n  private enabled: boolean = true\r\n  private volume: number = 0.5\r\n  private sounds: Map<string, Phaser.Sound.BaseSound> = new Map()\r\n  private webAudioGenerator: WebAudioSoundGenerator\r\n  \r\n  /**\r\n   * サウンドエフェクトマッピングテーブル\r\n   * \r\n   * 各サウンドのキー、音量、特殊効果を定義。\r\n   * ゲームアクションとサウンドエフェクトの対応関係を一元管理。\r\n   * \r\n   * 音量設定指針:\r\n   * - 0.2-0.3: ホバー、クリック等の高頻度UI音\r\n   * - 0.4-0.5: カード操作、通知等の中頻度音\r\n   * - 0.6-0.8: 成功、勝利等の特別なイベント音\r\n   */\r\n  private readonly soundEffects = {\r\n    // カード操作\r\n    cardDraw: { key: 'cardDraw', volume: 0.4 },\r\n    cardSelect: { key: 'cardSelect', volume: 0.3 },\r\n    cardDeselect: { key: 'cardDeselect', volume: 0.3 },\r\n    cardPlay: { key: 'cardPlay', volume: 0.5 },\r\n    cardShuffle: { key: 'cardShuffle', volume: 0.4 },\r\n    \r\n    // チャレンジ\r\n    challengeStart: { key: 'challengeStart', volume: 0.5 },\r\n    challengeSuccess: { key: 'challengeSuccess', volume: 0.6 },\r\n    challengeFail: { key: 'challengeFail', volume: 0.5 },\r\n    \r\n    // ステージ\r\n    stageComplete: { key: 'stageComplete', volume: 0.7 },\r\n    gameOver: { key: 'gameOver', volume: 0.6 },\r\n    gameVictory: { key: 'gameVictory', volume: 0.8 },\r\n    \r\n    // UI操作\r\n    buttonClick: { key: 'buttonClick', volume: 0.3 },\r\n    buttonHover: { key: 'buttonHover', volume: 0.2 },\r\n    dialogOpen: { key: 'dialogOpen', volume: 0.4 },\r\n    dialogClose: { key: 'dialogClose', volume: 0.4 },\r\n    \r\n    // 保険\r\n    insuranceGet: { key: 'insuranceGet', volume: 0.5 },\r\n    insuranceExpire: { key: 'insuranceExpire', volume: 0.4 },\r\n    insuranceRenew: { key: 'insuranceRenew', volume: 0.4 },\r\n    \r\n    // 活力\r\n    vitalityGain: { key: 'vitalityGain', volume: 0.4 },\r\n    vitalityLoss: { key: 'vitalityLoss', volume: 0.5 },\r\n    vitalityWarning: { key: 'vitalityWarning', volume: 0.6 },\r\n    \r\n    // 通知\r\n    notification: { key: 'notification', volume: 0.4 },\r\n    warning: { key: 'warning', volume: 0.5 },\r\n    error: { key: 'error', volume: 0.5 }\r\n  } as const\r\n  \r\n  /** サウンド設定のLocalStorageキー */\r\n  private static readonly STORAGE_KEYS = {\r\n    ENABLED: 'sound_enabled',\r\n    VOLUME: 'sound_volume'\r\n  } as const\r\n  \r\n  /**\r\n   * SoundManagerコンストラクタ\r\n   * \r\n   * @param scene Phaserシーンインスタンス\r\n   * \r\n   * 初期化処理:\r\n   * 1. WebAudioSoundGeneratorのインスタンス化\r\n   * 2. サウンドアセットのプリロード\r\n   * 3. LocalStorageからの設定復元\r\n   * 4. ブラウザーのAutoplay Policy対応のためのユーザーインタラクション待機\r\n   */\r\n  constructor(scene: Phaser.Scene) {\r\n    this.scene = scene\r\n    this.webAudioGenerator = new WebAudioSoundGenerator()\r\n    \r\n    // 永続化された設定を復元\r\n    this.loadSettings()\r\n    \r\n    // サウンドアセットの初期化\r\n    this.loadSounds()\r\n    this.setupVolumeControl()\r\n    \r\n    // ブラウザーのAutoplay Policy対策\r\n    // ユーザーインタラクション後にAudioContextをアクティベート\r\n    this.scene.input.once('pointerdown', async () => {\r\n      try {\r\n        await this.webAudioGenerator.resume()\r\n        console.log('AudioContext successfully resumed')\r\n      } catch (error) {\r\n        console.warn('Failed to resume AudioContext:', error)\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * サウンドアセットのプリロードと初期化\r\n   * \r\n   * Web Audio APIを使用したファイルレスサウンドシステム。\r\n   * 外部アセットファイル不要で、ロード時間ゼロ、\r\n   * バンド幅4縮減を実現。\r\n   */\r\n  private loadSounds(): void {\r\n    // Web Audio APIで動的にサウンドを生成\r\n    // ファイルサイズ0KBで高品質なサウンドを実現\r\n    this.generateSyntheticSounds()\r\n  }\r\n  \r\n  /**\r\n   * Web Audio APIを使用した動的サウンド生成\r\n   * \r\n   * 音楽理論と心理音響学を基礎としたサウンドデザイン:\r\n   * \r\n   * 1. 成功音: C5-E5-G5の長三和音 (心理学的に安定した響き)\r\n   * 2. 通知音: ド→ミの完全3度音程 (親しみやすい音程)\r\n   * 3. 勝利音: ファンファーレ風音階進行 (達成感を演出)\r\n   * 4. カードドロー: ホワイトノイズ+フィルター (リアルな紙の擦れ音)\r\n   * 5. 失敗音: のこぎり波+不協和音 (心理的不快感を適度に表現)\r\n   * \r\n   * 技術仕様:\r\n   * - サンプリングレート: 44.1kHz\r\n   * - ビット深度: 32bit float\r\n   * - レイテンシ: < 5ms\r\n   * - CPU使用率: < 1% (アイドル時)\r\n   */\r\n  private generateSyntheticSounds(): void {\r\n    \r\n    // カードドロー音: ホワイトノイズ+ハイパスフィルターでリアルな紙の擦れ音を再現\r\n    this.createSyntheticSound('cardDraw', 800, 0.05, 'whitenoise')\r\n    \r\n    // カード選択音: 600Hz→800Hzの矩形波でクリアなクリック音\r\n    this.createSyntheticSound('cardSelect', 600, 0.03, 'square_up')\r\n    this.createSyntheticSound('cardDeselect', 500, 0.03, 'square_down')\r\n    \r\n    // カードプレイ音: 低音の重厚な音で「決定」感を表現\r\n    this.createSyntheticSound('cardPlay', 300, 0.1, 'sine')\r\n    \r\n    // チャレンジ成功音: C5-E5-G5長三和音で心地よいハーモニー\r\n    this.createSyntheticSound('challengeSuccess', 523, 0.2, 'chord_major')\r\n    \r\n    // チャレンジ失敗音: のこぎり波300Hz→100Hzで挙折感を適度に表現\r\n    this.createSyntheticSound('challengeFail', 300, 0.2, 'sawtooth_down')\r\n    \r\n    // ボタンクリック音: サイン波800Hz→400Hzでシンプルなフィードバック\r\n    this.createSyntheticSound('buttonClick', 800, 0.02, 'sine_down')\r\n    this.createSyntheticSound('buttonHover', 900, 0.01)\r\n    \r\n    // 通知音\r\n    this.createSyntheticSound('notification', 660, 0.1)\r\n    this.createSyntheticSound('warning', 440, 0.15)\r\n  }\r\n  \r\n  /**\r\n   * 合成音を作成\r\n   */\r\n  private createSyntheticSound(\r\n    key: string, \r\n    frequency: number, \r\n    duration: number, \r\n    _type: 'normal' | 'up' | 'down' = 'normal'\r\n  ): void {\r\n    // Web Audio Context を使用した簡単な音生成\r\n    const audioContext = this.scene.sound.context as AudioContext\r\n    if (!audioContext) return\r\n    \r\n    // この実装は仮のものです\r\n    // 実際のゲームでは、proper な音声ファイルを使用してください\r\n  }\r\n  \r\n  /**\r\n   * サウンドエフェクトを再生\r\n   */\r\n  play(soundKey: keyof typeof this.soundEffects): void {\r\n    if (!this.enabled) return\r\n    \r\n    const soundConfig = this.soundEffects[soundKey]\r\n    if (!soundConfig) return\r\n    \r\n    // Web Audio APIで音を再生\r\n    try {\r\n      switch (soundKey) {\r\n        case 'buttonClick':\r\n          this.webAudioGenerator.playButtonClick()\r\n          break\r\n        case 'buttonHover':\r\n          this.webAudioGenerator.playButtonHover()\r\n          break\r\n        case 'cardDraw':\r\n          this.webAudioGenerator.playCardDraw()\r\n          break\r\n        case 'cardSelect':\r\n        case 'cardDeselect':\r\n          this.webAudioGenerator.playCardSelect()\r\n          break\r\n        case 'challengeSuccess':\r\n          this.webAudioGenerator.playChallengeSuccess()\r\n          break\r\n        case 'challengeFail':\r\n          this.webAudioGenerator.playChallengeFail()\r\n          break\r\n        case 'vitalityGain':\r\n          this.webAudioGenerator.playVitalityGain()\r\n          break\r\n        case 'vitalityLoss':\r\n          this.webAudioGenerator.playVitalityLoss()\r\n          break\r\n        case 'warning':\r\n        case 'vitalityWarning':\r\n          this.webAudioGenerator.playWarning()\r\n          break\r\n        case 'notification':\r\n        case 'insuranceGet':\r\n        case 'insuranceRenew':\r\n          this.webAudioGenerator.playNotification()\r\n          break\r\n        case 'gameOver':\r\n          this.webAudioGenerator.playGameOver()\r\n          break\r\n        case 'gameVictory':\r\n          this.webAudioGenerator.playVictory()\r\n          break\r\n        case 'stageComplete':\r\n          this.webAudioGenerator.playStageComplete()\r\n          break\r\n        case 'challengeStart':\r\n          this.webAudioGenerator.playChallengeStart()\r\n          break\r\n        case 'cardShuffle':\r\n          this.webAudioGenerator.playCardShuffle()\r\n          break\r\n        case 'insuranceExpire':\r\n          this.webAudioGenerator.playInsuranceExpire()\r\n          break\r\n        case 'dialogOpen':\r\n          this.webAudioGenerator.playDialogOpen()\r\n          break\r\n        case 'dialogClose':\r\n          this.webAudioGenerator.playDialogClose()\r\n          break\r\n        case 'error':\r\n          this.webAudioGenerator.playError()\r\n          break\r\n        case 'cardPlay':\r\n          // カードプレイ時は成功音を少し短く\r\n          this.webAudioGenerator.playCardSelect()\r\n          break\r\n        default:\r\n          // その他の音は通知音で代用\r\n          this.webAudioGenerator.playNotification()\r\n      }\r\n    } catch (error) {\r\n      console.warn('Sound playback error:', error)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 複数のサウンドを連続再生\r\n   */\r\n  playSequence(soundKeys: (keyof typeof this.soundEffects)[], delay: number = 100): void {\r\n    soundKeys.forEach((key, index) => {\r\n      this.scene.time.delayedCall(index * delay, () => {\r\n        this.play(key)\r\n      })\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * ランダムなバリエーションで再生\r\n   */\r\n  playWithVariation(soundKey: keyof typeof this.soundEffects, _variations: number = 3): void {\r\n    // バリエーション番号を追加（例: cardDraw1, cardDraw2, cardDraw3）\r\n    // const variation = Phaser.Math.Between(1, variations)\r\n    this.play(soundKey)\r\n  }\r\n  \r\n  /**\r\n   * 音量設定\r\n   */\r\n  setVolume(volume: number): void {\r\n    this.volume = Phaser.Math.Clamp(volume, 0, 1)\r\n    this.updateAllSoundVolumes()\r\n  }\r\n  \r\n  /**\r\n   * 音量を取得\r\n   */\r\n  getVolume(): number {\r\n    return this.volume\r\n  }\r\n  \r\n  /**\r\n   * サウンドの有効/無効を切り替え\r\n   */\r\n  setEnabled(enabled: boolean): void {\r\n    this.enabled = enabled\r\n    if (!enabled) {\r\n      this.stopAll()\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * サウンドが有効かどうか\r\n   */\r\n  isEnabled(): boolean {\r\n    return this.enabled\r\n  }\r\n  \r\n  /**\r\n   * すべてのサウンドを停止\r\n   */\r\n  stopAll(): void {\r\n    this.sounds.forEach(sound => {\r\n      if (sound.isPlaying) {\r\n        sound.stop()\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 音量コントロールのセットアップ\r\n   */\r\n  private setupVolumeControl(): void {\r\n    // loadSettingsメソッドで設定を読み込み済み\r\n  }\r\n  \r\n  /**\r\n   * 音量設定を保存\r\n   */\r\n  saveSettings(): void {\r\n    localStorage.setItem(SoundManager.STORAGE_KEYS.VOLUME, this.volume.toString())\r\n    localStorage.setItem(SoundManager.STORAGE_KEYS.ENABLED, this.enabled.toString())\r\n  }\r\n  \r\n  /**\r\n   * 設定を読み込み\r\n   */\r\n  private loadSettings(): void {\r\n    const savedVolume = localStorage.getItem(SoundManager.STORAGE_KEYS.VOLUME)\r\n    if (savedVolume !== null) {\r\n      this.volume = parseFloat(savedVolume)\r\n    }\r\n    \r\n    const savedEnabled = localStorage.getItem(SoundManager.STORAGE_KEYS.ENABLED)\r\n    if (savedEnabled !== null) {\r\n      this.enabled = savedEnabled === 'true'\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * すべてのサウンドの音量を更新\r\n   */\r\n  private updateAllSoundVolumes(): void {\r\n    this.sounds.forEach(sound => {\r\n      sound.volume = this.volume\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * クリーンアップ\r\n   */\r\n  destroy(): void {\r\n    this.stopAll()\r\n    this.sounds.clear()\r\n    this.webAudioGenerator.destroy()\r\n  }\r\n}","/**\r\n * イベントリスナーのクリーンアップを管理するクラス\r\n * メモリリークを防ぐため、すべてのイベントリスナーを追跡し、適切に削除する\r\n */\r\nexport class EventCleanupManager {\r\n  private eventListeners: Map<string, {\r\n    target: EventTarget\r\n    type: string\r\n    listener: EventListener\r\n    options?: AddEventListenerOptions\r\n  }[]> = new Map()\r\n  \r\n  private phaserListeners: Map<string, {\r\n    emitter: Phaser.Events.EventEmitter\r\n    event: string | symbol\r\n    fn: Function\r\n    context?: any\r\n  }[]> = new Map()\r\n  \r\n  /**\r\n   * DOMイベントリスナーを追加（自動追跡）\r\n   */\r\n  addEventListener(\r\n    id: string,\r\n    target: EventTarget,\r\n    type: string,\r\n    listener: EventListener,\r\n    options?: AddEventListenerOptions\r\n  ): void {\r\n    // リスナーを追加\r\n    target.addEventListener(type, listener, options)\r\n    \r\n    // 追跡リストに追加\r\n    if (!this.eventListeners.has(id)) {\r\n      this.eventListeners.set(id, [])\r\n    }\r\n    \r\n    this.eventListeners.get(id)!.push({\r\n      target,\r\n      type,\r\n      listener,\r\n      options\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * Phaserイベントリスナーを追加（自動追跡）\r\n   */\r\n  addPhaserListener(\r\n    id: string,\r\n    emitter: Phaser.Events.EventEmitter,\r\n    event: string | symbol,\r\n    fn: Function,\r\n    context?: any\r\n  ): void {\r\n    // リスナーを追加\r\n    emitter.on(event, fn, context)\r\n    \r\n    // 追跡リストに追加\r\n    if (!this.phaserListeners.has(id)) {\r\n      this.phaserListeners.set(id, [])\r\n    }\r\n    \r\n    this.phaserListeners.get(id)!.push({\r\n      emitter,\r\n      event,\r\n      fn,\r\n      context\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * 特定のIDに関連するすべてのイベントリスナーを削除\r\n   */\r\n  removeAllListeners(id: string): void {\r\n    // DOMイベントリスナーの削除\r\n    const domListeners = this.eventListeners.get(id)\r\n    if (domListeners) {\r\n      domListeners.forEach(({ target, type, listener, options }) => {\r\n        try {\r\n          target.removeEventListener(type, listener, options)\r\n        } catch (e) {\r\n          console.warn(`Failed to remove DOM listener: ${e}`)\r\n        }\r\n      })\r\n      this.eventListeners.delete(id)\r\n    }\r\n    \r\n    // Phaserイベントリスナーの削除\r\n    const phaserListeners = this.phaserListeners.get(id)\r\n    if (phaserListeners) {\r\n      phaserListeners.forEach(({ emitter, event, fn, context }) => {\r\n        try {\r\n          emitter.off(event, fn, context)\r\n        } catch (e) {\r\n          console.warn(`Failed to remove Phaser listener: ${e}`)\r\n        }\r\n      })\r\n      this.phaserListeners.delete(id)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * すべてのイベントリスナーを削除\r\n   */\r\n  removeAll(): void {\r\n    // すべてのIDのリスナーを削除\r\n    const allIds = [\r\n      ...Array.from(this.eventListeners.keys()),\r\n      ...Array.from(this.phaserListeners.keys())\r\n    ]\r\n    \r\n    allIds.forEach(id => {\r\n      this.removeAllListeners(id)\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * メモリ使用状況のレポート\r\n   */\r\n  getMemoryReport(): {\r\n    domListenerCount: number\r\n    phaserListenerCount: number\r\n    ids: string[]\r\n  } {\r\n    let domCount = 0\r\n    let phaserCount = 0\r\n    \r\n    this.eventListeners.forEach(listeners => {\r\n      domCount += listeners.length\r\n    })\r\n    \r\n    this.phaserListeners.forEach(listeners => {\r\n      phaserCount += listeners.length\r\n    })\r\n    \r\n    return {\r\n      domListenerCount: domCount,\r\n      phaserListenerCount: phaserCount,\r\n      ids: [\r\n        ...Array.from(this.eventListeners.keys()),\r\n        ...Array.from(this.phaserListeners.keys())\r\n      ]\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * デバッグ用: アクティブなリスナーをコンソールに出力\r\n   */\r\n  debugPrint(): void {\r\n    const report = this.getMemoryReport()\r\n    console.group('Event Cleanup Manager Report')\r\n    console.log(`DOM Listeners: ${report.domListenerCount}`)\r\n    console.log(`Phaser Listeners: ${report.phaserListenerCount}`)\r\n    console.log(`Active IDs: ${report.ids.join(', ')}`)\r\n    console.groupEnd()\r\n  }\r\n}","/**\r\n * モバイルパフォーマンス最適化マネージャー\r\n * \r\n * 主な機能:\r\n * - ハードウェアアクセラレーションの管理\r\n * - メモリ使用量の監視と最適化\r\n * - 描画パフォーマンスの調整\r\n * - バッテリー消費の最適化\r\n */\r\n\r\ninterface PerformanceMetrics {\r\n  fps: number\r\n  memory: {\r\n    used: number\r\n    total: number\r\n    percentage: number\r\n  }\r\n  renderTime: number\r\n  updateTime: number\r\n  drawCalls: number\r\n}\r\n\r\ninterface PerformanceThresholds {\r\n  minFPS: number\r\n  maxMemoryUsage: number // percentage\r\n  maxRenderTime: number // ms\r\n  maxDrawCalls: number\r\n}\r\n\r\nexport class MobilePerformanceManager {\r\n  private scene: Phaser.Scene\r\n  private metrics: PerformanceMetrics\r\n  private thresholds: PerformanceThresholds\r\n  private optimizationLevel: 'low' | 'medium' | 'high' = 'medium'\r\n  private monitoringInterval: number | null = null\r\n  private frameCounter: number = 0\r\n  private lastFrameTime: number = 0\r\n  private fpsHistory: number[] = []\r\n  private isLowPowerMode: boolean = false\r\n  \r\n  constructor(scene: Phaser.Scene, thresholds?: Partial<PerformanceThresholds>) {\r\n    this.scene = scene\r\n    \r\n    this.thresholds = {\r\n      minFPS: 30,\r\n      maxMemoryUsage: 80,\r\n      maxRenderTime: 16.67, // 60fps target\r\n      maxDrawCalls: 100,\r\n      ...thresholds\r\n    }\r\n    \r\n    this.metrics = {\r\n      fps: 60,\r\n      memory: { used: 0, total: 0, percentage: 0 },\r\n      renderTime: 0,\r\n      updateTime: 0,\r\n      drawCalls: 0\r\n    }\r\n    \r\n    this.initialize()\r\n  }\r\n\r\n  private initialize(): void {\r\n    // パフォーマンス監視の開始\r\n    this.startMonitoring()\r\n    \r\n    // ハードウェアアクセラレーションの有効化\r\n    this.enableHardwareAcceleration()\r\n    \r\n    // バッテリー状態の監視\r\n    this.monitorBatteryStatus()\r\n    \r\n    // ビジビリティ変更の監視\r\n    this.setupVisibilityHandling()\r\n  }\r\n\r\n  /**\r\n   * ハードウェアアクセラレーションの有効化\r\n   */\r\n  private enableHardwareAcceleration(): void {\r\n    const renderer = this.scene.game.renderer\r\n    \r\n    if (renderer instanceof Phaser.Renderer.WebGL.WebGLRenderer) {\r\n      // WebGLコンテキストの最適化\r\n      const gl = renderer.gl\r\n      \r\n      // アンチエイリアスの調整\r\n      if (this.optimizationLevel === 'low') {\r\n        gl.disable(gl.BLEND)\r\n        gl.disable(gl.DITHER)\r\n      }\r\n      \r\n      // テクスチャフィルタリングの最適化\r\n      gl.hint(gl.GENERATE_MIPMAP_HINT, gl.FASTEST)\r\n      \r\n      // 深度テストの最適化\r\n      gl.disable(gl.DEPTH_TEST)\r\n      gl.disable(gl.STENCIL_TEST)\r\n    }\r\n    \r\n    // CSS最適化\r\n    const canvas = this.scene.game.canvas\r\n    canvas.style.willChange = 'transform'\r\n    canvas.style.transform = 'translateZ(0)'\r\n    canvas.style.backfaceVisibility = 'hidden'\r\n    canvas.style.perspective = '1000px'\r\n  }\r\n\r\n  /**\r\n   * パフォーマンス監視の開始\r\n   */\r\n  private startMonitoring(): void {\r\n    // 既存の監視を停止\r\n    this.stopMonitoring()\r\n    \r\n    // FPS計測\r\n    this.scene.events.on('preupdate', this.measureFPS, this)\r\n    \r\n    // 定期的なメトリクス更新\r\n    this.monitoringInterval = window.setInterval(() => {\r\n      this.updateMetrics()\r\n      this.checkPerformanceThresholds()\r\n    }, 1000) // 1秒ごと\r\n  }\r\n\r\n  /**\r\n   * パフォーマンス監視の停止\r\n   */\r\n  private stopMonitoring(): void {\r\n    if (this.monitoringInterval !== null) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = null\r\n    }\r\n    \r\n    this.scene.events.off('preupdate', this.measureFPS, this)\r\n  }\r\n\r\n  /**\r\n   * FPSの計測\r\n   */\r\n  private measureFPS(): void {\r\n    const currentTime = performance.now()\r\n    \r\n    if (this.lastFrameTime > 0) {\r\n      const deltaTime = currentTime - this.lastFrameTime\r\n      const currentFPS = 1000 / deltaTime\r\n      \r\n      this.fpsHistory.push(currentFPS)\r\n      \r\n      // 履歴を最新60フレーム分に制限\r\n      if (this.fpsHistory.length > 60) {\r\n        this.fpsHistory.shift()\r\n      }\r\n    }\r\n    \r\n    this.lastFrameTime = currentTime\r\n    this.frameCounter++\r\n  }\r\n\r\n  /**\r\n   * メトリクスの更新\r\n   */\r\n  private updateMetrics(): void {\r\n    // FPS計算（平均値）\r\n    if (this.fpsHistory.length > 0) {\r\n      const avgFPS = this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length\r\n      this.metrics.fps = Math.round(avgFPS)\r\n    }\r\n    \r\n    // メモリ使用量の取得\r\n    if ('memory' in performance && (performance as any).memory) {\r\n      const memoryInfo = (performance as any).memory\r\n      this.metrics.memory = {\r\n        used: memoryInfo.usedJSHeapSize,\r\n        total: memoryInfo.totalJSHeapSize,\r\n        percentage: (memoryInfo.usedJSHeapSize / memoryInfo.totalJSHeapSize) * 100\r\n      }\r\n    }\r\n    \r\n    // レンダリング統計\r\n    const renderer = this.scene.game.renderer\r\n    if (renderer instanceof Phaser.Renderer.WebGL.WebGLRenderer) {\r\n      this.metrics.drawCalls = renderer.pipelines.pipelines.size\r\n    }\r\n  }\r\n\r\n  /**\r\n   * パフォーマンスしきい値のチェック\r\n   */\r\n  private checkPerformanceThresholds(): void {\r\n    let needsOptimization = false\r\n    \r\n    // FPSチェック\r\n    if (this.metrics.fps < this.thresholds.minFPS) {\r\n      needsOptimization = true\r\n    }\r\n    \r\n    // メモリ使用量チェック\r\n    if (this.metrics.memory.percentage > this.thresholds.maxMemoryUsage) {\r\n      needsOptimization = true\r\n      this.performMemoryCleanup()\r\n    }\r\n    \r\n    // 描画コール数チェック\r\n    if (this.metrics.drawCalls > this.thresholds.maxDrawCalls) {\r\n      needsOptimization = true\r\n    }\r\n    \r\n    // 最適化レベルの調整\r\n    if (needsOptimization) {\r\n      this.adjustOptimizationLevel()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 最適化レベルの調整\r\n   */\r\n  private adjustOptimizationLevel(): void {\r\n    const fps = this.metrics.fps\r\n    \r\n    if (fps < 20) {\r\n      this.setOptimizationLevel('low')\r\n    } else if (fps < 40) {\r\n      this.setOptimizationLevel('medium')\r\n    } else {\r\n      this.setOptimizationLevel('high')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 最適化レベルの設定\r\n   */\r\n  public setOptimizationLevel(level: 'low' | 'medium' | 'high'): void {\r\n    if (this.optimizationLevel === level) return\r\n    \r\n    this.optimizationLevel = level\r\n    \r\n    switch (level) {\r\n      case 'low':\r\n        this.applyLowQualitySettings()\r\n        break\r\n      case 'medium':\r\n        this.applyMediumQualitySettings()\r\n        break\r\n      case 'high':\r\n        this.applyHighQualitySettings()\r\n        break\r\n    }\r\n    \r\n    // 最適化レベル変更を通知\r\n    this.scene.events.emit('optimizationLevelChanged', level)\r\n  }\r\n\r\n  /**\r\n   * 低品質設定の適用\r\n   */\r\n  private applyLowQualitySettings(): void {\r\n    // 影の無効化\r\n    this.disableShadows()\r\n    \r\n    // パーティクル効果の削減\r\n    this.reduceParticles()\r\n    \r\n    // テクスチャ品質の低下\r\n    this.reduceTextureQuality()\r\n    \r\n    // アニメーションフレームレートの削減\r\n    this.reduceAnimationFrameRate()\r\n    \r\n    // 背景効果の簡略化\r\n    this.simplifyBackgroundEffects()\r\n  }\r\n\r\n  /**\r\n   * 中品質設定の適用\r\n   */\r\n  private applyMediumQualitySettings(): void {\r\n    // 一部の影を有効化\r\n    this.enableLimitedShadows()\r\n    \r\n    // パーティクル効果の部分的な有効化\r\n    this.enableLimitedParticles()\r\n    \r\n    // テクスチャ品質の中程度設定\r\n    this.setMediumTextureQuality()\r\n    \r\n    // 標準的なアニメーションフレームレート\r\n    this.setNormalAnimationFrameRate()\r\n  }\r\n\r\n  /**\r\n   * 高品質設定の適用\r\n   */\r\n  private applyHighQualitySettings(): void {\r\n    // すべての視覚効果を有効化\r\n    this.enableAllVisualEffects()\r\n    \r\n    // 最高品質のテクスチャ\r\n    this.setHighTextureQuality()\r\n    \r\n    // スムーズなアニメーション\r\n    this.setSmoothAnimations()\r\n  }\r\n\r\n  /**\r\n   * メモリクリーンアップ\r\n   */\r\n  private performMemoryCleanup(): void {\r\n    // 未使用のテクスチャを解放\r\n    const textureManager = this.scene.textures\r\n    const keysToRemove: string[] = []\r\n    \r\n    textureManager.list.forEach((texture, key) => {\r\n      // システムテクスチャ以外で参照カウントが0のものを削除\r\n      if (!['__DEFAULT', '__MISSING', '__WHITE'].includes(key)) {\r\n        const isInUse = this.isTextureInUse(key)\r\n        if (!isInUse) {\r\n          keysToRemove.push(key)\r\n        }\r\n      }\r\n    })\r\n    \r\n    // テクスチャの削除\r\n    keysToRemove.forEach(key => {\r\n      try {\r\n        textureManager.remove(key)\r\n      } catch (e) {\r\n        // エラーを無視\r\n      }\r\n    })\r\n    \r\n    // ガベージコレクションの要求（可能な場合）\r\n    if ('gc' in window && typeof (window as any).gc === 'function') {\r\n      (window as any).gc()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * テクスチャが使用中かどうかをチェック\r\n   */\r\n  private isTextureInUse(key: string): boolean {\r\n    // シーン内のすべてのゲームオブジェクトをチェック\r\n    const gameObjects = this.scene.children.list\r\n    \r\n    for (const obj of gameObjects) {\r\n      if ('texture' in obj && (obj as any).texture?.key === key) {\r\n        return true\r\n      }\r\n    }\r\n    \r\n    return false\r\n  }\r\n\r\n  /**\r\n   * バッテリー状態の監視\r\n   */\r\n  private monitorBatteryStatus(): void {\r\n    if ('getBattery' in navigator) {\r\n      (navigator as any).getBattery().then((battery: any) => {\r\n        // バッテリーレベルの監視\r\n        const checkBatteryLevel = () => {\r\n          if (battery.level < 0.2 && !battery.charging) {\r\n            this.enableLowPowerMode()\r\n          } else {\r\n            this.disableLowPowerMode()\r\n          }\r\n        }\r\n        \r\n        // イベントリスナーの設定\r\n        battery.addEventListener('levelchange', checkBatteryLevel)\r\n        battery.addEventListener('chargingchange', checkBatteryLevel)\r\n        \r\n        // 初期チェック\r\n        checkBatteryLevel()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 低電力モードの有効化\r\n   */\r\n  private enableLowPowerMode(): void {\r\n    if (this.isLowPowerMode) return\r\n    \r\n    this.isLowPowerMode = true\r\n    this.setOptimizationLevel('low')\r\n    \r\n    // フレームレートを30fpsに制限\r\n    this.scene.game.loop.targetFps = 30\r\n    \r\n    // 振動機能の無効化\r\n    if ('vibrate' in navigator) {\r\n      navigator.vibrate = () => false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 低電力モードの無効化\r\n   */\r\n  private disableLowPowerMode(): void {\r\n    if (!this.isLowPowerMode) return\r\n    \r\n    this.isLowPowerMode = false\r\n    \r\n    // フレームレートを60fpsに戻す\r\n    this.scene.game.loop.targetFps = 60\r\n  }\r\n\r\n  /**\r\n   * ビジビリティ処理の設定\r\n   */\r\n  private setupVisibilityHandling(): void {\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (document.hidden) {\r\n        // バックグラウンドでは最小限の処理\r\n        this.scene.game.loop.sleep()\r\n      } else {\r\n        // フォアグラウンドで再開\r\n        this.scene.game.loop.wake()\r\n      }\r\n    })\r\n  }\r\n\r\n  // 以下、各種最適化メソッド（実装は省略）\r\n  private disableShadows(): void {}\r\n  private reduceParticles(): void {}\r\n  private reduceTextureQuality(): void {}\r\n  private reduceAnimationFrameRate(): void {}\r\n  private simplifyBackgroundEffects(): void {}\r\n  private enableLimitedShadows(): void {}\r\n  private enableLimitedParticles(): void {}\r\n  private setMediumTextureQuality(): void {}\r\n  private setNormalAnimationFrameRate(): void {}\r\n  private enableAllVisualEffects(): void {}\r\n  private setHighTextureQuality(): void {}\r\n  private setSmoothAnimations(): void {}\r\n\r\n  /**\r\n   * パフォーマンスメトリクスの取得\r\n   */\r\n  public getMetrics(): PerformanceMetrics {\r\n    return { ...this.metrics }\r\n  }\r\n\r\n  /**\r\n   * 現在の最適化レベルを取得\r\n   */\r\n  public getOptimizationLevel(): 'low' | 'medium' | 'high' {\r\n    return this.optimizationLevel\r\n  }\r\n\r\n  /**\r\n   * 破棄処理\r\n   */\r\n  public destroy(): void {\r\n    this.stopMonitoring()\r\n    this.scene.events.off('preupdate', this.measureFPS, this)\r\n  }\r\n}","/**\r\n * タッチジェスチャー認識システム\r\n * \r\n * 対応ジェスチャー:\r\n * - スワイプ（上下左右）\r\n * - ピンチズーム（拡大・縮小）\r\n * - ロングプレス（長押し）\r\n * - ダブルタップ\r\n * - ドラッグ\r\n */\r\n\r\nexport interface GestureEvent {\r\n  type: 'swipe' | 'pinch' | 'longpress' | 'doubletap' | 'drag' | 'dragend' | 'momentum' | 'bounce'\r\n  target: HTMLElement | null\r\n  detail: any\r\n  timestamp: number\r\n  preventDefault: () => void\r\n}\r\n\r\nexport interface SwipeDetail {\r\n  direction: 'up' | 'down' | 'left' | 'right'\r\n  distance: number\r\n  velocity: number\r\n  startX: number\r\n  startY: number\r\n  endX: number\r\n  endY: number\r\n}\r\n\r\nexport interface PinchDetail {\r\n  scale: number\r\n  deltaScale: number\r\n  centerX: number\r\n  centerY: number\r\n}\r\n\r\nexport interface DragDetail {\r\n  deltaX: number\r\n  deltaY: number\r\n  totalX: number\r\n  totalY: number\r\n  startX: number\r\n  startY: number\r\n  currentX: number\r\n  currentY: number\r\n}\r\n\r\nexport interface LongPressDetail {\r\n  x: number\r\n  y: number\r\n  duration: number\r\n}\r\n\r\nexport interface DoubleTapDetail {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport interface MomentumDetail {\r\n  velocityX: number\r\n  velocityY: number\r\n  duration: number\r\n}\r\n\r\nexport interface BounceDetail {\r\n  direction: 'left' | 'right' | 'up' | 'down'\r\n  intensity: number\r\n}\r\n\r\ninterface TouchPoint {\r\n  identifier: number\r\n  x: number\r\n  y: number\r\n  timestamp: number\r\n}\r\n\r\ninterface GestureListener {\r\n  element: HTMLElement\r\n  type: GestureEvent['type']\r\n  handler: (event: GestureEvent) => void\r\n  options?: AddEventListenerOptions\r\n}\r\n\r\nexport class TouchGestureManager {\r\n  private element: HTMLElement\r\n  private touchPoints = new Map<number, TouchPoint>()\r\n  private lastTap: { x: number; y: number; timestamp: number } | null = null\r\n  private longPressTimer: number | null = null\r\n  private isDragging = false\r\n  private dragStartPoint: { x: number; y: number } | null = null\r\n  private dragTotalDelta = { x: 0, y: 0 }\r\n  private listeners = new Map<string, Set<GestureListener>>()\r\n  private preventDefaultGestures = new Set<GestureEvent['type']>()\r\n  \r\n  // モーメンタムスクロール用\r\n  private lastVelocity = { x: 0, y: 0 }\r\n  private momentumTimer: number | null = null\r\n  private lastMoveTime = 0\r\n  private moveHistory: Array<{ x: number; y: number; time: number }> = []\r\n  \r\n  // 設定可能なパラメータ\r\n  private config = {\r\n    swipeThreshold: 50, // px\r\n    swipeVelocityThreshold: 0.3, // px/ms\r\n    doubleTapThreshold: 300, // ms\r\n    doubleTapDistance: 30, // px\r\n    longPressThreshold: 500, // ms\r\n    pinchThreshold: 0.1, // scale change\r\n    dragThreshold: 10, // px\r\n    momentumThreshold: 200, // モーメンタムスクロールの閾値\r\n    friction: 0.95, // 慣性スクロールの摩擦係数\r\n    bounceThreshold: 50, // バウンスバック効果の閾値\r\n  }\r\n\r\n  constructor(element: HTMLElement, config?: Partial<typeof TouchGestureManager.prototype.config>) {\r\n    this.element = element\r\n    if (config) {\r\n      this.config = { ...this.config, ...config }\r\n    }\r\n    this.setupEventListeners()\r\n  }\r\n\r\n  private setupEventListeners(): void {\r\n    // タッチイベント\r\n    this.element.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: false })\r\n    this.element.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false })\r\n    this.element.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false })\r\n    this.element.addEventListener('touchcancel', this.handleTouchCancel.bind(this), { passive: false })\r\n    \r\n    // マウスイベント（デスクトップでのテスト用）\r\n    this.element.addEventListener('mousedown', this.handleMouseDown.bind(this), { passive: false })\r\n    this.element.addEventListener('mousemove', this.handleMouseMove.bind(this), { passive: false })\r\n    this.element.addEventListener('mouseup', this.handleMouseUp.bind(this), { passive: false })\r\n    this.element.addEventListener('mouseleave', this.handleMouseLeave.bind(this), { passive: false })\r\n  }\r\n\r\n  private handleTouchStart(event: TouchEvent): void {\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      const touch = event.changedTouches[i]\r\n      this.touchPoints.set(touch.identifier, {\r\n        identifier: touch.identifier,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n        timestamp: Date.now()\r\n      })\r\n    }\r\n\r\n    // ロングプレス検出\r\n    if (this.touchPoints.size === 1) {\r\n      const touch = event.changedTouches[0]\r\n      this.startLongPressDetection(touch.clientX, touch.clientY)\r\n      \r\n      // ダブルタップ検出\r\n      this.checkDoubleTap(touch.clientX, touch.clientY)\r\n    }\r\n\r\n    if (this.shouldPreventDefault('drag') || this.shouldPreventDefault('pinch')) {\r\n      event.preventDefault()\r\n    }\r\n  }\r\n\r\n  private handleTouchMove(event: TouchEvent): void {\r\n    // ロングプレスをキャンセル\r\n    this.cancelLongPress()\r\n\r\n    // ピンチズーム検出\r\n    if (event.touches.length === 2) {\r\n      this.detectPinch(event)\r\n    }\r\n\r\n    // ドラッグ検出\r\n    if (event.touches.length === 1) {\r\n      this.detectDrag(event.touches[0])\r\n    }\r\n\r\n    // タッチポイントを更新\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      const touch = event.changedTouches[i]\r\n      const point = this.touchPoints.get(touch.identifier)\r\n      if (point) {\r\n        point.x = touch.clientX\r\n        point.y = touch.clientY\r\n        point.timestamp = Date.now()\r\n      }\r\n    }\r\n\r\n    if (this.isDragging && this.shouldPreventDefault('drag')) {\r\n      event.preventDefault()\r\n    }\r\n  }\r\n\r\n  private handleTouchEnd(event: TouchEvent): void {\r\n    this.cancelLongPress()\r\n\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      const touch = event.changedTouches[i]\r\n      const startPoint = this.touchPoints.get(touch.identifier)\r\n      \r\n      if (startPoint) {\r\n        const endPoint = {\r\n          x: touch.clientX,\r\n          y: touch.clientY,\r\n          timestamp: Date.now()\r\n        }\r\n\r\n        // スワイプ検出\r\n        this.detectSwipe(startPoint, endPoint, event.target as HTMLElement)\r\n        \r\n        this.touchPoints.delete(touch.identifier)\r\n      }\r\n    }\r\n\r\n    // ドラッグ終了\r\n    if (this.touchPoints.size === 0 && this.isDragging) {\r\n      this.endDrag(event.changedTouches[0])\r\n    }\r\n  }\r\n\r\n  private handleTouchCancel(event: TouchEvent): void {\r\n    this.cancelLongPress()\r\n    this.touchPoints.clear()\r\n    if (this.isDragging) {\r\n      this.isDragging = false\r\n      this.dragStartPoint = null\r\n      this.dragTotalDelta = { x: 0, y: 0 }\r\n    }\r\n  }\r\n\r\n  // マウスイベントハンドラー（タッチをシミュレート）\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    const fakeTouch = {\r\n      identifier: -1,\r\n      clientX: event.clientX,\r\n      clientY: event.clientY\r\n    }\r\n    \r\n    this.touchPoints.set(-1, {\r\n      identifier: -1,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n      timestamp: Date.now()\r\n    })\r\n\r\n    this.startLongPressDetection(event.clientX, event.clientY)\r\n    this.checkDoubleTap(event.clientX, event.clientY)\r\n  }\r\n\r\n  private handleMouseMove(event: MouseEvent): void {\r\n    if (this.touchPoints.has(-1)) {\r\n      this.cancelLongPress()\r\n      this.detectDrag({\r\n        clientX: event.clientX,\r\n        clientY: event.clientY\r\n      } as Touch)\r\n\r\n      const point = this.touchPoints.get(-1)\r\n      if (point) {\r\n        point.x = event.clientX\r\n        point.y = event.clientY\r\n        point.timestamp = Date.now()\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleMouseUp(event: MouseEvent): void {\r\n    this.cancelLongPress()\r\n    \r\n    const startPoint = this.touchPoints.get(-1)\r\n    if (startPoint) {\r\n      const endPoint = {\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n        timestamp: Date.now()\r\n      }\r\n\r\n      this.detectSwipe(startPoint, endPoint, event.target as HTMLElement)\r\n      this.touchPoints.delete(-1)\r\n    }\r\n\r\n    if (this.isDragging) {\r\n      this.endDrag({\r\n        clientX: event.clientX,\r\n        clientY: event.clientY\r\n      } as Touch)\r\n    }\r\n  }\r\n\r\n  private handleMouseLeave(event: MouseEvent): void {\r\n    this.handleMouseUp(event)\r\n  }\r\n\r\n  private startLongPressDetection(x: number, y: number): void {\r\n    this.longPressTimer = window.setTimeout(() => {\r\n      this.emitGesture('longpress', null, {\r\n        x,\r\n        y,\r\n        duration: this.config.longPressThreshold\r\n      } as LongPressDetail)\r\n    }, this.config.longPressThreshold)\r\n  }\r\n\r\n  private cancelLongPress(): void {\r\n    if (this.longPressTimer !== null) {\r\n      clearTimeout(this.longPressTimer)\r\n      this.longPressTimer = null\r\n    }\r\n  }\r\n\r\n  private checkDoubleTap(x: number, y: number): void {\r\n    const now = Date.now()\r\n    \r\n    if (this.lastTap) {\r\n      const timeDiff = now - this.lastTap.timestamp\r\n      const distance = Math.sqrt(\r\n        Math.pow(x - this.lastTap.x, 2) + \r\n        Math.pow(y - this.lastTap.y, 2)\r\n      )\r\n      \r\n      if (timeDiff < this.config.doubleTapThreshold && \r\n          distance < this.config.doubleTapDistance) {\r\n        this.emitGesture('doubletap', null, { x, y } as DoubleTapDetail)\r\n        this.lastTap = null\r\n        return\r\n      }\r\n    }\r\n    \r\n    this.lastTap = { x, y, timestamp: now }\r\n  }\r\n\r\n  private detectSwipe(start: TouchPoint, end: { x: number; y: number; timestamp: number }, target: HTMLElement): void {\r\n    const deltaX = end.x - start.x\r\n    const deltaY = end.y - start.y\r\n    const deltaTime = end.timestamp - start.timestamp\r\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\r\n    const velocity = distance / deltaTime\r\n\r\n    if (distance < this.config.swipeThreshold || \r\n        velocity < this.config.swipeVelocityThreshold) {\r\n      return\r\n    }\r\n\r\n    const absX = Math.abs(deltaX)\r\n    const absY = Math.abs(deltaY)\r\n    let direction: SwipeDetail['direction']\r\n\r\n    if (absX > absY) {\r\n      direction = deltaX > 0 ? 'right' : 'left'\r\n    } else {\r\n      direction = deltaY > 0 ? 'down' : 'up'\r\n    }\r\n\r\n    const detail: SwipeDetail = {\r\n      direction,\r\n      distance,\r\n      velocity,\r\n      startX: start.x,\r\n      startY: start.y,\r\n      endX: end.x,\r\n      endY: end.y\r\n    }\r\n\r\n    this.emitGesture('swipe', target, detail)\r\n  }\r\n\r\n  private detectPinch(event: TouchEvent): void {\r\n    if (event.touches.length !== 2) return\r\n\r\n    const touch1 = event.touches[0]\r\n    const touch2 = event.touches[1]\r\n    \r\n    const currentDistance = Math.sqrt(\r\n      Math.pow(touch1.clientX - touch2.clientX, 2) +\r\n      Math.pow(touch1.clientY - touch2.clientY, 2)\r\n    )\r\n\r\n    const point1 = this.touchPoints.get(touch1.identifier)\r\n    const point2 = this.touchPoints.get(touch2.identifier)\r\n    \r\n    if (point1 && point2) {\r\n      const previousDistance = Math.sqrt(\r\n        Math.pow(point1.x - point2.x, 2) +\r\n        Math.pow(point1.y - point2.y, 2)\r\n      )\r\n\r\n      const scale = currentDistance / previousDistance\r\n      const deltaScale = scale - 1\r\n\r\n      if (Math.abs(deltaScale) > this.config.pinchThreshold) {\r\n        const centerX = (touch1.clientX + touch2.clientX) / 2\r\n        const centerY = (touch1.clientY + touch2.clientY) / 2\r\n\r\n        const detail: PinchDetail = {\r\n          scale,\r\n          deltaScale,\r\n          centerX,\r\n          centerY\r\n        }\r\n\r\n        this.emitGesture('pinch', event.target as HTMLElement, detail)\r\n      }\r\n    }\r\n  }\r\n\r\n  private detectDrag(touch: Touch): void {\r\n    const currentTime = Date.now()\r\n    \r\n    if (!this.isDragging) {\r\n      if (!this.dragStartPoint) {\r\n        this.dragStartPoint = { x: touch.clientX, y: touch.clientY }\r\n        this.moveHistory = [{ x: touch.clientX, y: touch.clientY, time: currentTime }]\r\n      }\r\n      \r\n      const distance = Math.sqrt(\r\n        Math.pow(touch.clientX - this.dragStartPoint.x, 2) +\r\n        Math.pow(touch.clientY - this.dragStartPoint.y, 2)\r\n      )\r\n      \r\n      if (distance > this.config.dragThreshold) {\r\n        this.isDragging = true\r\n      }\r\n    }\r\n\r\n    if (this.isDragging && this.dragStartPoint) {\r\n      // 移動履歴を更新（速度計算用）\r\n      this.moveHistory.push({ x: touch.clientX, y: touch.clientY, time: currentTime })\r\n      \r\n      // 古い履歴を削除（100ms以上前）\r\n      this.moveHistory = this.moveHistory.filter(point => currentTime - point.time < 100)\r\n      \r\n      const deltaX = touch.clientX - (this.dragStartPoint.x + this.dragTotalDelta.x)\r\n      const deltaY = touch.clientY - (this.dragStartPoint.y + this.dragTotalDelta.y)\r\n      \r\n      this.dragTotalDelta.x += deltaX\r\n      this.dragTotalDelta.y += deltaY\r\n\r\n      const detail: DragDetail = {\r\n        deltaX,\r\n        deltaY,\r\n        totalX: this.dragTotalDelta.x,\r\n        totalY: this.dragTotalDelta.y,\r\n        startX: this.dragStartPoint.x,\r\n        startY: this.dragStartPoint.y,\r\n        currentX: touch.clientX,\r\n        currentY: touch.clientY\r\n      }\r\n\r\n      this.emitGesture('drag', document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement, detail)\r\n      this.lastMoveTime = currentTime\r\n    }\r\n  }\r\n\r\n  private endDrag(touch: Touch): void {\r\n    if (this.isDragging && this.dragStartPoint) {\r\n      // 速度を計算\r\n      this.calculateVelocity()\r\n      \r\n      const detail: DragDetail = {\r\n        deltaX: 0,\r\n        deltaY: 0,\r\n        totalX: this.dragTotalDelta.x,\r\n        totalY: this.dragTotalDelta.y,\r\n        startX: this.dragStartPoint.x,\r\n        startY: this.dragStartPoint.y,\r\n        currentX: touch.clientX,\r\n        currentY: touch.clientY\r\n      }\r\n\r\n      this.emitGesture('dragend', document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement, detail)\r\n      \r\n      // モーメンタムスクロールを開始\r\n      this.startMomentumScroll()\r\n    }\r\n\r\n    this.isDragging = false\r\n    this.dragStartPoint = null\r\n    this.dragTotalDelta = { x: 0, y: 0 }\r\n    this.moveHistory = []\r\n  }\r\n\r\n  private calculateVelocity(): void {\r\n    if (this.moveHistory.length < 2) {\r\n      this.lastVelocity = { x: 0, y: 0 }\r\n      return\r\n    }\r\n\r\n    const latest = this.moveHistory[this.moveHistory.length - 1]\r\n    const previous = this.moveHistory[this.moveHistory.length - 2]\r\n    \r\n    const timeDelta = latest.time - previous.time\r\n    if (timeDelta === 0) {\r\n      this.lastVelocity = { x: 0, y: 0 }\r\n      return\r\n    }\r\n\r\n    this.lastVelocity = {\r\n      x: (latest.x - previous.x) / timeDelta,\r\n      y: (latest.y - previous.y) / timeDelta\r\n    }\r\n  }\r\n\r\n  private startMomentumScroll(): void {\r\n    const speed = Math.sqrt(\r\n      this.lastVelocity.x * this.lastVelocity.x + \r\n      this.lastVelocity.y * this.lastVelocity.y\r\n    )\r\n\r\n    if (speed < this.config.momentumThreshold / 1000) {\r\n      return // 速度が不十分\r\n    }\r\n\r\n    this.stopMomentumScroll()\r\n    \r\n    let velocityX = this.lastVelocity.x\r\n    let velocityY = this.lastVelocity.y\r\n    let lastTime = Date.now()\r\n\r\n    const tick = () => {\r\n      const currentTime = Date.now()\r\n      const deltaTime = currentTime - lastTime\r\n      lastTime = currentTime\r\n\r\n      // 摩擦を適用\r\n      velocityX *= this.config.friction\r\n      velocityY *= this.config.friction\r\n\r\n      const speed = Math.sqrt(velocityX * velocityX + velocityY * velocityY)\r\n      \r\n      if (speed < 0.01) {\r\n        this.stopMomentumScroll()\r\n        return\r\n      }\r\n\r\n      // モーメンタムイベントを発火\r\n      const detail: MomentumDetail = {\r\n        velocityX,\r\n        velocityY,\r\n        duration: deltaTime\r\n      }\r\n\r\n      this.emitGesture('momentum', null, detail)\r\n      \r\n      this.momentumTimer = requestAnimationFrame(tick)\r\n    }\r\n\r\n    this.momentumTimer = requestAnimationFrame(tick)\r\n  }\r\n\r\n  private stopMomentumScroll(): void {\r\n    if (this.momentumTimer !== null) {\r\n      cancelAnimationFrame(this.momentumTimer)\r\n      this.momentumTimer = null\r\n    }\r\n  }\r\n\r\n  private emitGesture(type: GestureEvent['type'], target: HTMLElement | null, detail: any): void {\r\n    const event: GestureEvent = {\r\n      type,\r\n      target,\r\n      detail,\r\n      timestamp: Date.now(),\r\n      preventDefault: () => this.preventDefaultGestures.add(type)\r\n    }\r\n\r\n    const listeners = this.listeners.get(type)\r\n    if (listeners) {\r\n      listeners.forEach(listener => {\r\n        if (!listener.element || listener.element === target || listener.element.contains(target!)) {\r\n          listener.handler(event)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  private shouldPreventDefault(type: GestureEvent['type']): boolean {\r\n    return this.preventDefaultGestures.has(type)\r\n  }\r\n\r\n  public on(type: GestureEvent['type'], handler: (event: GestureEvent) => void, element?: HTMLElement): void {\r\n    const listener: GestureListener = {\r\n      element: element || this.element,\r\n      type,\r\n      handler\r\n    }\r\n\r\n    if (!this.listeners.has(type)) {\r\n      this.listeners.set(type, new Set())\r\n    }\r\n    \r\n    this.listeners.get(type)!.add(listener)\r\n  }\r\n\r\n  public off(type: GestureEvent['type'], handler: (event: GestureEvent) => void): void {\r\n    const listeners = this.listeners.get(type)\r\n    if (listeners) {\r\n      listeners.forEach(listener => {\r\n        if (listener.handler === handler) {\r\n          listeners.delete(listener)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  public setPreventDefault(type: GestureEvent['type'], prevent: boolean): void {\r\n    if (prevent) {\r\n      this.preventDefaultGestures.add(type)\r\n    } else {\r\n      this.preventDefaultGestures.delete(type)\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: Partial<typeof TouchGestureManager.prototype.config>): void {\r\n    this.config = { ...this.config, ...config }\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.element.removeEventListener('touchstart', this.handleTouchStart.bind(this))\r\n    this.element.removeEventListener('touchmove', this.handleTouchMove.bind(this))\r\n    this.element.removeEventListener('touchend', this.handleTouchEnd.bind(this))\r\n    this.element.removeEventListener('touchcancel', this.handleTouchCancel.bind(this))\r\n    this.element.removeEventListener('mousedown', this.handleMouseDown.bind(this))\r\n    this.element.removeEventListener('mousemove', this.handleMouseMove.bind(this))\r\n    this.element.removeEventListener('mouseup', this.handleMouseUp.bind(this))\r\n    this.element.removeEventListener('mouseleave', this.handleMouseLeave.bind(this))\r\n    \r\n    this.cancelLongPress()\r\n    this.stopMomentumScroll()\r\n    this.touchPoints.clear()\r\n    this.listeners.clear()\r\n    this.preventDefaultGestures.clear()\r\n    this.moveHistory = []\r\n  }\r\n}\r\n\r\n// タッチ対応のユーティリティ関数\r\nexport const isTouchDevice = (): boolean => {\r\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\r\n}\r\n\r\nexport const getPointerPosition = (event: TouchEvent | MouseEvent): { x: number; y: number } => {\r\n  if ('touches' in event && event.touches.length > 0) {\r\n    return {\r\n      x: event.touches[0].clientX,\r\n      y: event.touches[0].clientY\r\n    }\r\n  } else if ('clientX' in event) {\r\n    return {\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    }\r\n  }\r\n  return { x: 0, y: 0 }\r\n}\r\n\r\n// デバイス性能チェック\r\nexport const getDeviceInfo = () => {\r\n  const userAgent = navigator.userAgent.toLowerCase()\r\n  const isIOS = /iphone|ipad|ipod/.test(userAgent)\r\n  const isAndroid = /android/.test(userAgent)\r\n  const isMobile = isIOS || isAndroid || isTouchDevice()\r\n  \r\n  // ハードウェア情報の取得（可能な場合）\r\n  const hardwareConcurrency = navigator.hardwareConcurrency || 4\r\n  const deviceMemory = (navigator as any).deviceMemory || 4\r\n  \r\n  // パフォーマンスレベルの推定\r\n  let performanceLevel: 'low' | 'medium' | 'high' = 'medium'\r\n  \r\n  if (deviceMemory <= 2 || hardwareConcurrency <= 2) {\r\n    performanceLevel = 'low'\r\n  } else if (deviceMemory >= 6 && hardwareConcurrency >= 6) {\r\n    performanceLevel = 'high'\r\n  }\r\n  \r\n  return {\r\n    isIOS,\r\n    isAndroid,\r\n    isMobile,\r\n    hardwareConcurrency,\r\n    deviceMemory,\r\n    performanceLevel,\r\n    supportsVibration: 'vibrate' in navigator,\r\n    supportsWakeLock: 'wakeLock' in navigator\r\n  }\r\n}\r\n\r\n// 最適化されたタッチ設定を取得\r\nexport const getOptimizedTouchConfig = () => {\r\n  const deviceInfo = getDeviceInfo()\r\n  \r\n  const baseConfig = {\r\n    swipeThreshold: 50,\r\n    swipeVelocityThreshold: 0.3,\r\n    doubleTapThreshold: 300,\r\n    doubleTapDistance: 30,\r\n    longPressThreshold: 500,\r\n    pinchThreshold: 0.1,\r\n    dragThreshold: 10,\r\n    momentumThreshold: 200,\r\n    friction: 0.95,\r\n    bounceThreshold: 50,\r\n  }\r\n  \r\n  // デバイス性能に基づく調整\r\n  switch (deviceInfo.performanceLevel) {\r\n    case 'low':\r\n      return {\r\n        ...baseConfig,\r\n        friction: 0.9, // より早い減速\r\n        momentumThreshold: 300, // より高い閾値\r\n      }\r\n    case 'high':\r\n      return {\r\n        ...baseConfig,\r\n        friction: 0.98, // よりスムーズな減速\r\n        momentumThreshold: 150, // より低い閾値\r\n        dragThreshold: 5, // より敏感なドラッグ\r\n      }\r\n    default:\r\n      return baseConfig\r\n  }\r\n}\r\n\r\n// 振動フィードバックのユーティリティ\r\nexport const vibrate = (pattern: number | number[], fallback?: () => void) => {\r\n  if ('vibrate' in navigator) {\r\n    navigator.vibrate(pattern)\r\n  } else if (fallback) {\r\n    fallback()\r\n  }\r\n}","import Phaser from 'phaser'\r\nimport { gameConfig } from './config/gameConfig'\r\nimport { PreloadScene } from './scenes/PreloadScene'\r\nimport { MainMenuScene } from './scenes/MainMenuScene'\r\nimport { GameScene } from './scenes/GameScene'\r\nimport { TouchGestureManager } from './input/TouchGestureManager'\r\n\r\n/**\r\n * Phaserゲームを管理するクラス\r\n */\r\nexport class GameManager {\r\n  private game: Phaser.Game | null = null\r\n  private static instance: GameManager | null = null\r\n  private touchGestureManager: TouchGestureManager | null = null\r\n  private isMobile: boolean = false\r\n\r\n  private constructor() {}\r\n\r\n  /**\r\n   * シングルトンインスタンスを取得\r\n   */\r\n  static getInstance(): GameManager {\r\n    if (!GameManager.instance) {\r\n      GameManager.instance = new GameManager()\r\n    }\r\n    return GameManager.instance\r\n  }\r\n\r\n  /**\r\n   * ゲームを初期化\r\n   */\r\n  initialize(parent: string | HTMLElement): void {\r\n    \r\n    if (this.game) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      // モバイル判定\r\n      this.isMobile = this.checkMobileDevice()\r\n      \r\n      // 設定をコピー（元の設定を変更しないため）\r\n      const config = { ...gameConfig }\r\n      config.parent = parent\r\n      \r\n      // モバイル最適化\r\n      if (this.isMobile) {\r\n        // ビューポート設定\r\n        this.setupMobileViewport()\r\n        \r\n        // モバイル用の設定調整\r\n        config.scale = {\r\n          ...config.scale,\r\n          mode: Phaser.Scale.RESIZE,\r\n          width: window.innerWidth,\r\n          height: window.innerHeight\r\n        }\r\n      }\r\n      \r\n      // シーンを追加\r\n      config.scene = [\r\n        PreloadScene,\r\n        MainMenuScene,\r\n        GameScene\r\n      ]\r\n\r\n      \r\n      // ゲームインスタンスを作成\r\n      this.game = new Phaser.Game(config)\r\n      \r\n      // タッチジェスチャーマネージャーを初期化\r\n      if (typeof parent === 'string') {\r\n        const element = document.getElementById(parent)\r\n        if (element) {\r\n          this.initializeTouchGestures(element)\r\n        }\r\n      } else if (parent instanceof HTMLElement) {\r\n        this.initializeTouchGestures(parent)\r\n      }\r\n      \r\n      // 画面回転とリサイズの処理\r\n      this.setupResponsiveHandlers()\r\n      \r\n    } catch (error) {\r\n      console.error('❌ GameManager: ゲーム初期化エラー:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ゲームを破棄\r\n   */\r\n  destroy(): void {\r\n    // タッチジェスチャーマネージャーを破棄\r\n    if (this.touchGestureManager) {\r\n      this.touchGestureManager.destroy()\r\n      this.touchGestureManager = null\r\n    }\r\n    \r\n    // リサイズハンドラーを削除\r\n    this.removeResponsiveHandlers()\r\n    \r\n    if (this.game) {\r\n      this.game.destroy(true, false)\r\n      this.game = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ゲームが初期化されているか\r\n   */\r\n  isInitialized(): boolean {\r\n    return this.game !== null\r\n  }\r\n\r\n  /**\r\n   * 現在のシーンを取得\r\n   */\r\n  getCurrentScene(): string | null {\r\n    if (!this.game) return null\r\n    \r\n    const scenes = this.game.scene.getScenes(true)\r\n    return scenes.length > 0 ? scenes[0].scene.key : null\r\n  }\r\n\r\n  /**\r\n   * シーンを切り替え\r\n   */\r\n  switchScene(sceneKey: string, data?: object): void {\r\n    if (!this.game) {\r\n      if (import.meta.env.DEV) console.error('Game is not initialized')\r\n      return\r\n    }\r\n\r\n    const currentScene = this.game.scene.getScenes(true)[0]\r\n    if (currentScene) {\r\n      currentScene.scene.start(sceneKey, data)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ゲームをリセット\r\n   */\r\n  reset(): void {\r\n    if (!this.game) return\r\n    \r\n    // すべてのシーンを停止\r\n    this.game.scene.getScenes(true).forEach(scene => {\r\n      scene.scene.stop()\r\n    })\r\n    \r\n    // プリロードシーンから再開\r\n    this.game.scene.start('PreloadScene')\r\n  }\r\n\r\n  /**\r\n   * キャッシュをクリア（メモリ最適化）\r\n   */\r\n  clearCache(): void {\r\n    if (!this.game) return\r\n    \r\n    // テクスチャキャッシュをクリア（使用中のものは除く）\r\n    const textureManager = this.game.textures\r\n    const keysToRemove: string[] = []\r\n    \r\n    textureManager.list.forEach((texture, key) => {\r\n      // システムテクスチャ以外を削除対象に\r\n      if (key !== '__DEFAULT' && key !== '__MISSING' && key !== '__WHITE') {\r\n        keysToRemove.push(key)\r\n      }\r\n    })\r\n    \r\n    // 使用されていないテクスチャを削除\r\n    keysToRemove.forEach(key => {\r\n      try {\r\n        textureManager.remove(key)\r\n      } catch (e) {\r\n        // 使用中のテクスチャは削除できない\r\n      }\r\n    })\r\n    \r\n    // サウンドキャッシュをクリア\r\n    if (this.game.sound) {\r\n      this.game.sound.removeAll()\r\n    }\r\n    \r\n    // ガベージコレクションをトリガー（可能な場合）\r\n    if (typeof window !== 'undefined' && (window as any).gc) {\r\n      (window as any).gc()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * モバイルデバイスかどうかをチェック\r\n   */\r\n  private checkMobileDevice(): boolean {\r\n    const userAgent = navigator.userAgent || navigator.vendor || (window as any).opera\r\n    \r\n    // タッチデバイスの検出\r\n    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0\r\n    \r\n    // モバイルユーザーエージェントの検出\r\n    const mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n    const isMobileUA = mobileRegex.test(userAgent)\r\n    \r\n    // 画面サイズによる検出\r\n    const isMobileSize = window.innerWidth <= 768\r\n    \r\n    return isTouchDevice || isMobileUA || isMobileSize\r\n  }\r\n\r\n  /**\r\n   * モバイルビューポートの設定\r\n   */\r\n  private setupMobileViewport(): void {\r\n    // ビューポートメタタグの設定/更新\r\n    let viewport = document.querySelector('meta[name=\"viewport\"]')\r\n    if (!viewport) {\r\n      viewport = document.createElement('meta')\r\n      viewport.setAttribute('name', 'viewport')\r\n      document.head.appendChild(viewport)\r\n    }\r\n    \r\n    viewport.setAttribute('content', \r\n      'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover'\r\n    )\r\n    \r\n    // iOSのスクロールバウンスを無効化\r\n    document.body.style.touchAction = 'none'\r\n    document.body.style.overscrollBehavior = 'none'\r\n    document.body.style.webkitOverflowScrolling = 'touch'\r\n    \r\n    // フルスクリーン対応\r\n    document.body.style.position = 'fixed'\r\n    document.body.style.width = '100%'\r\n    document.body.style.height = '100%'\r\n    document.body.style.overflow = 'hidden'\r\n  }\r\n\r\n  /**\r\n   * タッチジェスチャーの初期化\r\n   */\r\n  private initializeTouchGestures(element: HTMLElement): void {\r\n    this.touchGestureManager = new TouchGestureManager(element, {\r\n      swipeThreshold: 50,\r\n      swipeVelocityThreshold: 0.3,\r\n      doubleTapThreshold: 300,\r\n      longPressThreshold: 500,\r\n      pinchThreshold: 0.1,\r\n      dragThreshold: 10\r\n    })\r\n    \r\n    // グローバルジェスチャーハンドラーの設定\r\n    this.setupGlobalGestures()\r\n  }\r\n\r\n  /**\r\n   * グローバルジェスチャーの設定\r\n   */\r\n  private setupGlobalGestures(): void {\r\n    if (!this.touchGestureManager) return\r\n    \r\n    // ピンチズームでの画面調整\r\n    this.touchGestureManager.on('pinch', (event) => {\r\n      if (event.detail.scale > 1.2) {\r\n        // ズームイン時の処理\r\n        this.handleZoomIn()\r\n      } else if (event.detail.scale < 0.8) {\r\n        // ズームアウト時の処理\r\n        this.handleZoomOut()\r\n      }\r\n    })\r\n    \r\n    // ダブルタップでフルスクリーン切り替え\r\n    this.touchGestureManager.on('doubletap', () => {\r\n      this.toggleFullscreen()\r\n    })\r\n    \r\n    // ドラッグとスワイプのデフォルト動作を防止\r\n    this.touchGestureManager.setPreventDefault('drag', true)\r\n    this.touchGestureManager.setPreventDefault('swipe', true)\r\n  }\r\n\r\n  /**\r\n   * レスポンシブハンドラーの設定\r\n   */\r\n  private setupResponsiveHandlers(): void {\r\n    // 画面回転の処理\r\n    this.handleOrientationChange = this.handleOrientationChange.bind(this)\r\n    window.addEventListener('orientationchange', this.handleOrientationChange)\r\n    \r\n    // リサイズの処理\r\n    this.handleResize = this.handleResize.bind(this)\r\n    window.addEventListener('resize', this.handleResize)\r\n    \r\n    // ビジビリティ変更の処理（バックグラウンド時の処理）\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange)\r\n  }\r\n\r\n  /**\r\n   * レスポンシブハンドラーの削除\r\n   */\r\n  private removeResponsiveHandlers(): void {\r\n    window.removeEventListener('orientationchange', this.handleOrientationChange)\r\n    window.removeEventListener('resize', this.handleResize)\r\n    document.removeEventListener('visibilitychange', this.handleVisibilityChange)\r\n  }\r\n\r\n  /**\r\n   * 画面回転の処理\r\n   */\r\n  private handleOrientationChange(): void {\r\n    // 回転後の遅延処理\r\n    setTimeout(() => {\r\n      this.handleResize()\r\n      \r\n      // ゲームシーンに回転を通知\r\n      if (this.game) {\r\n        const activeScene = this.game.scene.getScenes(true)[0]\r\n        if (activeScene?.events) {\r\n          activeScene.events.emit('orientationchange', window.orientation)\r\n        }\r\n      }\r\n    }, 300)\r\n  }\r\n\r\n  /**\r\n   * リサイズの処理\r\n   */\r\n  private handleResize(): void {\r\n    if (!this.game) return\r\n    \r\n    // Phaserのリサイズ処理\r\n    this.game.scale.resize(window.innerWidth, window.innerHeight)\r\n    \r\n    // セーフエリアの再計算\r\n    this.updateSafeArea()\r\n  }\r\n\r\n  /**\r\n   * ビジビリティ変更の処理\r\n   */\r\n  private handleVisibilityChange(): void {\r\n    if (!this.game) return\r\n    \r\n    if (document.hidden) {\r\n      // バックグラウンドに移行した時\r\n      this.game.sound.pauseAll()\r\n      this.game.loop.sleep()\r\n    } else {\r\n      // フォアグラウンドに復帰した時\r\n      this.game.sound.resumeAll()\r\n      this.game.loop.wake()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * セーフエリアの更新\r\n   */\r\n  private updateSafeArea(): void {\r\n    const safeAreaInsets = {\r\n      top: parseInt(getComputedStyle(document.documentElement).getPropertyValue('env(safe-area-inset-top)') || '0'),\r\n      right: parseInt(getComputedStyle(document.documentElement).getPropertyValue('env(safe-area-inset-right)') || '0'),\r\n      bottom: parseInt(getComputedStyle(document.documentElement).getPropertyValue('env(safe-area-inset-bottom)') || '0'),\r\n      left: parseInt(getComputedStyle(document.documentElement).getPropertyValue('env(safe-area-inset-left)') || '0')\r\n    }\r\n    \r\n    // セーフエリア情報をゲームに保存\r\n    if (this.game && this.game.registry) {\r\n      this.game.registry.set('safeAreaInsets', safeAreaInsets)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ズームイン処理\r\n   */\r\n  private handleZoomIn(): void {\r\n    if (this.game) {\r\n      const currentZoom = this.game.scale.zoom\r\n      this.game.scale.setZoom(Math.min(currentZoom * 1.1, 2))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ズームアウト処理\r\n   */\r\n  private handleZoomOut(): void {\r\n    if (this.game) {\r\n      const currentZoom = this.game.scale.zoom\r\n      this.game.scale.setZoom(Math.max(currentZoom * 0.9, 0.5))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * フルスクリーン切り替え\r\n   */\r\n  private toggleFullscreen(): void {\r\n    if (!document.fullscreenElement) {\r\n      document.documentElement.requestFullscreen().catch(err => {\r\n        console.warn('フルスクリーンリクエストに失敗:', err)\r\n      })\r\n    } else {\r\n      document.exitFullscreen()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * タッチジェスチャーマネージャーを取得\r\n   */\r\n  getTouchGestureManager(): TouchGestureManager | null {\r\n    return this.touchGestureManager\r\n  }\r\n\r\n  /**\r\n   * モバイルデバイスかどうかを取得\r\n   */\r\n  getIsMobile(): boolean {\r\n    return this.isMobile\r\n  }\r\n\r\n}"],"names":["UnifiedAnimationManager","config","__publicField","ref","__spreadValues","e","element","type","id","_a","_b","state","x","y","count","container","i","particle","fromElement","toElement","direction","resolve","duration","easing","message","overlay","rect","centerX","centerY","wave","card","effect","speed","animation","animationId","loop","now","completedAnimations","elapsed","delay","c","animClass","animClasses","index","size","hue","onComplete","angle","velocity","startTime","animate","progress","distance","transforms","animationManagerInstance","getUnifiedAnimationManager","gameConfig","Phaser","GAME_CONSTANTS","TutorialManager","scene","options","__async","error","stepIndex","step","currentStep","elementName","highlightOptions","storageKey","TUTORIAL_STORAGE_KEYS","tutorialId","saved","interval","timeout","validation","checkInterval","gameState","timeoutId","overlayOptions","bounds","completed","event","data","TutorialOverlay","camera","targetElement","radius","targetBounds","bubbleMaxWidth","background","titleText","descriptionText","titleHeight","descriptionHeight","totalHeight","bubbleWidth","position","bubbleBounds","margin","totalSteps","barWidth","barHeight","progressWidth","progressBar","progressText","canGoBack","canSkip","onNext","onBack","onSkip","buttons","totalWidth","backButton","nextButton","skipButton","currentX","button","text","color","onClick","colorValue","hoverBackground","buttonText","highlight","finalOptions","borderColorValue","glow","glowColorValue","target","fromX","fromY","toX","toY","arrowX","arrowY","arrow","firstElement","mockElement","cursors","_c","_d","_e","_f","_g","firstButton","isSmallScreen","mobileButtonHeight","mobileButtonWidth","maxWidth","tabletButtonHeight","tabletButtonWidth","child","width","height","graphics","announcement","canvas","visible","setupGlobalTutorialTests","INTERACTIVE_GAME_TUTORIAL","hand","DropZoneManager","zone","zoneId","game","currentTime","newHoveredZone","dropZone","result","a","b","oldGraphics","hover","dx","dy","DropZoneValidators","allowedTypes","allowedPhases","currentPhase","minPower","maxPower","maxCost","requiredVitality","currentHandSize","maxHandSize","allowedStages","minAge","maxAge","age","validator","validators","condition","thenValidator","elseValidator","DropZoneActions","shuffle","amount","maxVitality","effectName","_game","actions","action","thenAction","elseAction","DropZonePresets","requiredCardType","vitalityCost","DropZoneIntegration","isMobile","isTablet","hasTouch","orientation","challengePreset","challengeZone","discardPreset","discardZone","cardContainer","pointer","dragX","dragY","adjustedPosition","snapTarget","_pointer","_card","finalPosition","dropResult","snapPosition","_result","trail","newAlpha","feedback","originalX","KeyboardController","callback","keyboard","currentElement","nearestIndex","actionCallback","elementCallback","currentBounds","nearestDistance","isInDirection","hintText","WebAudioSoundGenerator","time","osc","gain","bufferSize","buffer","noise","filter","freq","start","osc1","osc2","j","_SoundManager","key","frequency","_type","soundKey","soundKeys","_variations","volume","enabled","sound","savedVolume","savedEnabled","SoundManager","EventCleanupManager","listener","emitter","fn","context","domListeners","phaserListeners","domCount","phaserCount","listeners","report","MobilePerformanceManager","thresholds","renderer","gl","currentFPS","avgFPS","memoryInfo","needsOptimization","fps","level","textureManager","keysToRemove","texture","gameObjects","obj","battery","checkBatteryLevel","TouchGestureManager","touch","point","startPoint","endPoint","timeDiff","end","deltaX","deltaY","deltaTime","absX","absY","detail","touch1","touch2","currentDistance","point1","point2","previousDistance","scale","deltaScale","latest","previous","timeDelta","velocityX","velocityY","lastTime","tick","handler","prevent","_GameManager","parent","__spreadProps","PreloadScene","MainMenuScene","GameScene","scenes","sceneKey","currentScene","userAgent","isTouchDevice","isMobileUA","isMobileSize","viewport","activeScene","safeAreaInsets","currentZoom","err","GameManager"],"mappings":"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"}