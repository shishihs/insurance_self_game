{"version":3,"file":"game-engine-CjfMJf0y.js","sources":["../../src/game/config/gameConfig.ts","../../src/game/scenes/BaseScene.ts","../../src/game/scenes/PreloadScene.ts","../../src/game/scenes/MainMenuScene.ts","../../src/game/systems/TutorialManager.ts","../../src/game/ui/TutorialOverlay.ts","../../src/game/tutorial/InteractiveTutorialConfig.ts","../../src/game/systems/DropZoneManager.ts","../../src/game/systems/DropZoneValidators.ts","../../src/game/systems/DropZoneIntegration.ts","../../src/game/scenes/GameScene.ts","../../src/game/GameManager.ts"],"sourcesContent":["import Phaser from 'phaser'\n\n/**\n * Phaserゲームの基本設定\n */\nexport const gameConfig: Phaser.Types.Core.GameConfig = {\n  type: Phaser.AUTO,\n  parent: 'game-container',\n  backgroundColor: '#f5f5f5',\n  scale: {\n    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n    width: 1280,\n    height: 720,\n    min: {\n      width: 640,\n      height: 360\n    },\n    max: {\n      width: 1920,\n      height: 1080\n    }\n  },\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: { y: 0 },\n      debug: false\n    }\n  },\n  scene: [] // シーンは後で追加\n}\n\n/**\n * ゲーム定数\n */\nexport const GAME_CONSTANTS = {\n  // カード関連\n  CARD_WIDTH: 120,\n  CARD_HEIGHT: 180,\n  CARD_SCALE: 1,\n  CARD_HOVER_SCALE: 1.1,\n  CARD_SPACING: 20,\n  \n  // アニメーション時間（ミリ秒）\n  CARD_FLIP_DURATION: 300,\n  CARD_MOVE_DURATION: 200,\n  CARD_DRAW_DURATION: 400,\n  \n  // レイアウト\n  HAND_Y_POSITION: 550,\n  CHALLENGE_Y_POSITION: 200,\n  DECK_X_POSITION: 100,\n  DECK_Y_POSITION: 550,\n  DISCARD_X_POSITION: 1180,\n  DISCARD_Y_POSITION: 550,\n  \n  // ゲームプレイ\n  MAX_HAND_SIZE: 7,\n  INITIAL_DRAW: 5,\n  TURN_DRAW: 1,\n  \n  // ステージ設定\n  STAGE_TURNS: {\n    youth: 10,      // 青年期: 10ターン\n    middle: 15,     // 中年期: 15ターン\n    fulfillment: 20 // 充実期: 20ターン\n  },\n  \n  // 勝利条件\n  VICTORY_VITALITY: 30,  // 活力30以上でクリア\n  \n  // ドラッグ&ドロップ\n  DRAG_DROP: {\n    SNAP_DISTANCE: 100,           // スナップが発動する距離（px）\n    DRAG_ALPHA: 0.8,              // ドラッグ中の透明度\n    DRAG_SCALE: 1.15,             // ドラッグ中の拡大率\n    DROP_ZONE_SCALE: 1.2,         // ドロップゾーンハイライト時の拡大率\n    SNAP_DURATION: 200,           // スナップアニメーション時間（ms）\n    BOUNCE_DURATION: 400,         // バウンス効果時間（ms）\n    VIBRATION_DURATION: 150,      // 振動効果時間（ms）\n    MOBILE_TOUCH_OFFSET: 60,      // モバイルでの指オフセット（px）\n    GLOW_PULSE_DURATION: 1000,    // グロウパルス周期（ms）\n  },\n  \n  // カラー\n  COLORS: {\n    LIFE_CARD: 0x4C6EF5,\n    INSURANCE_CARD: 0x51CF66,\n    PITFALL_CARD: 0xFF6B6B,\n    HIGHLIGHT: 0xFFD43B,\n    SELECTED: 0x748FFC,\n    DROP_ZONE_VALID: 0x51CF66,    // 有効ドロップゾーン\n    DROP_ZONE_INVALID: 0xFF6B6B,  // 無効ドロップゾーン\n    DROP_ZONE_HOVER: 0xFFD43B,    // ホバー中ドロップゾーン\n    DRAG_SHADOW: 0x000000,        // ドラッグ時シャドウ\n    MAGNETIC_GLOW: 0x00FFFF,      // マグネット効果グロウ\n  }\n}","import { Scene } from 'phaser'\n\n/**\n * すべてのシーンの基底クラス\n */\nexport abstract class BaseScene extends Scene {\n  protected centerX!: number\n  protected centerY!: number\n  protected gameWidth!: number\n  protected gameHeight!: number\n\n  create(): void {\n    // 画面サイズの取得\n    this.gameWidth = this.cameras.main.width\n    this.gameHeight = this.cameras.main.height\n    this.centerX = this.gameWidth / 2\n    this.centerY = this.gameHeight / 2\n\n    // 各シーンの初期化\n    this.initialize()\n  }\n\n  /**\n   * 各シーンで実装する初期化処理\n   */\n  protected abstract initialize(): void\n\n  /**\n   * フェードイン効果\n   */\n  protected fadeIn(duration: number = 500): void {\n    this.cameras.main.fadeIn(duration, 0, 0, 0)\n  }\n\n  /**\n   * フェードアウト効果\n   */\n  protected fadeOut(duration: number = 500, callback?: () => void): void {\n    this.cameras.main.fadeOut(duration, 0, 0, 0)\n    \n    if (callback) {\n      this.cameras.main.once('camerafadeoutcomplete', callback)\n    }\n  }\n\n  /**\n   * テキストスタイルのデフォルト設定\n   */\n  protected getTextStyle(size: number = 24): Phaser.Types.GameObjects.Text.TextStyle {\n    return {\n      fontFamily: 'Noto Sans JP',\n      fontSize: `${size}px`,\n      color: '#333333'\n    }\n  }\n\n  /**\n   * ボタンを作成\n   */\n  protected createButton(\n    x: number,\n    y: number,\n    text: string,\n    onClick: () => void,\n    style?: Phaser.Types.GameObjects.Text.TextStyle\n  ): Phaser.GameObjects.Text {\n    const button = this.add.text(x, y, text, style || this.getTextStyle())\n      .setOrigin(0.5)\n      .setInteractive({ useHandCursor: true })\n      .setPadding(20, 10)\n      .setBackgroundColor('#4C6EF5')\n      .setColor('#ffffff')\n\n    // ホバー効果\n    button.on('pointerover', () => {\n      button.setBackgroundColor('#364FC7')\n      button.setScale(1.05)\n    })\n\n    button.on('pointerout', () => {\n      button.setBackgroundColor('#4C6EF5')\n      button.setScale(1)\n    })\n\n    button.on('pointerdown', () => {\n      button.setScale(0.95)\n    })\n\n    button.on('pointerup', () => {\n      button.setScale(1.05)\n      onClick()\n    })\n\n    return button\n  }\n}","import { BaseScene } from './BaseScene'\n\n/**\n * アセットをロードするシーン\n */\nexport class PreloadScene extends BaseScene {\n  constructor() {\n    super({ key: 'PreloadScene' })\n  }\n\n  preload(): void {\n    // ローディングバーの作成\n    const progressBar = this.add.graphics()\n    const progressBox = this.add.graphics()\n    progressBox.fillStyle(0x222222, 0.8)\n    progressBox.fillRect(240, 270, 320, 50)\n\n    const loadingText = this.add.text(\n      this.cameras.main.centerX,\n      this.cameras.main.centerY - 50,\n      'Loading...',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    const percentText = this.add.text(\n      this.cameras.main.centerX,\n      this.cameras.main.centerY - 5,\n      '0%',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    // ローディング進捗の更新\n    this.load.on('progress', (value: number) => {\n      percentText.setText(`${Math.round(value * 100)}%`)\n      progressBar.clear()\n      progressBar.fillStyle(0xffffff, 1)\n      progressBar.fillRect(250, 280, 300 * value, 30)\n    })\n\n    // ローディング完了\n    this.load.on('complete', () => {\n      progressBar.destroy()\n      progressBox.destroy()\n      loadingText.destroy()\n      percentText.destroy()\n    })\n\n    // アセットのロード\n    this.loadAssets()\n  }\n\n  /**\n   * アセットをロード\n   */\n  private loadAssets(): void {\n    // カード裏面\n    this.createCardBack()\n    \n    // カード表面（仮の画像を生成）\n    this.createCardFaces()\n    \n    // UI要素\n    this.createUIAssets()\n  }\n\n  /**\n   * カード裏面を動的に生成\n   */\n  private createCardBack(): void {\n    const graphics = this.add.graphics()\n    \n    // カード背景\n    graphics.fillStyle(0x2C3E50, 1)\n    graphics.fillRoundedRect(0, 0, 120, 180, 8)\n    \n    // パターン\n    graphics.lineStyle(2, 0x34495E)\n    for (let i = 10; i < 110; i += 20) {\n      for (let j = 10; j < 170; j += 20) {\n        graphics.strokeCircle(i, j, 8)\n      }\n    }\n    \n    // テクスチャとして保存\n    graphics.generateTexture('card-back', 120, 180)\n    graphics.destroy()\n  }\n\n  /**\n   * カード表面を動的に生成\n   */\n  private createCardFaces(): void {\n    // 人生カード\n    this.createCardFace('life-card-template', 0x4C6EF5)\n    \n    // 保険カード\n    this.createCardFace('insurance-card-template', 0x51CF66)\n    \n    // 落とし穴カード\n    this.createCardFace('pitfall-card-template', 0xFF6B6B)\n  }\n\n  /**\n   * カードテンプレートを作成\n   */\n  private createCardFace(key: string, color: number): void {\n    const graphics = this.add.graphics()\n    \n    // カード背景\n    graphics.fillStyle(color, 1)\n    graphics.fillRoundedRect(0, 0, 120, 180, 8)\n    \n    // 白い内側の枠\n    graphics.fillStyle(0xFFFFFF, 1)\n    graphics.fillRoundedRect(5, 5, 110, 170, 6)\n    \n    // 上部のカラーバー\n    graphics.fillStyle(color, 1)\n    graphics.fillRect(5, 5, 110, 30)\n    \n    // テクスチャとして保存\n    graphics.generateTexture(key, 120, 180)\n    graphics.destroy()\n  }\n\n  /**\n   * UI要素を作成\n   */\n  private createUIAssets(): void {\n    // ボタン背景\n    const buttonGraphics = this.add.graphics()\n    buttonGraphics.fillStyle(0x4C6EF5, 1)\n    buttonGraphics.fillRoundedRect(0, 0, 200, 50, 25)\n    buttonGraphics.generateTexture('button-bg', 200, 50)\n    buttonGraphics.destroy()\n    \n    // ハイライト\n    const highlightGraphics = this.add.graphics()\n    highlightGraphics.lineStyle(4, 0xFFD43B, 1)\n    highlightGraphics.strokeRoundedRect(0, 0, 130, 190, 8)\n    highlightGraphics.generateTexture('card-highlight', 130, 190)\n    highlightGraphics.destroy()\n  }\n\n  protected initialize(): void {\n    // プリロード完了後、メインメニューへ遷移\n    this.scene.start('MainMenuScene')\n  }\n}","import { BaseScene } from './BaseScene'\n\n/**\n * メインメニューシーン\n */\nexport class MainMenuScene extends BaseScene {\n  constructor() {\n    super({ key: 'MainMenuScene' })\n  }\n\n  protected initialize(): void {\n    // フェードイン\n    this.fadeIn()\n\n    // タイトル\n    this.add.text(\n      this.centerX,\n      100,\n      '人生充実ゲーム',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: '#333333',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // サブタイトル\n    this.add.text(\n      this.centerX,\n      160,\n      'Life Fulfillment - 生命保険を「人生の味方」として描く',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#666666'\n      }\n    ).setOrigin(0.5)\n\n    // メニューボタン\n    this.createMenuButtons()\n\n    // バージョン情報\n    this.add.text(\n      10,\n      this.gameHeight - 30,\n      'v0.0.1 - Phase 1 Development',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#999999'\n      }\n    )\n  }\n\n  /**\n   * メニューボタンを作成\n   */\n  private createMenuButtons(): void {\n    const buttonY = 300\n    const buttonSpacing = 80\n\n    // ゲーム開始ボタン\n    this.createButton(\n      this.centerX,\n      buttonY,\n      'ゲームを始める',\n      () => this.startGame(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff'\n      }\n    )\n\n    // チュートリアルボタン\n    this.createButton(\n      this.centerX,\n      buttonY + buttonSpacing,\n      'チュートリアル',\n      () => this.startTutorial(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff'\n      }\n    )\n\n    // 設定ボタン\n    this.createButton(\n      this.centerX,\n      buttonY + buttonSpacing * 2,\n      '設定',\n      () => this.openSettings(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff'\n      }\n    )\n\n    // クレジットボタン\n    this.createButton(\n      this.centerX,\n      buttonY + buttonSpacing * 3,\n      'クレジット',\n      () => this.showCredits(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff'\n      }\n    )\n  }\n\n  /**\n   * ゲーム開始\n   */\n  private startGame(): void {\n    this.fadeOut(500, () => {\n      this.scene.start('GameScene')\n    })\n  }\n\n  /**\n   * チュートリアル開始\n   */\n  private startTutorial(): void {\n    this.fadeOut(500, () => {\n      // GameSceneを開始してすぐにチュートリアルを実行\n      this.scene.start('GameScene', { startTutorial: true })\n    })\n  }\n\n  /**\n   * 設定画面を開く\n   */\n  private openSettings(): void {\n    // 設定機能は将来のリリースで実装予定\n    // - 音量設定\n    // - グラフィック品質設定\n    // - キーボードショートカット設定\n    this.showNotification('設定機能は開発中です', 'info')\n  }\n\n  /**\n   * クレジット表示\n   */\n  private showCredits(): void {\n    // クレジットオーバーレイを作成\n    const overlay = this.add.graphics()\n    overlay.fillStyle(0x000000, 0.8)\n    overlay.fillRect(0, 0, this.gameWidth, this.gameHeight)\n\n    const creditContainer = this.add.container(this.centerX, this.centerY)\n\n    // クレジットテキスト\n    const creditText = this.add.text(\n      0,\n      -100,\n      '人生充実ゲーム\\n\\n開発: Claude Code & You\\n\\nPhase 1 - プロトタイプ開発中\\n\\nご期待ください！',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff',\n        align: 'center',\n        lineSpacing: 10\n      }\n    ).setOrigin(0.5)\n\n    // 閉じるボタン\n    const closeButton = this.createButton(\n      0,\n      100,\n      '閉じる',\n      () => {\n        creditContainer.destroy()\n        overlay.destroy()\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    )\n\n    creditContainer.add([creditText, closeButton])\n\n    // フェードイン効果\n    creditContainer.setAlpha(0)\n    this.tweens.add({\n      targets: creditContainer,\n      alpha: 1,\n      duration: 300\n    })\n  }\n}","import type {\n  TutorialStep,\n  TutorialProgress,\n  TutorialConfig,\n  TutorialEvent,\n  TutorialEventData,\n  TutorialState,\n  TutorialManagerOptions,\n  HighlightOptions\n} from '@/domain/types/tutorial.types'\nimport { TUTORIAL_STORAGE_KEYS } from '@/domain/types/tutorial.types'\n\n/**\n * チュートリアルシステムの中核管理クラス\n * ステップ進行、ハイライト、進捗保存を統括管理\n */\nexport class TutorialManager extends Phaser.Events.EventEmitter {\n  private currentConfig: TutorialConfig | null = null\n  private progress: TutorialProgress | null = null\n  private state: TutorialState = 'idle'\n  private options: TutorialManagerOptions\n  private scene: Phaser.Scene\n  private highlightGraphics: Phaser.GameObjects.Graphics | null = null\n  private overlayGraphics: Phaser.GameObjects.Graphics | null = null\n  private tutorialUI: Phaser.GameObjects.Container | null = null\n  private stepChangeTimeout: NodeJS.Timeout | null = null\n  private highlightTween: Phaser.Tweens.Tween | null = null\n\n  constructor(scene: Phaser.Scene, options: TutorialManagerOptions = {}) {\n    super()\n    this.scene = scene\n    this.options = {\n      autoSaveProgress: true,\n      debugMode: false,\n      stepChangeDelay: 300,\n      defaultHighlightOptions: {\n        color: '#FFD700',\n        opacity: 0.3,\n        borderWidth: 3,\n        borderColor: '#FFA500',\n        glowEffect: true,\n        animationType: 'pulse',\n        duration: 1000\n      },\n      defaultOverlayOptions: {\n        backgroundColor: '#000000',\n        opacity: 0.7,\n        blurBackground: false,\n        allowClickThrough: false\n      },\n      ...options\n    }\n\n    this.setupEventListeners()\n  }\n\n  /**\n   * イベントリスナーの設定\n   */\n  private setupEventListeners(): void {\n    // シーンの破棄時にクリーンアップ\n    this.scene.events.once('destroy', () => {\n      this.cleanup()\n    })\n\n    // 画面リサイズ時にUIを更新\n    this.scene.scale.on('resize', () => {\n      if (this.state === 'running') {\n        this.updateUILayout()\n      }\n    })\n  }\n\n  /**\n   * チュートリアルを開始\n   */\n  public async startTutorial(config: TutorialConfig): Promise<void> {\n    if (this.state === 'running') {\n      this.log('Tutorial is already running')\n      return\n    }\n\n    try {\n      this.currentConfig = config\n      this.progress = this.loadProgress(config.id) || this.createInitialProgress()\n      this.state = 'running'\n\n      this.log(`Starting tutorial: ${config.name}`)\n      this.emitEvent('tutorial:started', {\n        tutorialId: config.id,\n        progress: this.progress\n      })\n\n      // オーバーレイを作成\n      this.createOverlay()\n\n      // 最初のステップまたは中断されたステップから開始\n      await this.goToStep(this.progress.currentStepIndex)\n\n    } catch (error) {\n      this.handleError('Failed to start tutorial', error as Error)\n    }\n  }\n\n  /**\n   * 次のステップに進む\n   */\n  public async nextStep(): Promise<void> {\n    if (this.state !== 'running' || !this.currentConfig || !this.progress) {\n      return\n    }\n\n    const currentStep = this.getCurrentStep()\n    if (!currentStep) return\n\n    try {\n      // 現在のステップを完了としてマーク\n      await this.completeCurrentStep()\n\n      // 次のステップがある場合は進む\n      if (this.progress.currentStepIndex < this.currentConfig.steps.length - 1) {\n        await this.goToStep(this.progress.currentStepIndex + 1)\n      } else {\n        // チュートリアル完了\n        await this.completeTutorial()\n      }\n    } catch (error) {\n      this.handleError('Failed to go to next step', error as Error)\n    }\n  }\n\n  /**\n   * 前のステップに戻る\n   */\n  public async previousStep(): Promise<void> {\n    if (this.state !== 'running' || !this.progress) {\n      return\n    }\n\n    if (this.progress.currentStepIndex > 0) {\n      await this.goToStep(this.progress.currentStepIndex - 1)\n    }\n  }\n\n  /**\n   * 指定されたステップに移動\n   */\n  public async goToStep(stepIndex: number): Promise<void> {\n    if (!this.currentConfig || !this.progress || stepIndex < 0 || stepIndex >= this.currentConfig.steps.length) {\n      return\n    }\n\n    try {\n      // 現在のステップの終了処理\n      if (this.progress.currentStepIndex !== stepIndex) {\n        await this.exitCurrentStep()\n      }\n\n      // 新しいステップに移動\n      this.progress.currentStepIndex = stepIndex\n      const step = this.currentConfig.steps[stepIndex]\n\n      this.log(`Going to step ${stepIndex}: ${step.title}`)\n\n      // ステップのスキップ条件をチェック\n      if (step.skipCondition && step.skipCondition()) {\n        await this.skipCurrentStep()\n        return\n      }\n\n      // ステップに入る\n      await this.enterStep(step)\n\n      // 進捗を保存\n      if (this.options.autoSaveProgress) {\n        this.saveProgress()\n      }\n\n    } catch (error) {\n      this.handleError(`Failed to go to step ${stepIndex}`, error as Error)\n    }\n  }\n\n  /**\n   * チュートリアルをスキップ\n   */\n  public async skipTutorial(): Promise<void> {\n    if (this.state !== 'running' || !this.currentConfig) {\n      return\n    }\n\n    try {\n      this.log('Skipping tutorial')\n      this.state = 'skipped'\n\n      this.emitEvent('tutorial:skipped', {\n        tutorialId: this.currentConfig.id,\n        progress: this.progress\n      })\n\n      await this.cleanup()\n    } catch (error) {\n      this.handleError('Failed to skip tutorial', error as Error)\n    }\n  }\n\n  /**\n   * 現在のステップをスキップ\n   */\n  public async skipCurrentStep(): Promise<void> {\n    if (this.state !== 'running' || !this.currentConfig || !this.progress) {\n      return\n    }\n\n    const currentStep = this.getCurrentStep()\n    if (!currentStep) return\n\n    try {\n      this.log(`Skipping step: ${currentStep.title}`)\n      \n      // スキップしたステップとして記録\n      this.progress.skippedSteps.push(currentStep.id)\n\n      this.emitEvent('tutorial:step:skipped', {\n        tutorialId: this.currentConfig.id,\n        stepId: currentStep.id,\n        stepIndex: this.progress.currentStepIndex\n      })\n\n      // 次のステップに進む\n      await this.nextStep()\n    } catch (error) {\n      this.handleError('Failed to skip current step', error as Error)\n    }\n  }\n\n  /**\n   * 要素をハイライト\n   */\n  public highlightElement(\n    elementName: string, \n    options: HighlightOptions = {}\n  ): void {\n    try {\n      // 既存のハイライトをクリア\n      this.clearHighlight()\n\n      // ターゲット要素を取得\n      const element = this.scene.children.getByName(elementName)\n      if (!element) {\n        this.log(`Element not found: ${elementName}`)\n        return\n      }\n\n      // ハイライトオプションをマージ\n      const highlightOptions = {\n        ...this.options.defaultHighlightOptions,\n        ...options\n      }\n\n      // ハイライトグラフィックスを作成\n      this.createHighlight(element as Phaser.GameObjects.GameObject, highlightOptions)\n\n    } catch (error) {\n      this.handleError('Failed to highlight element', error as Error)\n    }\n  }\n\n  /**\n   * ハイライトをクリア\n   */\n  public clearHighlight(): void {\n    if (this.highlightGraphics) {\n      this.highlightGraphics.destroy()\n      this.highlightGraphics = null\n    }\n\n    if (this.highlightTween) {\n      this.highlightTween.destroy()\n      this.highlightTween = null\n    }\n  }\n\n  /**\n   * 進捗を保存\n   */\n  public saveProgress(): void {\n    if (!this.currentConfig || !this.progress) {\n      return\n    }\n\n    try {\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${this.currentConfig.id}`\n      localStorage.setItem(storageKey, JSON.stringify(this.progress))\n      this.log('Progress saved')\n    } catch (error) {\n      this.handleError('Failed to save progress', error as Error)\n    }\n  }\n\n  /**\n   * 進捗を読み込み\n   */\n  public loadProgress(tutorialId: string): TutorialProgress | null {\n    try {\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${tutorialId}`\n      const saved = localStorage.getItem(storageKey)\n      if (saved) {\n        const progress = JSON.parse(saved) as TutorialProgress\n        this.log('Progress loaded')\n        return progress\n      }\n    } catch (error) {\n      this.handleError('Failed to load progress', error as Error)\n    }\n    return null\n  }\n\n  /**\n   * 進捗をクリア\n   */\n  public clearProgress(tutorialId: string): void {\n    try {\n      const storageKey = `${TUTORIAL_STORAGE_KEYS.PROGRESS}_${tutorialId}`\n      localStorage.removeItem(storageKey)\n      this.log('Progress cleared')\n    } catch (error) {\n      this.handleError('Failed to clear progress', error as Error)\n    }\n  }\n\n  /**\n   * チュートリアルが完了済みかチェック\n   */\n  public isCompleted(tutorialId: string): boolean {\n    try {\n      const completedTutorials = this.getCompletedTutorials()\n      return completedTutorials.includes(tutorialId)\n    } catch (error) {\n      this.handleError('Failed to check completion status', error as Error)\n      return false\n    }\n  }\n\n  /**\n   * 現在の状態を取得\n   */\n  public getState(): TutorialState {\n    return this.state\n  }\n\n  /**\n   * 現在のステップを取得\n   */\n  public getCurrentStep(): TutorialStep | null {\n    if (!this.currentConfig || !this.progress) {\n      return null\n    }\n    return this.currentConfig.steps[this.progress.currentStepIndex] || null\n  }\n\n  /**\n   * 進捗状況を取得\n   */\n  public getProgress(): TutorialProgress | null {\n    return this.progress\n  }\n\n  // ===================\n  // Private Methods\n  // ===================\n\n  /**\n   * ステップに入る\n   */\n  private async enterStep(step: TutorialStep): Promise<void> {\n    try {\n      this.log(`Entering step: ${step.title}`)\n\n      // ステップ開始時の処理\n      if (step.onEnter) {\n        step.onEnter()\n      }\n\n      // イベント発火\n      this.emitEvent('tutorial:step:enter', {\n        tutorialId: this.currentConfig!.id,\n        stepId: step.id,\n        stepIndex: this.progress!.currentStepIndex,\n        totalSteps: this.currentConfig!.steps.length\n      })\n\n      // UI更新\n      this.updateTutorialUI(step)\n\n      // 要素ハイライト\n      if (step.targetElement) {\n        this.highlightElement(step.targetElement, step.highlightOptions)\n      }\n\n      // 自動進行の場合\n      if (step.action === 'auto' && step.waitTime) {\n        this.stepChangeTimeout = setTimeout(() => {\n          this.nextStep()\n        }, step.waitTime)\n      }\n\n      // ゲームアクション待機の場合\n      if (step.action === 'wait_for_game_action' && step.gameAction) {\n        this.startGameActionValidation(step)\n      }\n\n    } catch (error) {\n      this.handleError('Failed to enter step', error as Error)\n    }\n  }\n\n  /**\n   * 現在のステップから退出\n   */\n  private async exitCurrentStep(): Promise<void> {\n    const currentStep = this.getCurrentStep()\n    if (!currentStep) return\n\n    try {\n      this.log(`Exiting step: ${currentStep.title}`)\n\n      // タイムアウトをクリア\n      if (this.stepChangeTimeout) {\n        clearTimeout(this.stepChangeTimeout)\n        this.stepChangeTimeout = null\n      }\n\n      // ゲームアクション検証をクリーンアップ\n      const interval = this.scene.data.get('_tutorialValidationInterval')\n      const timeout = this.scene.data.get('_tutorialValidationTimeout')\n      if (interval) {\n        clearInterval(interval)\n        this.scene.data.remove('_tutorialValidationInterval')\n      }\n      if (timeout) {\n        clearTimeout(timeout)\n        this.scene.data.remove('_tutorialValidationTimeout')\n      }\n\n      // ハイライトをクリア\n      this.clearHighlight()\n\n      // ステップ終了時の処理\n      if (currentStep.onExit) {\n        currentStep.onExit()\n      }\n\n      // イベント発火\n      this.emitEvent('tutorial:step:exit', {\n        tutorialId: this.currentConfig!.id,\n        stepId: currentStep.id,\n        stepIndex: this.progress!.currentStepIndex\n      })\n\n    } catch (error) {\n      this.handleError('Failed to exit current step', error as Error)\n    }\n  }\n\n  /**\n   * 現在のステップを完了\n   */\n  private async completeCurrentStep(): Promise<void> {\n    const currentStep = this.getCurrentStep()\n    if (!currentStep || !this.progress) return\n\n    try {\n      this.log(`Completing step: ${currentStep.title}`)\n\n      // 完了したステップとして記録\n      if (!this.progress.completedSteps.includes(currentStep.id)) {\n        this.progress.completedSteps.push(currentStep.id)\n      }\n\n      this.emitEvent('tutorial:step:completed', {\n        tutorialId: this.currentConfig!.id,\n        stepId: currentStep.id,\n        stepIndex: this.progress.currentStepIndex\n      })\n\n    } catch (error) {\n      this.handleError('Failed to complete current step', error as Error)\n    }\n  }\n\n  /**\n   * ゲームアクションの検証を開始\n   */\n  private startGameActionValidation(step: TutorialStep): void {\n    if (!step.gameAction) return\n\n    const { type, validation, timeout = 30000 } = step.gameAction\n    \n    this.log(`Starting game action validation: ${type}`)\n    \n    // ゲーム状態の監視を開始\n    const checkInterval = setInterval(() => {\n      try {\n        // ゲーム状態を取得（GameSceneから）\n        const gameState = (window as Window & { __gameState?: Record<string, unknown> }).__gameState || this.scene.data.get('gameState')\n        \n        if (!gameState) {\n          this.logDebug('Game state not available yet')\n          return\n        }\n        \n        // 検証実行\n        if (validation(gameState)) {\n          this.log(`Game action validated: ${type}`)\n          clearInterval(checkInterval)\n          clearTimeout(timeoutId)\n          \n          // クリーンアップ\n          this.scene.data.remove('_tutorialValidationInterval')\n          this.scene.data.remove('_tutorialValidationTimeout')\n          \n          // 自動的に次のステップへ\n          this.nextStep()\n        }\n      } catch (error) {\n        this.handleError('Error during game action validation', error as Error)\n      }\n    }, 250) // 250msごとにチェック\n    \n    // タイムアウト処理\n    const timeoutId = setTimeout(() => {\n      clearInterval(checkInterval)\n      this.log(`Game action validation timeout: ${type}`)\n      \n      // クリーンアップ\n      this.scene.data.remove('_tutorialValidationInterval')\n      this.scene.data.remove('_tutorialValidationTimeout')\n      \n      // タイムアウト時は手動で進められるようにする\n      this.emit('tutorial:action:timeout', { step, actionType: type })\n    }, timeout)\n    \n    // クリーンアップ用に保存\n    this.scene.data.set('_tutorialValidationInterval', checkInterval)\n    this.scene.data.set('_tutorialValidationTimeout', timeoutId)\n  }\n\n  /**\n   * チュートリアル完了\n   */\n  private async completeTutorial(): Promise<void> {\n    if (!this.currentConfig || !this.progress) return\n\n    try {\n      this.log('Completing tutorial')\n      \n      this.progress.isCompleted = true\n      this.progress.completedAt = new Date()\n      this.state = 'completed'\n\n      // 完了したチュートリアルリストに追加\n      this.markAsCompleted(this.currentConfig.id)\n\n      this.emitEvent('tutorial:completed', {\n        tutorialId: this.currentConfig.id,\n        progress: this.progress\n      })\n\n      // 進捗保存\n      if (this.options.autoSaveProgress) {\n        this.saveProgress()\n      }\n\n      // クリーンアップ\n      await this.cleanup()\n\n    } catch (error) {\n      this.handleError('Failed to complete tutorial', error as Error)\n    }\n  }\n\n  /**\n   * オーバーレイを作成\n   */\n  private createOverlay(): void {\n    if (!this.currentConfig) return\n\n    const overlayOptions = {\n      ...this.options.defaultOverlayOptions,\n      ...this.currentConfig.overlayOptions\n    }\n\n    this.overlayGraphics = this.scene.add.graphics()\n    this.overlayGraphics.setDepth(1000)\n    \n    this.overlayGraphics.fillStyle(\n      Phaser.Display.Color.HexStringToColor(overlayOptions.backgroundColor!).color,\n      overlayOptions.opacity\n    )\n    this.overlayGraphics.fillRect(\n      0, 0, \n      this.scene.cameras.main.width, \n      this.scene.cameras.main.height\n    )\n\n    if (!overlayOptions.allowClickThrough) {\n      this.overlayGraphics.setInteractive(\n        new Phaser.Geom.Rectangle(0, 0, this.scene.cameras.main.width, this.scene.cameras.main.height),\n        Phaser.Geom.Rectangle.Contains\n      )\n    }\n  }\n\n  /**\n   * ハイライトを作成\n   */\n  private createHighlight(element: Phaser.GameObjects.GameObject, options: HighlightOptions): void {\n    if (!element.getBounds) return\n\n    const bounds = element.getBounds()\n    this.highlightGraphics = this.scene.add.graphics()\n    this.highlightGraphics.setDepth(1001)\n\n    // ハイライト描画\n    if (options.color) {\n      this.highlightGraphics.fillStyle(\n        Phaser.Display.Color.HexStringToColor(options.color).color,\n        options.opacity || 0.3\n      )\n      this.highlightGraphics.fillRect(bounds.x, bounds.y, bounds.width, bounds.height)\n    }\n\n    // ボーダー描画\n    if (options.borderColor && options.borderWidth) {\n      this.highlightGraphics.lineStyle(\n        options.borderWidth,\n        Phaser.Display.Color.HexStringToColor(options.borderColor).color\n      )\n      this.highlightGraphics.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height)\n    }\n\n    // アニメーション\n    if (options.animationType && options.animationType !== 'none') {\n      this.createHighlightAnimation(options)\n    }\n  }\n\n  /**\n   * ハイライトアニメーションを作成\n   */\n  private createHighlightAnimation(options: HighlightOptions): void {\n    if (!this.highlightGraphics) return\n\n    const duration = options.duration || 1000\n\n    switch (options.animationType) {\n      case 'pulse':\n        this.highlightTween = this.scene.tweens.add({\n          targets: this.highlightGraphics,\n          alpha: { from: 1, to: 0.3 },\n          duration: duration / 2,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n        break\n\n      case 'glow':\n        this.highlightTween = this.scene.tweens.add({\n          targets: this.highlightGraphics,\n          scaleX: { from: 1, to: 1.1 },\n          scaleY: { from: 1, to: 1.1 },\n          alpha: { from: 1, to: 0.7 },\n          duration: duration / 2,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n        break\n    }\n  }\n\n  /**\n   * チュートリアルUI更新\n   */\n  private updateTutorialUI(step: TutorialStep): void {\n    // UI実装は別途UIManagerクラスで行う想定\n    // ここでは基本的な情報のみ処理\n    this.log(`UI Update: ${step.title} - ${step.description}`)\n  }\n\n  /**\n   * UIレイアウト更新\n   */\n  private updateUILayout(): void {\n    // レスポンシブ対応の実装\n  }\n\n  /**\n   * 初期進捗状況を作成\n   */\n  private createInitialProgress(): TutorialProgress {\n    return {\n      currentStepIndex: 0,\n      completedSteps: [],\n      skippedSteps: [],\n      isCompleted: false,\n      startedAt: new Date(),\n      lastPlayedVersion: this.currentConfig?.version\n    }\n  }\n\n  /**\n   * 完了したチュートリアルリストを取得\n   */\n  private getCompletedTutorials(): string[] {\n    try {\n      const saved = localStorage.getItem(TUTORIAL_STORAGE_KEYS.COMPLETED_TUTORIALS)\n      return saved ? JSON.parse(saved) : []\n    } catch (error) {\n      this.handleError('Failed to get completed tutorials', error as Error)\n      return []\n    }\n  }\n\n  /**\n   * チュートリアルを完了としてマーク\n   */\n  private markAsCompleted(tutorialId: string): void {\n    try {\n      const completed = this.getCompletedTutorials()\n      if (!completed.includes(tutorialId)) {\n        completed.push(tutorialId)\n        localStorage.setItem(TUTORIAL_STORAGE_KEYS.COMPLETED_TUTORIALS, JSON.stringify(completed))\n      }\n    } catch (error) {\n      this.handleError('Failed to mark as completed', error as Error)\n    }\n  }\n\n  /**\n   * イベント発火\n   */\n  private emitEvent(event: TutorialEvent, data: TutorialEventData): void {\n    this.emit(event, data)\n    \n    if (this.options.debugMode && import.meta.env.DEV) {\n      console.log(`[TutorialManager] ${event}:`, data)\n    }\n  }\n\n  /**\n   * エラーハンドリング\n   */\n  private handleError(message: string, error: Error): void {\n    this.log(`Error: ${message} - ${error.message}`)\n    this.state = 'error'\n    \n    this.emitEvent('tutorial:error', {\n      tutorialId: this.currentConfig?.id || 'unknown',\n      error: error.message\n    })\n  }\n\n  /**\n   * ログ出力\n   */\n  private log(message: string): void {\n    if (this.options.debugMode && import.meta.env.DEV) {\n      console.log(`[TutorialManager] ${message}`)\n    }\n  }\n\n  /**\n   * クリーンアップ\n   */\n  private async cleanup(): Promise<void> {\n    try {\n      // タイムアウトクリア\n      if (this.stepChangeTimeout) {\n        clearTimeout(this.stepChangeTimeout)\n        this.stepChangeTimeout = null\n      }\n\n      // グラフィックス削除\n      this.clearHighlight()\n      \n      if (this.overlayGraphics) {\n        this.overlayGraphics.destroy()\n        this.overlayGraphics = null\n      }\n\n      if (this.tutorialUI) {\n        this.tutorialUI.destroy()\n        this.tutorialUI = null\n      }\n\n      // 状態リセット\n      this.state = 'idle'\n      \n    } catch (error) {\n      this.handleError('Failed to cleanup', error as Error)\n    }\n  }\n\n  /**\n   * 破棄\n   */\n  public destroy(): void {\n    this.cleanup()\n    this.removeAllListeners()\n  }\n}","import type { \n  TutorialStep, \n  HighlightOptions,\n  TutorialProgress\n} from '@/domain/types/tutorial.types'\n\n/**\n * チュートリアルのUIオーバーレイコンポーネント\n * スポットライト効果、吹き出し、進行制御UIを提供\n */\nexport class TutorialOverlay {\n  private scene: Phaser.Scene\n  private container: Phaser.GameObjects.Container\n  private overlayGraphics: Phaser.GameObjects.Graphics\n  private spotlightMask: Phaser.GameObjects.Graphics\n  private speechBubble: Phaser.GameObjects.Container | null = null\n  private progressBar: Phaser.GameObjects.Container | null = null\n  private controlButtons: Phaser.GameObjects.Container | null = null\n  private highlightElements: Map<string, Phaser.GameObjects.Graphics> = new Map()\n  private arrows: Phaser.GameObjects.Image[] = []\n  private pulseAnimations: Phaser.Tweens.Tween[] = []\n  \n  // 設定\n  private readonly OVERLAY_ALPHA = 0.7\n  private readonly SPOTLIGHT_RADIUS = 80\n  private readonly SPEECH_BUBBLE_PADDING = 20\n  private readonly ANIMATION_DURATION = 800\n  private readonly BUTTON_HEIGHT = 48\n  private readonly BUTTON_WIDTH = 120\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene\n    this.container = scene.add.container(0, 0)\n    this.container.setDepth(2000) // 最前面に表示\n    \n    // オーバーレイグラフィックスの初期化\n    this.overlayGraphics = scene.add.graphics()\n    this.spotlightMask = scene.add.graphics()\n    \n    this.container.add([this.overlayGraphics, this.spotlightMask])\n    \n    this.createBaseOverlay()\n  }\n\n  /**\n   * ベースオーバーレイの作成（画面全体を暗くする）\n   */\n  private createBaseOverlay(): void {\n    const camera = this.scene.cameras.main\n    \n    this.overlayGraphics.clear()\n    this.overlayGraphics.fillStyle(0x000000, this.OVERLAY_ALPHA)\n    this.overlayGraphics.fillRect(0, 0, camera.width, camera.height)\n    \n    // クリック無効化\n    this.overlayGraphics.setInteractive(\n      new Phaser.Geom.Rectangle(0, 0, camera.width, camera.height),\n      Phaser.Geom.Rectangle.Contains\n    )\n  }\n\n  /**\n   * スポットライト効果の作成\n   */\n  public createSpotlight(targetElement: Phaser.GameObjects.GameObject): void {\n    if (!targetElement.getBounds) return\n\n    const bounds = targetElement.getBounds()\n    const camera = this.scene.cameras.main\n    \n    // スポットライト用マスクをクリア\n    this.spotlightMask.clear()\n    \n    // 全体を塗りつぶし\n    this.spotlightMask.fillStyle(0x000000, this.OVERLAY_ALPHA)\n    this.spotlightMask.fillRect(0, 0, camera.width, camera.height)\n    \n    // スポットライト部分を切り抜き\n    const centerX = bounds.centerX\n    const centerY = bounds.centerY\n    const radius = Math.max(bounds.width, bounds.height) / 2 + this.SPOTLIGHT_RADIUS\n    \n    this.spotlightMask.fillStyle(0x000000, 0) // 透明で切り抜き\n    this.spotlightMask.fillCircle(centerX, centerY, radius)\n    \n    // グラデーション効果のためのマスク設定\n    this.overlayGraphics.setMask(new Phaser.Display.Masks.GeometryMask(this.scene, this.spotlightMask))\n  }\n\n  /**\n   * 吹き出しの作成\n   */\n  public createSpeechBubble(\n    step: TutorialStep, \n    targetBounds?: Phaser.Geom.Rectangle\n  ): void {\n    // 既存の吹き出しを削除\n    if (this.speechBubble) {\n      this.speechBubble.destroy()\n    }\n\n    const camera = this.scene.cameras.main\n    const bubbleMaxWidth = Math.min(400, camera.width - 40)\n    \n    this.speechBubble = this.scene.add.container(0, 0)\n    \n    // 背景\n    const background = this.scene.add.graphics()\n    background.fillStyle(0xffffff, 0.95)\n    background.lineStyle(2, 0x333333, 1)\n    \n    // タイトルテキスト\n    const titleText = this.scene.add.text(0, 0, step.title, {\n      fontSize: '18px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#333333',\n      fontStyle: 'bold',\n      wordWrap: { width: bubbleMaxWidth - this.SPEECH_BUBBLE_PADDING * 2 }\n    })\n    \n    // 説明テキスト\n    const descriptionText = this.scene.add.text(0, 0, step.description, {\n      fontSize: '14px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#666666',\n      wordWrap: { width: bubbleMaxWidth - this.SPEECH_BUBBLE_PADDING * 2 }\n    })\n    \n    // レイアウト計算\n    const titleHeight = titleText.height\n    const descriptionHeight = descriptionText.height\n    const totalHeight = titleHeight + descriptionHeight + this.SPEECH_BUBBLE_PADDING * 3\n    const bubbleWidth = bubbleMaxWidth\n    \n    // 背景描画\n    const radius = 12\n    background.fillRoundedRect(\n      -bubbleWidth / 2, -totalHeight / 2,\n      bubbleWidth, totalHeight,\n      radius\n    )\n    background.strokeRoundedRect(\n      -bubbleWidth / 2, -totalHeight / 2,\n      bubbleWidth, totalHeight,\n      radius\n    )\n    \n    // テキスト配置\n    titleText.setPosition(\n      -bubbleWidth / 2 + this.SPEECH_BUBBLE_PADDING,\n      -totalHeight / 2 + this.SPEECH_BUBBLE_PADDING\n    )\n    descriptionText.setPosition(\n      -bubbleWidth / 2 + this.SPEECH_BUBBLE_PADDING,\n      titleText.y + titleHeight + this.SPEECH_BUBBLE_PADDING / 2\n    )\n    \n    this.speechBubble.add([background, titleText, descriptionText])\n    \n    // 位置決定\n    this.positionSpeechBubble(step.position || 'bottom', targetBounds)\n    \n    // アニメーション\n    this.speechBubble.setAlpha(0)\n    this.speechBubble.setScale(0.8)\n    \n    this.scene.tweens.add({\n      targets: this.speechBubble,\n      alpha: 1,\n      scaleX: 1,\n      scaleY: 1,\n      duration: this.ANIMATION_DURATION / 2,\n      ease: 'Back.easeOut'\n    })\n    \n    this.container.add(this.speechBubble)\n  }\n\n  /**\n   * 吹き出しの位置調整\n   */\n  private positionSpeechBubble(\n    position: 'top' | 'bottom' | 'left' | 'right' | 'center',\n    targetBounds?: Phaser.Geom.Rectangle\n  ): void {\n    if (!this.speechBubble) return\n\n    const camera = this.scene.cameras.main\n    const bubbleBounds = this.speechBubble.getBounds()\n    const margin = 20\n    \n    let x = camera.centerX\n    let y = camera.centerY\n    \n    if (targetBounds) {\n      switch (position) {\n        case 'top':\n          x = targetBounds.centerX\n          y = targetBounds.top - bubbleBounds.height / 2 - margin\n          break\n        case 'bottom':\n          x = targetBounds.centerX\n          y = targetBounds.bottom + bubbleBounds.height / 2 + margin\n          break\n        case 'left':\n          x = targetBounds.left - bubbleBounds.width / 2 - margin\n          y = targetBounds.centerY\n          break\n        case 'right':\n          x = targetBounds.right + bubbleBounds.width / 2 + margin\n          y = targetBounds.centerY\n          break\n        case 'center':\n          x = camera.centerX\n          y = camera.centerY\n          break\n      }\n    }\n    \n    // 画面内に収める\n    x = Phaser.Math.Clamp(x, bubbleBounds.width / 2 + margin, camera.width - bubbleBounds.width / 2 - margin)\n    y = Phaser.Math.Clamp(y, bubbleBounds.height / 2 + margin, camera.height - bubbleBounds.height / 2 - margin)\n    \n    this.speechBubble.setPosition(x, y)\n  }\n\n  /**\n   * 進捗バーの作成\n   */\n  public createProgressBar(progress: TutorialProgress, totalSteps: number): void {\n    if (this.progressBar) {\n      this.progressBar.destroy()\n    }\n\n    const camera = this.scene.cameras.main\n    this.progressBar = this.scene.add.container(camera.centerX, 50)\n    \n    const barWidth = 300\n    const barHeight = 8\n    const currentStep = progress.currentStepIndex + 1\n    \n    // 背景バー\n    const background = this.scene.add.graphics()\n    background.fillStyle(0x333333, 0.3)\n    background.fillRoundedRect(-barWidth / 2, -barHeight / 2, barWidth, barHeight, 4)\n    \n    // 進捗バー\n    const progressWidth = (currentStep / totalSteps) * barWidth\n    const progressBar = this.scene.add.graphics()\n    progressBar.fillStyle(0x4CAF50, 1)\n    progressBar.fillRoundedRect(-barWidth / 2, -barHeight / 2, progressWidth, barHeight, 4)\n    \n    // 進捗テキスト\n    const progressText = this.scene.add.text(0, -30, `ステップ ${currentStep} / ${totalSteps}`, {\n      fontSize: '14px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff',\n      stroke: '#000000',\n      strokeThickness: 2\n    }).setOrigin(0.5)\n    \n    this.progressBar.add([background, progressBar, progressText])\n    this.container.add(this.progressBar)\n  }\n\n  /**\n   * 制御ボタンの作成\n   */\n  public createControlButtons(\n    canGoBack: boolean,\n    canSkip: boolean,\n    onNext: () => void,\n    onBack?: () => void,\n    onSkip?: () => void\n  ): void {\n    if (this.controlButtons) {\n      this.controlButtons.destroy()\n    }\n\n    const camera = this.scene.cameras.main\n    this.controlButtons = this.scene.add.container(camera.centerX, camera.height - 80)\n    \n    const buttons: Phaser.GameObjects.Container[] = []\n    let totalWidth = 0\n    \n    // 戻るボタン\n    if (canGoBack && onBack) {\n      const backButton = this.createButton('戻る', '#6c757d', onBack)\n      buttons.push(backButton)\n      totalWidth += this.BUTTON_WIDTH + 10\n    }\n    \n    // 次へボタン\n    const nextButton = this.createButton('次へ', '#007bff', onNext)\n    buttons.push(nextButton)\n    totalWidth += this.BUTTON_WIDTH + 10\n    \n    // スキップボタン\n    if (canSkip && onSkip) {\n      const skipButton = this.createButton('スキップ', '#dc3545', onSkip)\n      buttons.push(skipButton)\n      totalWidth += this.BUTTON_WIDTH + 10\n    }\n    \n    // ボタン配置\n    let currentX = -totalWidth / 2\n    buttons.forEach(button => {\n      button.setPosition(currentX + this.BUTTON_WIDTH / 2, 0)\n      currentX += this.BUTTON_WIDTH + 10\n      this.controlButtons!.add(button)\n    })\n    \n    this.container.add(this.controlButtons)\n  }\n\n  /**\n   * ボタンの作成\n   */\n  private createButton(\n    text: string,\n    color: string,\n    onClick: () => void\n  ): Phaser.GameObjects.Container {\n    const button = this.scene.add.container(0, 0)\n    \n    // ボタン背景\n    const background = this.scene.add.graphics()\n    const colorValue = parseInt(color.substring(1), 16)\n    background.fillStyle(colorValue, 1)\n    background.fillRoundedRect(\n      -this.BUTTON_WIDTH / 2, -this.BUTTON_HEIGHT / 2,\n      this.BUTTON_WIDTH, this.BUTTON_HEIGHT,\n      8\n    )\n    \n    // ホバー効果用の背景\n    const hoverBackground = this.scene.add.graphics()\n    hoverBackground.fillStyle(colorValue, 0.8)\n    hoverBackground.fillRoundedRect(\n      -this.BUTTON_WIDTH / 2, -this.BUTTON_HEIGHT / 2,\n      this.BUTTON_WIDTH, this.BUTTON_HEIGHT,\n      8\n    )\n    hoverBackground.setVisible(false)\n    \n    // ボタンテキスト\n    const buttonText = this.scene.add.text(0, 0, text, {\n      fontSize: '16px',\n      fontFamily: 'Arial, sans-serif',\n      color: '#ffffff',\n      fontStyle: 'bold'\n    }).setOrigin(0.5)\n    \n    button.add([background, hoverBackground, buttonText])\n    \n    // インタラクティブ設定\n    button.setSize(this.BUTTON_WIDTH, this.BUTTON_HEIGHT)\n    button.setInteractive()\n    \n    // イベント設定\n    button.on('pointerover', () => {\n      background.setVisible(false)\n      hoverBackground.setVisible(true)\n      this.scene.tweens.add({\n        targets: button,\n        scaleX: 1.05,\n        scaleY: 1.05,\n        duration: 150,\n        ease: 'Power2'\n      })\n    })\n    \n    button.on('pointerout', () => {\n      background.setVisible(true)\n      hoverBackground.setVisible(false)\n      this.scene.tweens.add({\n        targets: button,\n        scaleX: 1,\n        scaleY: 1,\n        duration: 150,\n        ease: 'Power2'\n      })\n    })\n    \n    button.on('pointerdown', () => {\n      this.scene.tweens.add({\n        targets: button,\n        scaleX: 0.95,\n        scaleY: 0.95,\n        duration: 100,\n        yoyo: true,\n        ease: 'Power2',\n        onComplete: onClick\n      })\n    })\n    \n    return button\n  }\n\n  /**\n   * 要素のハイライト（パルス、グロー効果）\n   */\n  public highlightElement(\n    elementName: string,\n    options: HighlightOptions = {}\n  ): void {\n    const element = this.scene.children.getByName(elementName)\n    if (!element || !element.getBounds) return\n\n    const bounds = element.getBounds()\n    const highlight = this.scene.add.graphics()\n    highlight.setDepth(1999) // オーバーレイより少し下\n    \n    // デフォルトオプション\n    const defaultOptions: HighlightOptions = {\n      color: '#FFD700',\n      opacity: 0.4,\n      borderWidth: 3,\n      borderColor: '#FFA500',\n      glowEffect: true,\n      animationType: 'pulse',\n      duration: 1000\n    }\n    \n    const finalOptions = { ...defaultOptions, ...options }\n    \n    // ハイライト描画\n    if (finalOptions.color) {\n      const colorValue = parseInt(finalOptions.color.substring(1), 16)\n      highlight.fillStyle(colorValue, finalOptions.opacity || 0.4)\n      highlight.fillRect(bounds.x, bounds.y, bounds.width, bounds.height)\n    }\n    \n    // ボーダー描画\n    if (finalOptions.borderColor && finalOptions.borderWidth) {\n      const borderColorValue = parseInt(finalOptions.borderColor.substring(1), 16)\n      highlight.lineStyle(finalOptions.borderWidth, borderColorValue)\n      highlight.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height)\n    }\n    \n    // グローエフェクト\n    if (finalOptions.glowEffect) {\n      const glow = this.scene.add.graphics()\n      glow.setDepth(1998)\n      const glowColorValue = parseInt(finalOptions.borderColor?.substring(1) || 'FFA500', 16)\n      glow.lineStyle(8, glowColorValue, 0.3)\n      glow.strokeRect(bounds.x - 4, bounds.y - 4, bounds.width + 8, bounds.height + 8)\n      this.highlightElements.set(elementName + '_glow', glow)\n    }\n    \n    // アニメーション\n    if (finalOptions.animationType !== 'none') {\n      const animation = this.createHighlightAnimation(highlight, finalOptions)\n      if (animation) {\n        this.pulseAnimations.push(animation)\n      }\n    }\n    \n    this.highlightElements.set(elementName, highlight)\n  }\n\n  /**\n   * ハイライトアニメーションの作成\n   */\n  private createHighlightAnimation(\n    target: Phaser.GameObjects.Graphics,\n    options: HighlightOptions\n  ): Phaser.Tweens.Tween | null {\n    const duration = options.duration || 1000\n    \n    switch (options.animationType) {\n      case 'pulse':\n        return this.scene.tweens.add({\n          targets: target,\n          alpha: { from: 1, to: 0.3 },\n          duration: duration / 2,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n        \n      case 'glow':\n        return this.scene.tweens.add({\n          targets: target,\n          scaleX: { from: 1, to: 1.1 },\n          scaleY: { from: 1, to: 1.1 },\n          alpha: { from: 1, to: 0.7 },\n          duration: duration / 2,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n        \n      case 'border':\n        return this.scene.tweens.add({\n          targets: target,\n          rotation: { from: 0, to: Math.PI * 2 },\n          duration: duration,\n          repeat: -1,\n          ease: 'Linear'\n        })\n        \n      default:\n        return null\n    }\n  }\n\n  /**\n   * 誘導矢印の作成\n   */\n  public createArrow(\n    fromX: number, fromY: number,\n    toX: number, toY: number,\n    color: string = '#FFD700'\n  ): void {\n    // 矢印の計算\n    const angle = Phaser.Math.Angle.Between(fromX, fromY, toX, toY)\n    const distance = Phaser.Math.Distance.Between(fromX, fromY, toX, toY)\n    const arrowX = fromX + Math.cos(angle) * (distance * 0.7)\n    const arrowY = fromY + Math.sin(angle) * (distance * 0.7)\n    \n    // 矢印画像の作成（シンプルなトライアングル）\n    const arrow = this.scene.add.graphics()\n    arrow.setDepth(2001)\n    \n    const colorValue = parseInt(color.substring(1), 16)\n    arrow.fillStyle(colorValue, 1)\n    arrow.beginPath()\n    arrow.moveTo(0, -10)\n    arrow.lineTo(20, 0)\n    arrow.lineTo(0, 10)\n    arrow.closePath()\n    arrow.fillPath()\n    \n    arrow.setPosition(arrowX, arrowY)\n    arrow.setRotation(angle)\n    \n    // 矢印アニメーション（パルス）\n    this.scene.tweens.add({\n      targets: arrow,\n      scaleX: { from: 1, to: 1.2 },\n      scaleY: { from: 1, to: 1.2 },\n      alpha: { from: 1, to: 0.7 },\n      duration: 800,\n      yoyo: true,\n      repeat: -1,\n      ease: 'Sine.easeInOut'\n    })\n    \n    this.arrows.push(arrow as Phaser.GameObjects.Graphics) // 型を明確に指定\n  }\n\n  /**\n   * すべてのハイライトをクリア\n   */\n  public clearHighlights(): void {\n    this.highlightElements.forEach(highlight => highlight.destroy())\n    this.highlightElements.clear()\n    \n    this.pulseAnimations.forEach(animation => animation.destroy())\n    this.pulseAnimations = []\n    \n    this.arrows.forEach(arrow => arrow.destroy())\n    this.arrows = []\n  }\n\n  /**\n   * レスポンシブ対応：画面サイズ変更時の調整\n   */\n  public onResize(): void {\n    // const camera = this.scene.cameras.main // 未使用のため削除\n    \n    // ベースオーバーレイの再描画\n    this.createBaseOverlay()\n    \n    // レスポンシブレイアウトの適用\n    this.updateResponsiveLayout()\n    \n    // スポットライトの再計算（ターゲット要素がある場合）\n    if (this.spotlightMask && this.highlightElements.size > 0) {\n      // 最初のハイライト要素でスポットライトを再作成\n      const firstElement = this.highlightElements.values().next().value\n      if (firstElement && firstElement.getBounds) {\n        const bounds = firstElement.getBounds()\n        const mockElement = { getBounds: () => bounds }\n        this.createSpotlight(mockElement as Phaser.GameObjects.GameObject)\n      }\n    }\n  }\n\n  /**\n   * キーボード操作対応（アクセシビリティ対応）\n   */\n  public enableKeyboardControls(\n    onNext: () => void,\n    onBack?: () => void,\n    onSkip?: () => void\n  ): void {\n    const cursors = this.scene.input.keyboard?.createCursorKeys()\n    if (!cursors) return\n\n    // 基本操作\n    this.scene.input.keyboard?.on('keydown-SPACE', onNext)\n    this.scene.input.keyboard?.on('keydown-ENTER', onNext)\n    \n    if (onBack) {\n      this.scene.input.keyboard?.on('keydown-BACKSPACE', onBack)\n      cursors.left.on('down', onBack)\n    }\n    \n    if (onSkip) {\n      this.scene.input.keyboard?.on('keydown-ESC', onSkip)\n    }\n    \n    cursors.right.on('down', onNext)\n\n    // アクセシビリティ拡張キー\n    this.scene.input.keyboard?.on('keydown-TAB', (event: KeyboardEvent) => {\n      event.preventDefault()\n      // TABでボタン間のフォーカス移動をシミュレート\n      this.cycleButtonFocus()\n    })\n\n    // 数字キーでステップ直接移動（開発・テスト用）\n    for (let i = 1; i <= 9; i++) {\n      this.scene.input.keyboard?.on(`keydown-${i}`, () => {\n        this.jumpToStep(i - 1)\n      })\n    }\n  }\n\n  /**\n   * ボタン間のフォーカスサイクル\n   */\n  private cycleButtonFocus(): void {\n    // 実装：TABキーでボタン間を移動する視覚的フィードバック\n    if (this.controlButtons) {\n      // 既存のボタンにフォーカス効果を追加\n      const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\n      if (buttons.length > 0) {\n        // シンプルなフォーカス効果として、最初のボタンを強調\n        const firstButton = buttons[0]\n        this.scene.tweens.add({\n          targets: firstButton,\n          scaleX: 1.1,\n          scaleY: 1.1,\n          duration: 200,\n          yoyo: true,\n          ease: 'Power2'\n        })\n      }\n    }\n  }\n\n  /**\n   * 指定ステップへのジャンプ（デバッグ用）\n   */\n  private jumpToStep(stepIndex: number): void {\n    // 開発時のみ有効にする機能\n    if (import.meta.env.DEV) console.log(`Attempt to jump to step ${stepIndex} (debug mode only)`)\n  }\n\n  /**\n   * レスポンシブ対応の拡張\n   */\n  public updateResponsiveLayout(): void {\n    const camera = this.scene.cameras.main\n    const isSmallScreen = camera.width < 768\n    const isMobile = camera.width < 480\n\n    if (isMobile) {\n      this.applyMobileLayout()\n    } else if (isSmallScreen) {\n      this.applyTabletLayout()\n    } else {\n      this.applyDesktopLayout()\n    }\n  }\n\n  /**\n   * モバイル向けレイアウト\n   */\n  private applyMobileLayout(): void {\n    const camera = this.scene.cameras.main\n    \n    // ボタンサイズを大きく\n    const mobileButtonHeight = 56\n    const mobileButtonWidth = Math.min(150, camera.width / 3 - 10)\n    \n    // 進捗バーを上部に配置\n    if (this.progressBar) {\n      this.progressBar.setPosition(camera.centerX, 30)\n    }\n    \n    // 吹き出しのサイズ調整\n    if (this.speechBubble) {\n      const maxWidth = camera.width - 20\n      this.repositionSpeechBubbleForMobile(maxWidth)\n    }\n    \n    // ボタンを画面下部に大きく配置\n    if (this.controlButtons) {\n      this.controlButtons.setPosition(camera.centerX, camera.height - 40)\n      this.adjustButtonSizesForMobile(mobileButtonWidth, mobileButtonHeight)\n    }\n  }\n\n  /**\n   * タブレット向けレイアウト\n   */\n  private applyTabletLayout(): void {\n    const camera = this.scene.cameras.main\n    \n    // 中間的なサイズ設定\n    const tabletButtonHeight = 52\n    const tabletButtonWidth = 140\n    \n    if (this.progressBar) {\n      this.progressBar.setPosition(camera.centerX, 40)\n    }\n    \n    if (this.controlButtons) {\n      this.controlButtons.setPosition(camera.centerX, camera.height - 60)\n      this.adjustButtonSizes(tabletButtonWidth, tabletButtonHeight)\n    }\n  }\n\n  /**\n   * デスクトップ向けレイアウト\n   */\n  private applyDesktopLayout(): void {\n    const camera = this.scene.cameras.main\n    \n    // 標準サイズを維持\n    if (this.progressBar) {\n      this.progressBar.setPosition(camera.centerX, 50)\n    }\n    \n    if (this.controlButtons) {\n      this.controlButtons.setPosition(camera.centerX, camera.height - 80)\n    }\n  }\n\n  /**\n   * モバイル用吹き出し再配置\n   */\n  private repositionSpeechBubbleForMobile(maxWidth: number): void {\n    if (!this.speechBubble) return\n    \n    const camera = this.scene.cameras.main\n    \n    // モバイルでは画面中央上部に固定配置\n    this.speechBubble.setPosition(camera.centerX, camera.height * 0.3)\n    \n    // テキストの再配置（幅制限）\n    const textElements = this.speechBubble.list.filter(child => \n      child instanceof Phaser.GameObjects.Text\n    ) as Phaser.GameObjects.Text[]\n    \n    textElements.forEach(text => {\n      text.setWordWrapWidth(maxWidth - this.SPEECH_BUBBLE_PADDING * 2)\n    })\n  }\n\n  /**\n   * ボタンサイズ調整（モバイル用）\n   */\n  private adjustButtonSizesForMobile(width: number, height: number): void {\n    if (!this.controlButtons) return\n    \n    const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\n    buttons.forEach((button, index) => {\n      // ボタンの再描画\n      const graphics = button.list[0] as Phaser.GameObjects.Graphics\n      if (graphics) {\n        graphics.clear()\n        graphics.fillStyle(0x007bff, 1)\n        graphics.fillRoundedRect(-width / 2, -height / 2, width, height, 8)\n      }\n      \n      // テキストサイズ調整\n      const text = button.list.find(child => \n        child instanceof Phaser.GameObjects.Text\n      ) as Phaser.GameObjects.Text\n      if (text) {\n        text.setFontSize('18px')\n      }\n      \n      // ボタン間の間隔調整\n      button.setPosition(\n        (index - 1) * (width + 15),\n        0\n      )\n    })\n  }\n\n  /**\n   * ボタンサイズ調整（一般用）\n   */\n  private adjustButtonSizes(width: number, height: number): void {\n    if (!this.controlButtons) return\n    \n    const buttons = this.controlButtons.list as Phaser.GameObjects.Container[]\n    buttons.forEach((button) => {\n      const graphics = button.list[0] as Phaser.GameObjects.Graphics\n      if (graphics) {\n        graphics.clear()\n        graphics.fillStyle(0x007bff, 1)\n        graphics.fillRoundedRect(-width / 2, -height / 2, width, height, 8)\n      }\n    })\n  }\n\n  /**\n   * アクセシビリティアナウンス（スクリーンリーダー対応）\n   */\n  public announceForScreenReader(message: string): void {\n    // ARIA live region を利用したアナウンス\n    const announcement = this.scene.add.text(-1000, -1000, message, {\n      fontSize: '1px',\n      color: '#000000'\n    })\n    \n    // 要素にARIA属性を設定（可能な範囲で）\n    const canvas = this.scene.game.canvas\n    if (canvas) {\n      canvas.setAttribute('aria-label', message)\n      \n      // 短時間で削除\n      this.scene.time.delayedCall(1000, () => {\n        announcement.destroy()\n        canvas.removeAttribute('aria-label')\n      })\n    }\n  }\n\n  /**\n   * 高コントラストモード対応\n   */\n  public enableHighContrastMode(): void {\n    // 色の調整\n    this.overlayGraphics.clear()\n    this.overlayGraphics.fillStyle(0x000000, 0.9) // より濃い背景\n    const camera = this.scene.cameras.main\n    this.overlayGraphics.fillRect(0, 0, camera.width, camera.height)\n    \n    // ハイライト色の調整\n    this.highlightElements.forEach(highlight => {\n      // より強いコントラストの色に変更\n      highlight.clear()\n      highlight.fillStyle(0xFFFF00, 0.7) // 明るい黄色\n      highlight.lineStyle(4, 0xFF0000, 1) // 赤いボーダー\n    })\n  }\n\n  /**\n   * アニメーション削減モード（motion-reduction対応）\n   */\n  public enableReducedMotion(): void {\n    // 既存のアニメーションを停止\n    this.pulseAnimations.forEach(animation => {\n      animation.stop()\n    })\n    this.pulseAnimations = []\n    \n    // 静的なハイライトに変更\n    this.highlightElements.forEach(highlight => {\n      highlight.setAlpha(0.6) // 固定の透明度\n    })\n  }\n\n  /**\n   * オーバーレイの表示/非表示\n   */\n  public setVisible(visible: boolean): void {\n    this.container.setVisible(visible)\n  }\n\n  /**\n   * 破棄\n   */\n  public destroy(): void {\n    this.clearHighlights()\n    \n    // キーボードイベントのクリーンアップ\n    this.scene.input.keyboard?.removeAllListeners()\n    \n    this.container.destroy()\n  }\n}","import type { TutorialConfig } from '@/domain/types/tutorial.types'\n\n/**\n * インタラクティブゲームプレイチュートリアル\n * 実際にゲームを操作しながら学ぶ体験型チュートリアル\n */\nexport const INTERACTIVE_GAME_TUTORIAL: TutorialConfig = {\n  id: 'interactive_game_tutorial',\n  name: '人生充実ゲーム入門',\n  description: '実際にゲームをプレイしながら基本的な操作を学びます',\n  version: '2.0.0',\n  autoStart: false,\n  canSkip: true,\n  showProgress: true,\n  overlayOptions: {\n    backgroundColor: '#000000',\n    opacity: 0.6,\n    blurBackground: false,\n    allowClickThrough: true // 特定の要素のみクリック可能\n  },\n  steps: [\n    // ========== イントロダクション ==========\n    {\n      id: 'welcome',\n      title: 'ようこそ、人生充実ゲームへ！',\n      description: 'このゲームでは、保険を活用しながら人生の様々な挑戦を乗り越え、夢を実現することを目指します。\\n\\n実際にゲームをプレイしながら、基本的な操作を学んでいきましょう！',\n      position: 'center',\n      action: 'click',\n      highlightOptions: {\n        animationType: 'none'\n      }\n    },\n\n    // ========== 基本UI説明 ==========\n    {\n      id: 'vitality_explanation',\n      title: '活力（バイタリティ）について',\n      description: 'この緑のバーがあなたの活力です。\\n\\n活力は人生の挑戦に立ち向かうエネルギーを表し、0になるとゲームオーバーです。\\n\\n現在の活力: 20/35',\n      targetElement: 'vitality-bar',\n      position: 'bottom',\n      action: 'click',\n      highlightOptions: {\n        color: '#00FF00',\n        opacity: 0.4,\n        borderWidth: 3,\n        borderColor: '#00AA00',\n        glowEffect: true,\n        animationType: 'pulse',\n        duration: 1000\n      }\n    },\n\n    {\n      id: 'hand_cards_explanation',\n      title: '手札について',\n      description: 'ここがあなたの手札です。\\n\\n人生カード（青）と保険カード（緑）があり、これらを使って様々な挑戦に立ち向かいます。',\n      targetElement: 'hand-area',\n      position: 'top',\n      action: 'click',\n      highlightOptions: {\n        color: '#FFD700',\n        opacity: 0.3,\n        borderWidth: 4,\n        borderColor: '#FFA500',\n        glowEffect: true,\n        animationType: 'glow'\n      }\n    },\n\n    // ========== カードドロー体験 ==========\n    {\n      id: 'draw_card_instruction',\n      title: '最初のカードを引いてみましょう',\n      description: '「カードを引く」ボタンをクリックして、新しいカードを1枚引いてください。\\n\\nカードを引くことで、新たな選択肢が増えます。',\n      targetElement: 'draw-button',\n      position: 'left',\n      action: 'wait_for_game_action',\n      gameAction: {\n        type: 'draw_card',\n        validation: (gameState: Record<string, unknown>) => {\n          // 手札が初期枚数より増えているか確認\n          const hand = gameState.hand as unknown[]\n          const config = gameState.config as { startingHandSize: number }\n          return hand.length > config.startingHandSize\n        }\n      },\n      highlightOptions: {\n        color: '#4CAF50',\n        opacity: 0.5,\n        borderWidth: 4,\n        borderColor: '#2E7D32',\n        glowEffect: true,\n        animationType: 'pulse',\n        duration: 800\n      }\n    },\n\n    {\n      id: 'draw_success',\n      title: 'よくできました！',\n      description: '新しいカードを引きました。\\n\\n手札が増えると、より多くの戦略を立てることができます。',\n      position: 'center',\n      action: 'auto',\n      waitTime: 3000,\n      highlightOptions: {\n        animationType: 'none'\n      }\n    },\n\n    // ========== チャレンジ開始 ==========\n    {\n      id: 'challenge_explanation',\n      title: 'チャレンジカードが現れました',\n      description: 'これが「チャレンジカード」です。\\n\\n人生には様々な挑戦があります。手札のカードを使って、これらの挑戦を乗り越えましょう。',\n      targetElement: 'challenge-area',\n      position: 'bottom',\n      action: 'click',\n      highlightOptions: {\n        color: '#FF6B6B',\n        opacity: 0.4,\n        borderWidth: 4,\n        borderColor: '#FF4444',\n        glowEffect: true,\n        animationType: 'pulse'\n      }\n    },\n\n    {\n      id: 'select_cards_instruction',\n      title: 'カードを選択してチャレンジに挑戦',\n      description: 'チャレンジに必要なパワー以上になるよう、手札からカードを選択してください。\\n\\n複数のカードを組み合わせることもできます。\\n\\nカードをクリックして選択しましょう！',\n      targetElement: 'hand-area',\n      position: 'top',\n      action: 'wait_for_game_action',\n      gameAction: {\n        type: 'select_cards',\n        validation: (gameState: Record<string, unknown>) => {\n          const selectedCards = gameState.selectedCards as unknown[]\n          return selectedCards.length > 0\n        }\n      },\n      highlightOptions: {\n        color: '#FFD700',\n        opacity: 0.4,\n        borderWidth: 3,\n        borderColor: '#FFA500',\n        animationType: 'glow'\n      }\n    },\n\n    {\n      id: 'resolve_challenge_instruction',\n      title: 'チャレンジに挑戦！',\n      description: 'カードを選択したら、「チャレンジに挑む」ボタンをクリックして結果を確認しましょう。\\n\\n選択したカードの合計パワーがチャレンジに必要なパワー以上なら成功です！',\n      targetElement: 'resolve-button',\n      position: 'left',\n      action: 'wait_for_game_action',\n      gameAction: {\n        type: 'resolve_challenge',\n        validation: (gameState: Record<string, unknown>) => {\n          return gameState.phase === 'resolution' || gameState.phase === 'card_selection'\n        }\n      },\n      highlightOptions: {\n        color: '#2196F3',\n        opacity: 0.5,\n        borderWidth: 4,\n        borderColor: '#1976D2',\n        glowEffect: true,\n        animationType: 'pulse'\n      }\n    },\n\n    // ========== チャレンジ成功時の保険選択 ==========\n    {\n      id: 'insurance_selection',\n      title: '保険を選択しましょう',\n      description: 'チャレンジ成功！報酬として保険カードを1枚選べます。\\n\\n保険は将来の挑戦に備える重要な要素です。\\n\\n3枚の中から1枚を選んでください。',\n      targetElement: 'card-selection-ui',\n      position: 'center',\n      action: 'wait_for_game_action',\n      gameAction: {\n        type: 'select_reward_card',\n        validation: (gameState: Record<string, unknown>) => {\n          return gameState.phase === 'resolution'\n        }\n      },\n      skipCondition: () => {\n        // チャレンジ失敗時はスキップ\n        const gameState = (window as Window & { __gameState?: { lastChallengeResult?: { success?: boolean } } }).__gameState\n        return gameState?.lastChallengeResult?.success === false\n      },\n      highlightOptions: {\n        color: '#4CAF50',\n        opacity: 0.3,\n        animationType: 'glow'\n      }\n    },\n\n    // ========== ターン終了 ==========\n    {\n      id: 'end_turn_instruction',\n      title: 'ターンを終了しましょう',\n      description: 'チャレンジが終わったら、「ターン終了」ボタンをクリックして次のターンに進みます。\\n\\n新しいチャレンジが現れ、ゲームが進行します。',\n      targetElement: 'end-turn-button',\n      position: 'left',\n      action: 'wait_for_game_action',\n      gameAction: {\n        type: 'end_turn',\n        validation: (gameState: Record<string, unknown>) => {\n          return (gameState.turn as number) > 1\n        }\n      },\n      highlightOptions: {\n        color: '#9C27B0',\n        opacity: 0.5,\n        borderWidth: 4,\n        borderColor: '#7B1FA2',\n        glowEffect: true,\n        animationType: 'pulse'\n      }\n    },\n\n    // ========== 保険の効果説明 ==========\n    {\n      id: 'insurance_effects',\n      title: '保険の効果について',\n      description: '保険カードはチャレンジ時にボーナスパワーを提供します。\\n\\n年齢が上がるほど保険の効果も高まりますが、保険が多すぎると負担（-パワー）も発生します。\\n\\nバランスが重要です！',\n      targetElement: 'insurance-list',\n      position: 'left',\n      action: 'click',\n      highlightOptions: {\n        color: '#00BCD4',\n        opacity: 0.4,\n        borderWidth: 3,\n        borderColor: '#0097A7',\n        animationType: 'pulse'\n      }\n    },\n\n    // ========== 基本的な戦略 ==========\n    {\n      id: 'basic_strategy',\n      title: '基本的な戦略',\n      description: '成功のコツ：\\n\\n1. 活力を管理しながら挑戦する\\n2. 保険を適切に選択・活用する\\n3. カードの組み合わせを工夫する\\n4. 年齢に応じた戦略を立てる',\n      position: 'center',\n      action: 'click',\n      highlightOptions: {\n        animationType: 'none'\n      }\n    },\n\n    // ========== チュートリアル完了 ==========\n    {\n      id: 'tutorial_complete',\n      title: 'チュートリアル完了！',\n      description: 'おめでとうございます！基本的な操作を習得しました。\\n\\nこれから本格的なゲームが始まります。\\n\\n3つのライフステージを乗り越え、最後に夢を実現しましょう！\\n\\n頑張ってください！',\n      position: 'center',\n      action: 'click',\n      highlightOptions: {\n        color: '#4CAF50',\n        opacity: 0.3,\n        animationType: 'glow',\n        duration: 2000\n      },\n      onExit: () => {\n        // チュートリアル完了フラグを設定\n        localStorage.setItem('tutorial_completed', 'true')\n        \n        // 完了メッセージ\n        if (import.meta.env.DEV) console.log('🎉 チュートリアル完了！本格的なゲームをお楽しみください！')\n      }\n    }\n  ]\n}\n\n/**\n * 簡易版チュートリアル（リピーター向け）\n */\nexport const QUICK_TUTORIAL: TutorialConfig = {\n  id: 'quick_tutorial',\n  name: 'クイックガイド',\n  description: '基本操作の簡単な復習',\n  version: '1.0.0',\n  autoStart: false,\n  canSkip: true,\n  showProgress: true,\n  steps: [\n    {\n      id: 'quick_intro',\n      title: '基本操作の復習',\n      description: 'カードを引いて、チャレンジに挑戦し、保険を活用して人生を充実させましょう！',\n      position: 'center',\n      action: 'click'\n    },\n    {\n      id: 'quick_controls',\n      title: '操作方法',\n      description: '1. カードを引く\\n2. カードを選択\\n3. チャレンジに挑む\\n4. 保険を選択\\n5. ターン終了',\n      position: 'center',\n      action: 'click'\n    },\n    {\n      id: 'quick_complete',\n      title: 'それでは、ゲームを楽しんでください！',\n      description: '詳しいチュートリアルが必要な場合は、メニューから「詳細チュートリアル」を選択してください。',\n      position: 'center',\n      action: 'click'\n    }\n  ]\n}","import { Card } from '@/domain/entities/Card'\nimport { Game } from '@/domain/entities/Game'\n\n/**\n * ドロップゾーンの定義\n */\nexport interface DropZone {\n  id: string\n  type: 'challenge' | 'discard' | 'special'\n  bounds: Phaser.Geom.Rectangle\n  isValid: (card: Card, game: Game) => boolean\n  onDrop: (card: Card, game: Game) => void\n  priority: number\n  magneticDistance?: number\n  visualStyle?: {\n    validColor: number\n    invalidColor: number\n    hoverColor: number\n  }\n}\n\n/**\n * ドロップ結果\n */\nexport interface DropResult {\n  success: boolean\n  zone?: DropZone\n  error?: string\n}\n\n/**\n * ドラッグ状態\n */\ninterface DragState {\n  isDragging: boolean\n  card?: Card\n  startPosition?: { x: number; y: number }\n  currentPosition?: { x: number; y: number }\n  hoveredZone?: DropZone\n  validZones: DropZone[]\n}\n\n/**\n * 効率的なドロップゾーン管理システム\n */\nexport class DropZoneManager {\n  private zones: Map<string, DropZone> = new Map()\n  private scene: Phaser.Scene\n  private dragState: DragState = {\n    isDragging: false,\n    validZones: []\n  }\n  private lastFrameTime = 0\n  private readonly FRAME_INTERVAL = 16 // 60fps\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene\n  }\n\n  /**\n   * ドロップゾーンを追加\n   */\n  addZone(zone: DropZone): void {\n    this.zones.set(zone.id, zone)\n  }\n\n  /**\n   * ドロップゾーンを削除\n   */\n  removeZone(zoneId: string): void {\n    this.zones.delete(zoneId)\n  }\n\n  /**\n   * ドラッグ開始\n   */\n  startDrag(card: Card, game: Game, position: { x: number; y: number }): void {\n    this.dragState = {\n      isDragging: true,\n      card,\n      startPosition: { ...position },\n      currentPosition: { ...position },\n      validZones: this.getValidZones(card, game),\n      hoveredZone: undefined\n    }\n\n    // 有効なドロップゾーンをハイライト\n    this.highlightValidZones()\n  }\n\n  /**\n   * ドラッグ更新（フレームレート制御付き）\n   */\n  updateDrag(position: { x: number; y: number }, game: Game): void {\n    if (!this.dragState.isDragging || !this.dragState.card) return\n\n    const currentTime = Date.now()\n    if (currentTime - this.lastFrameTime < this.FRAME_INTERVAL) return\n    this.lastFrameTime = currentTime\n\n    this.dragState.currentPosition = { ...position }\n\n    // ホバーゾーンの更新\n    const newHoveredZone = this.getZoneAtPosition(position.x, position.y)\n    if (newHoveredZone !== this.dragState.hoveredZone) {\n      this.updateHoverState(newHoveredZone, game)\n    }\n  }\n\n  /**\n   * ドラッグ終了とドロップ処理\n   */\n  endDrag(position: { x: number; y: number }, game: Game): DropResult {\n    if (!this.dragState.isDragging || !this.dragState.card) {\n      return { success: false, error: 'No active drag operation' }\n    }\n\n    const dropZone = this.getZoneAtPosition(position.x, position.y)\n    let result: DropResult\n\n    if (dropZone && this.isValidDrop(this.dragState.card, dropZone, game)) {\n      try {\n        dropZone.onDrop(this.dragState.card, game)\n        result = { success: true, zone: dropZone }\n      } catch (error) {\n        result = { \n          success: false, \n          error: `Drop action failed: ${error instanceof Error ? error.message : 'Unknown error'}` \n        }\n      }\n    } else {\n      result = { \n        success: false, \n        error: dropZone ? 'Invalid drop target' : 'No drop zone found' \n      }\n    }\n\n    // クリーンアップ\n    this.clearHighlights()\n    this.dragState = {\n      isDragging: false,\n      validZones: []\n    }\n\n    return result\n  }\n\n  /**\n   * 位置からドロップゾーンを取得（優先度順）\n   */\n  private getZoneAtPosition(x: number, y: number): DropZone | undefined {\n    const candidateZones = Array.from(this.zones.values())\n      .filter(zone => zone.bounds.contains(x, y))\n      .sort((a, b) => b.priority - a.priority)\n\n    return candidateZones[0]\n  }\n\n  /**\n   * 有効なドロップゾーンを取得\n   */\n  private getValidZones(card: Card, game: Game): DropZone[] {\n    return Array.from(this.zones.values())\n      .filter(zone => {\n        try {\n          return zone.isValid(card, game)\n        } catch (error) {\n          console.warn(`Validation error for zone ${zone.id}:`, error)\n          return false\n        }\n      })\n  }\n\n  /**\n   * ドロップが有効かチェック\n   */\n  private isValidDrop(card: Card, zone: DropZone, game: Game): boolean {\n    try {\n      return this.dragState.validZones.includes(zone) && zone.isValid(card, game)\n    } catch (error) {\n      console.warn(`Validation error for zone ${zone.id}:`, error)\n      return false\n    }\n  }\n\n  /**\n   * 有効なゾーンをハイライト\n   */\n  private highlightValidZones(): void {\n    this.dragState.validZones.forEach(zone => {\n      const graphics = this.scene.add.graphics()\n      graphics.fillStyle(zone.visualStyle?.validColor || 0x00ff00, 0.3)\n      graphics.fillRectShape(zone.bounds)\n      graphics.lineStyle(2, zone.visualStyle?.validColor || 0x00ff00, 0.8)\n      graphics.strokeRectShape(zone.bounds)\n      graphics.setName(`highlight-${zone.id}`)\n\n      // パルスアニメーション\n      this.scene.tweens.add({\n        targets: graphics,\n        alpha: 0.5,\n        duration: 1000,\n        yoyo: true,\n        repeat: -1,\n        ease: 'Power2'\n      })\n    })\n  }\n\n  /**\n   * ホバー状態を更新\n   */\n  private updateHoverState(newHoveredZone: DropZone | undefined, game: Game): void {\n    // 前のホバー状態をクリア\n    if (this.dragState.hoveredZone) {\n      const oldGraphics = this.scene.children.getByName(`hover-${this.dragState.hoveredZone.id}`)\n      if (oldGraphics) {\n        oldGraphics.destroy()\n      }\n    }\n\n    this.dragState.hoveredZone = newHoveredZone\n\n    // 新しいホバー状態を表示\n    if (newHoveredZone && this.dragState.card) {\n      const isValid = this.isValidDrop(this.dragState.card, newHoveredZone, game)\n      const color = isValid \n        ? (newHoveredZone.visualStyle?.hoverColor || 0x00ff88)\n        : (newHoveredZone.visualStyle?.invalidColor || 0xff0000)\n\n      const graphics = this.scene.add.graphics()\n      graphics.fillStyle(color, 0.5)\n      graphics.fillRectShape(newHoveredZone.bounds)\n      graphics.lineStyle(3, color, 1.0)\n      graphics.strokeRectShape(newHoveredZone.bounds)\n      graphics.setName(`hover-${newHoveredZone.id}`)\n\n      // ホバーアニメーション\n      graphics.setScale(0.9)\n      this.scene.tweens.add({\n        targets: graphics,\n        scaleX: 1.05,\n        scaleY: 1.05,\n        duration: 200,\n        ease: 'Back.out'\n      })\n    }\n  }\n\n  /**\n   * すべてのハイライトをクリア\n   */\n  private clearHighlights(): void {\n    this.zones.forEach(zone => {\n      const highlight = this.scene.children.getByName(`highlight-${zone.id}`)\n      const hover = this.scene.children.getByName(`hover-${zone.id}`)\n      \n      if (highlight) {\n        this.scene.tweens.add({\n          targets: highlight,\n          alpha: 0,\n          duration: 200,\n          onComplete: () => highlight.destroy()\n        })\n      }\n      \n      if (hover) {\n        hover.destroy()\n      }\n    })\n  }\n\n  /**\n   * マグネティックスナップの距離チェック\n   */\n  getMagneticSnapTarget(position: { x: number; y: number }): { zone: DropZone; snapPosition: { x: number; y: number } } | null {\n    if (!this.dragState.card) return null\n\n    for (const zone of this.dragState.validZones) {\n      const distance = zone.magneticDistance || 100\n      const centerX = zone.bounds.x + zone.bounds.width / 2\n      const centerY = zone.bounds.y + zone.bounds.height / 2\n      \n      const dx = position.x - centerX\n      const dy = position.y - centerY\n      const distanceToCenter = Math.sqrt(dx * dx + dy * dy)\n\n      if (distanceToCenter <= distance) {\n        return {\n          zone,\n          snapPosition: { x: centerX, y: centerY }\n        }\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * 現在のドラッグ状態を取得\n   */\n  getDragState(): Readonly<DragState> {\n    return { ...this.dragState }\n  }\n\n  /**\n   * クリーンアップ\n   */\n  destroy(): void {\n    this.clearHighlights()\n    this.zones.clear()\n    this.dragState = {\n      isDragging: false,\n      validZones: []\n    }\n  }\n}","import { Card } from '@/domain/entities/Card'\nimport { Game } from '@/domain/entities/Game'\nimport type { CardType } from '@/domain/types/card.types'\n\n/**\n * バリデーター関数の型定義\n */\nexport type DropZoneValidator = (card: Card, game: Game) => boolean\n\n/**\n * アクション関数の型定義\n */\nexport type DropZoneAction = (card: Card, game: Game) => void\n\n/**\n * ドロップゾーンバリデーターのユーティリティクラス\n */\nexport class DropZoneValidators {\n  /**\n   * カードタイプのみを許可するバリデーター\n   */\n  static cardTypeOnly(allowedTypes: CardType[]): DropZoneValidator {\n    return (card: Card) => allowedTypes.includes(card.type)\n  }\n\n  /**\n   * 特定の段階でのみ許可するバリデーター\n   */\n  static phaseOnly(allowedPhases: string[]): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      const currentPhase = game.getCurrentPhase?.() || 'unknown'\n      return allowedPhases.includes(currentPhase)\n    }\n  }\n\n  /**\n   * 最小パワー要件のバリデーター\n   */\n  static minimumPower(minPower: number): DropZoneValidator {\n    return (card: Card) => card.power >= minPower\n  }\n\n  /**\n   * 最大パワー制限のバリデーター\n   */\n  static maximumPower(maxPower: number): DropZoneValidator {\n    return (card: Card) => card.power <= maxPower\n  }\n\n  /**\n   * コスト制限のバリデーター\n   */\n  static costLimit(maxCost: number): DropZoneValidator {\n    return (card: Card) => card.cost <= maxCost\n  }\n\n  /**\n   * 現在の活力チェックのバリデーター\n   */\n  static vitalityCheck(requiredVitality: number): DropZoneValidator {\n    return (card: Card, game: Game) => game.vitality >= requiredVitality\n  }\n\n  /**\n   * チャレンジ中でないことをチェック\n   */\n  static notInChallenge(): DropZoneValidator {\n    return (card: Card, game: Game) => !game.currentChallenge\n  }\n\n  /**\n   * チャレンジ中であることをチェック\n   */\n  static inChallenge(): DropZoneValidator {\n    return (card: Card, game: Game) => !!game.currentChallenge\n  }\n\n  /**\n   * 手札に余裕があることをチェック\n   */\n  static handSpaceAvailable(): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      // 手札が存在しない場合はfalseを返す\n      if (!game.playerHand) {\n        return false\n      }\n      const currentHandSize = game.playerHand.size()\n      const maxHandSize = game.maxHandSize || 7\n      return currentHandSize < maxHandSize\n    }\n  }\n\n  /**\n   * カードが手札にあることをチェック\n   */\n  static cardInHand(): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      return game.playerHand?.contains(card.id) || false\n    }\n  }\n\n  /**\n   * ステージ制限のバリデーター\n   */\n  static stageOnly(allowedStages: number[]): DropZoneValidator {\n    return (card: Card, game: Game) => allowedStages.includes(game.stage)\n  }\n\n  /**\n   * 年齢制限のバリデーター\n   */\n  static ageRange(minAge: number, maxAge: number): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      const age = game.getPlayerAge?.() || 20\n      return age >= minAge && age <= maxAge\n    }\n  }\n\n  /**\n   * カスタムバリデーター\n   */\n  static custom(validator: DropZoneValidator): DropZoneValidator {\n    return validator\n  }\n\n  /**\n   * 複数のバリデーターを組み合わせる（AND条件）\n   */\n  static combine(...validators: DropZoneValidator[]): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      return validators.every(validator => validator(card, game))\n    }\n  }\n\n  /**\n   * 複数のバリデーターのいずれかを満たす（OR条件）\n   */\n  static either(...validators: DropZoneValidator[]): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      return validators.some(validator => validator(card, game))\n    }\n  }\n\n  /**\n   * バリデーターを否定する（NOT条件）\n   */\n  static not(validator: DropZoneValidator): DropZoneValidator {\n    return (card: Card, game: Game) => !validator(card, game)\n  }\n\n  /**\n   * 条件付きバリデーター\n   */\n  static conditional(\n    condition: DropZoneValidator,\n    thenValidator: DropZoneValidator,\n    elseValidator?: DropZoneValidator\n  ): DropZoneValidator {\n    return (card: Card, game: Game) => {\n      if (condition(card, game)) {\n        return thenValidator(card, game)\n      } else if (elseValidator) {\n        return elseValidator(card, game)\n      }\n      return true\n    }\n  }\n\n  /**\n   * 常に許可\n   */\n  static always(): DropZoneValidator {\n    return () => true\n  }\n\n  /**\n   * 常に拒否\n   */\n  static never(): DropZoneValidator {\n    return () => false\n  }\n}\n\n/**\n * ドロップゾーンアクションのユーティリティクラス\n */\nexport class DropZoneActions {\n  /**\n   * チャレンジを開始するアクション\n   */\n  static startChallenge(): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (!game.currentChallenge) {\n        game.startChallenge(card)\n      }\n    }\n  }\n\n  /**\n   * カードを捨て札に送るアクション\n   */\n  static discardCard(): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (!card || !game) {\n        console.warn('[DropZoneActions] discardCard: card or game is null')\n        return\n      }\n      game.playerHand?.removeCard(card.id)\n      game.discardPile?.addCard(card)\n    }\n  }\n\n  /**\n   * カードをデッキに戻すアクション\n   */\n  static returnToDeck(shuffle = false): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (!card || !game) {\n        console.warn('[DropZoneActions] returnToDeck: card or game is null')\n        return\n      }\n      game.playerHand?.removeCard(card.id)\n      game.playerDeck?.addCard(card)\n      if (shuffle) {\n        game.playerDeck?.shuffle()\n      }\n    }\n  }\n\n  /**\n   * 活力を消費するアクション\n   */\n  static consumeVitality(amount: number): DropZoneAction {\n    return (card: Card, game: Game) => {\n      game.vitality = Math.max(0, game.vitality - amount)\n    }\n  }\n\n  /**\n   * 活力を回復するアクション\n   */\n  static restoreVitality(amount: number): DropZoneAction {\n    return (card: Card, game: Game) => {\n      const maxVitality = game.maxVitality || 20\n      game.vitality = Math.min(maxVitality, game.vitality + amount)\n    }\n  }\n\n  /**\n   * カードをプレイするアクション\n   */\n  static playCard(): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (!card || !game) {\n        console.warn('[DropZoneActions] playCard: card or game is null')\n        return\n      }\n      \n      // カードの効果を適用\n      if (card.type === 'life' && card.power > 0) {\n        game.vitality = Math.min(game.maxVitality || 20, game.vitality + card.power)\n      }\n      \n      // 手札から削除\n      game.playerHand?.removeCard(card.id)\n      \n      // プレイエリアに追加（実装によって異なる）\n      game.playedCards?.addCard(card)\n    }\n  }\n\n  /**\n   * 特殊効果を発動するアクション\n   */\n  static triggerSpecialEffect(effectName: string): DropZoneAction {\n    return (card: Card, _game: Game) => {\n      // 特殊効果の実装（ゲーム固有）\n      if (import.meta.env.DEV) console.log(`Triggering special effect: ${effectName} for card ${card.name}`)\n      \n      // 例：保険カードの効果\n      if (card.type === 'insurance') {\n        // 保険効果の適用ロジック\n      }\n    }\n  }\n\n  /**\n   * ログを出力するアクション\n   */\n  static log(message: string): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (import.meta.env.DEV) console.log(`[DropZone] ${message}`, { card: card.name, gameState: game.stage })\n    }\n  }\n\n  /**\n   * 複数のアクションを順次実行\n   */\n  static sequence(...actions: DropZoneAction[]): DropZoneAction {\n    return (card: Card, game: Game) => {\n      actions.forEach(action => action(card, game))\n    }\n  }\n\n  /**\n   * 条件付きアクション\n   */\n  static conditional(\n    condition: DropZoneValidator,\n    thenAction: DropZoneAction,\n    elseAction?: DropZoneAction\n  ): DropZoneAction {\n    return (card: Card, game: Game) => {\n      if (condition(card, game)) {\n        thenAction(card, game)\n      } else if (elseAction) {\n        elseAction(card, game)\n      }\n    }\n  }\n\n  /**\n   * カスタムアクション\n   */\n  static custom(action: DropZoneAction): DropZoneAction {\n    return action\n  }\n\n  /**\n   * 何もしないアクション\n   */\n  static noop(): DropZoneAction {\n    return () => {}\n  }\n\n  /**\n   * エラーをスローするアクション（デバッグ用）\n   */\n  static throwError(message: string): DropZoneAction {\n    return () => {\n      throw new Error(message)\n    }\n  }\n}\n\n/**\n * よく使用されるバリデーター・アクションの組み合わせ\n */\nexport class DropZonePresets {\n  /**\n   * チャレンジゾーンの設定\n   */\n  static challengeZone() {\n    return {\n      validator: DropZoneValidators.combine(\n        DropZoneValidators.cardTypeOnly(['life']),\n        DropZoneValidators.notInChallenge(),\n        DropZoneValidators.cardInHand()\n      ),\n      action: DropZoneActions.sequence(\n        DropZoneActions.log('Starting challenge'),\n        DropZoneActions.startChallenge()\n      )\n    }\n  }\n\n  /**\n   * 捨て札ゾーンの設定\n   */\n  static discardZone() {\n    return {\n      validator: DropZoneValidators.combine(\n        DropZoneValidators.cardInHand(),\n        DropZoneValidators.not(DropZoneValidators.inChallenge())\n      ),\n      action: DropZoneActions.sequence(\n        DropZoneActions.log('Discarding card'),\n        DropZoneActions.discardCard()\n      )\n    }\n  }\n\n  /**\n   * 保険プレイゾーンの設定\n   */\n  static insurancePlayZone() {\n    return {\n      validator: DropZoneValidators.combine(\n        DropZoneValidators.cardTypeOnly(['insurance']),\n        DropZoneValidators.cardInHand(),\n        DropZoneValidators.vitalityCheck(1)\n      ),\n      action: DropZoneActions.sequence(\n        DropZoneActions.log('Playing insurance card'),\n        DropZoneActions.playCard(),\n        DropZoneActions.consumeVitality(1)\n      )\n    }\n  }\n\n  /**\n   * 特殊能力ゾーンの設定\n   */\n  static specialAbilityZone(requiredCardType: CardType, vitalityCost: number) {\n    return {\n      validator: DropZoneValidators.combine(\n        DropZoneValidators.cardTypeOnly([requiredCardType]),\n        DropZoneValidators.vitalityCheck(vitalityCost),\n        DropZoneValidators.cardInHand()\n      ),\n      action: DropZoneActions.sequence(\n        DropZoneActions.log(`Using special ability (cost: ${vitalityCost})`),\n        DropZoneActions.consumeVitality(vitalityCost),\n        DropZoneActions.triggerSpecialEffect('special-ability'),\n        DropZoneActions.discardCard()\n      )\n    }\n  }\n}","import { DropZoneManager, type DropZone, type DropResult } from './DropZoneManager'\nimport { DropZonePresets } from './DropZoneValidators'\nimport { Game } from '@/domain/entities/Game'\nimport { Card } from '@/domain/entities/Card'\nimport { GAME_CONSTANTS } from '../config/gameConfig'\n\n/**\n * モバイルデバイス検出結果\n */\ninterface DeviceInfo {\n  isMobile: boolean\n  isTablet: boolean\n  hasTouch: boolean\n  orientation: 'portrait' | 'landscape'\n}\n\n/**\n * ドラッグ設定\n */\ninterface DragConfig {\n  snapDistance: number\n  touchOffset: { x: number; y: number }\n  animationDuration: number\n  throttleInterval: number\n}\n\n/**\n * 既存GameSceneとドロップゾーンシステムの統合クラス\n */\nexport class DropZoneIntegration {\n  private dropZoneManager: DropZoneManager\n  private scene: Phaser.Scene\n  private game: Game\n  private deviceInfo: DeviceInfo\n  private dragConfig: DragConfig\n  \n  // ドラッグ関連\n  private draggedCard?: Phaser.GameObjects.Container\n  private dragStartPosition = { x: 0, y: 0 }\n  private isSnapping = false\n\n  constructor(scene: Phaser.Scene, game: Game) {\n    this.scene = scene\n    this.game = game\n    this.dropZoneManager = new DropZoneManager(scene)\n    this.deviceInfo = this.detectDevice()\n    this.dragConfig = this.createDragConfig()\n    \n    this.initializeDefaultZones()\n  }\n\n  /**\n   * デバイス情報を検出\n   */\n  private detectDevice(): DeviceInfo {\n    const isMobile = this.scene.sys.game.device.os.android || this.scene.sys.game.device.os.iOS\n    const isTablet = isMobile && Math.min(window.innerWidth, window.innerHeight) >= 768\n    const hasTouch = this.scene.sys.game.device.input.touch\n    const orientation = window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'\n\n    return { isMobile, isTablet, hasTouch, orientation }\n  }\n\n  /**\n   * ドラッグ設定を作成\n   */\n  private createDragConfig(): DragConfig {\n    return {\n      snapDistance: this.deviceInfo.isMobile ? 120 : 100,\n      touchOffset: this.deviceInfo.isMobile ? { x: 0, y: -60 } : { x: 0, y: 0 },\n      animationDuration: this.deviceInfo.isMobile ? 400 : 300,\n      throttleInterval: this.deviceInfo.isMobile ? 20 : 16\n    }\n  }\n\n  /**\n   * デフォルトのドロップゾーンを初期化\n   */\n  private initializeDefaultZones(): void {\n    // チャレンジゾーン\n    const challengePreset = DropZonePresets.challengeZone()\n    const challengeZone: DropZone = {\n      id: 'challenge',\n      type: 'challenge',\n      bounds: new Phaser.Geom.Rectangle(\n        this.scene.cameras.main.centerX - GAME_CONSTANTS.CARD_WIDTH / 2,\n        GAME_CONSTANTS.CHALLENGE_Y_POSITION - GAME_CONSTANTS.CARD_HEIGHT / 2,\n        GAME_CONSTANTS.CARD_WIDTH,\n        GAME_CONSTANTS.CARD_HEIGHT\n      ),\n      isValid: challengePreset.validator,\n      onDrop: (card: Card, game: Game) => {\n        this.handleChallengeDrop(card)\n        challengePreset.action(card, game)\n      },\n      priority: 10,\n      magneticDistance: this.dragConfig.snapDistance,\n      visualStyle: {\n        validColor: 0x10B981,\n        invalidColor: 0xEF4444,\n        hoverColor: 0x059669\n      }\n    }\n\n    // 捨て札ゾーン\n    const discardPreset = DropZonePresets.discardZone()\n    const discardZone: DropZone = {\n      id: 'discard',\n      type: 'discard',\n      bounds: new Phaser.Geom.Rectangle(\n        GAME_CONSTANTS.DISCARD_X_POSITION - GAME_CONSTANTS.CARD_WIDTH / 2,\n        GAME_CONSTANTS.DISCARD_Y_POSITION - GAME_CONSTANTS.CARD_HEIGHT / 2,\n        GAME_CONSTANTS.CARD_WIDTH,\n        GAME_CONSTANTS.CARD_HEIGHT\n      ),\n      isValid: discardPreset.validator,\n      onDrop: (card: Card, game: Game) => {\n        this.handleDiscardDrop(card)\n        discardPreset.action(card, game)\n      },\n      priority: 5,\n      magneticDistance: this.dragConfig.snapDistance,\n      visualStyle: {\n        validColor: 0x6B7280,\n        invalidColor: 0xEF4444,\n        hoverColor: 0x4B5563\n      }\n    }\n\n    this.dropZoneManager.addZone(challengeZone)\n    this.dropZoneManager.addZone(discardZone)\n  }\n\n  /**\n   * カードにドラッグ機能を追加\n   */\n  setupCardDragAndDrop(cardContainer: Phaser.GameObjects.Container): void {\n    const card = cardContainer.getData('card') as Card\n\n    // ドラッグ開始\n    cardContainer.on('dragstart', (pointer: Phaser.Input.Pointer) => {\n      this.startDrag(cardContainer, pointer, card)\n    })\n\n    // ドラッグ中\n    cardContainer.on('drag', (pointer: Phaser.Input.Pointer, dragX: number, dragY: number) => {\n      this.updateDrag(cardContainer, pointer, dragX, dragY)\n    })\n\n    // ドラッグ終了\n    cardContainer.on('dragend', (pointer: Phaser.Input.Pointer) => {\n      this.endDrag(cardContainer, pointer, card)\n    })\n  }\n\n  /**\n   * ドラッグ開始処理\n   */\n  private startDrag(\n    cardContainer: Phaser.GameObjects.Container, \n    pointer: Phaser.Input.Pointer, \n    card: Card\n  ): void {\n    // null pointer チェック\n    if (!pointer || !cardContainer || !card) {\n      console.warn('[DropZoneIntegration] startDrag: invalid parameters')\n      return\n    }\n    \n    this.draggedCard = cardContainer\n    this.dragStartPosition = { x: cardContainer.x, y: cardContainer.y }\n\n    // デバイス情報を考慮した位置調整\n    const adjustedPosition = {\n      x: pointer.x + this.dragConfig.touchOffset.x,\n      y: pointer.y + this.dragConfig.touchOffset.y\n    }\n\n    // ドロップゾーンシステムにドラッグ開始を通知\n    this.dropZoneManager.startDrag(card, this.game, adjustedPosition)\n\n    // 視覚エフェクト\n    cardContainer.setDepth(1000)\n    cardContainer.setAlpha(0.8)\n    cardContainer.setScale(1.15)\n\n    // ドラッグトレイル作成\n    this.createDragTrail(cardContainer)\n\n    // モバイルデバイスでの振動フィードバック\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\n      navigator.vibrate(50)\n    }\n  }\n\n  /**\n   * ドラッグ更新処理\n   */\n  private updateDrag(\n    cardContainer: Phaser.GameObjects.Container,\n    pointer: Phaser.Input.Pointer,\n    dragX: number,\n    dragY: number\n  ): void {\n    // null チェック\n    if (!cardContainer || dragX === undefined || dragY === undefined) {\n      console.warn('[DropZoneIntegration] updateDrag: invalid parameters')\n      return\n    }\n    \n    // デバイス情報を考慮した位置調整\n    const adjustedPosition = {\n      x: dragX + this.dragConfig.touchOffset.x,\n      y: dragY + this.dragConfig.touchOffset.y\n    }\n\n    cardContainer.x = adjustedPosition.x\n    cardContainer.y = adjustedPosition.y\n\n    // ドロップゾーンシステムに位置更新を通知\n    this.dropZoneManager.updateDrag(adjustedPosition, this.game)\n\n    // マグネティックスナップのチェック\n    if (!this.isSnapping) {\n      const snapTarget = this.dropZoneManager.getMagneticSnapTarget(adjustedPosition)\n      if (snapTarget) {\n        this.performMagneticSnap(cardContainer, snapTarget.snapPosition)\n      }\n    }\n\n    // ドラッグトレイルの更新\n    this.updateDragTrail(cardContainer)\n  }\n\n  /**\n   * ドラッグ終了処理\n   */\n  private endDrag(\n    cardContainer: Phaser.GameObjects.Container,\n    _pointer: Phaser.Input.Pointer,\n    _card: Card\n  ): void {\n    // null チェック\n    if (!cardContainer) {\n      console.warn('[DropZoneIntegration] endDrag: invalid cardContainer')\n      return\n    }\n    \n    const finalPosition = {\n      x: cardContainer.x,\n      y: cardContainer.y\n    }\n\n    // ドロップ処理\n    const dropResult = this.dropZoneManager.endDrag(finalPosition, this.game)\n    \n    if (dropResult.success) {\n      this.handleSuccessfulDrop(cardContainer, dropResult)\n    } else {\n      this.handleFailedDrop(cardContainer, dropResult)\n    }\n\n    // クリーンアップ\n    this.cleanupDrag(cardContainer)\n    this.draggedCard = undefined\n  }\n\n  /**\n   * マグネティックスナップの実行\n   */\n  private performMagneticSnap(\n    cardContainer: Phaser.GameObjects.Container,\n    snapPosition: { x: number; y: number }\n  ): void {\n    this.isSnapping = true\n\n    // スナップアニメーション\n    this.scene.tweens.add({\n      targets: cardContainer,\n      x: snapPosition.x,\n      y: snapPosition.y,\n      duration: 200,\n      ease: 'Back.out',\n      onComplete: () => {\n        this.isSnapping = false\n        \n        // スナップ成功のビジュアルフィードバック\n        this.showSnapFeedback(cardContainer)\n      }\n    })\n\n    // スナップ効果音（サウンドエフェクトが実装されている場合）\n    // this.scene.sound.play('snap-sound', { volume: 0.3 })\n  }\n\n  /**\n   * ドロップ成功時の処理\n   */\n  private handleSuccessfulDrop(cardContainer: Phaser.GameObjects.Container, _result: DropResult): void {\n    // 成功アニメーション\n    this.scene.tweens.add({\n      targets: cardContainer,\n      scaleX: 1.2,\n      scaleY: 1.2,\n      duration: 150,\n      ease: 'Back.out',\n      yoyo: true,\n      onComplete: () => {\n        // パーティクルエフェクト\n        this.createSuccessParticles(cardContainer.x, cardContainer.y)\n        \n        // カードをフェードアウト\n        this.scene.tweens.add({\n          targets: cardContainer,\n          alpha: 0,\n          scale: 0.8,\n          duration: this.dragConfig.animationDuration,\n          ease: 'Power2',\n          onComplete: () => {\n            // 手札から削除などの処理は各ドロップゾーンのアクションで実行済み\n          }\n        })\n      }\n    })\n\n    // モバイルでの振動フィードバック\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\n      navigator.vibrate([100, 50, 100])\n    }\n  }\n\n  /**\n   * ドロップ失敗時の処理\n   */\n  private handleFailedDrop(cardContainer: Phaser.GameObjects.Container, result: DropResult): void {\n    // 元の位置に戻すアニメーション\n    this.scene.tweens.add({\n      targets: cardContainer,\n      x: this.dragStartPosition.x,\n      y: this.dragStartPosition.y,\n      duration: this.dragConfig.animationDuration,\n      ease: 'Elastic.out'\n    })\n\n    // 失敗の視覚フィードバック\n    this.showFailureFeedback(cardContainer)\n\n    // エラーメッセージの表示（オプション）\n    if (result.error) {\n      console.warn(`Drop failed: ${result.error}`)\n    }\n\n    // モバイルでの振動フィードバック\n    if (this.deviceInfo.hasTouch && navigator.vibrate) {\n      navigator.vibrate(200)\n    }\n  }\n\n  /**\n   * ドラッグトレイルの作成\n   */\n  private createDragTrail(cardContainer: Phaser.GameObjects.Container): void {\n    const trail = this.scene.add.graphics()\n    trail.fillStyle(0x667eea, 0.3)\n    trail.fillCircle(0, 0, 15)\n    trail.setDepth(999)\n    trail.setName('drag-trail')\n    cardContainer.add(trail)\n  }\n\n  /**\n   * ドラッグトレイルの更新\n   */\n  private updateDragTrail(cardContainer: Phaser.GameObjects.Container): void {\n    const trail = cardContainer.getByName('drag-trail') as Phaser.GameObjects.Graphics\n    if (trail) {\n      // トレイルのフェードアウト\n      trail.setAlpha(trail.alpha * 0.95)\n      if (trail.alpha < 0.1) {\n        trail.destroy()\n      }\n    }\n  }\n\n  /**\n   * スナップフィードバックの表示\n   */\n  private showSnapFeedback(cardContainer: Phaser.GameObjects.Container): void {\n    const feedback = this.scene.add.graphics()\n    feedback.lineStyle(3, 0x10B981, 0.8)\n    feedback.strokeCircle(cardContainer.x, cardContainer.y, 80)\n    feedback.setDepth(1001)\n\n    this.scene.tweens.add({\n      targets: feedback,\n      alpha: 0,\n      duration: 500,\n      ease: 'Power2',\n      onComplete: () => feedback.destroy()\n    })\n  }\n\n  /**\n   * 失敗フィードバックの表示\n   */\n  private showFailureFeedback(cardContainer: Phaser.GameObjects.Container): void {\n    // 振動アニメーション\n    const originalX = cardContainer.x\n    this.scene.tweens.add({\n      targets: cardContainer,\n      x: originalX - 10,\n      duration: 50,\n      yoyo: true,\n      repeat: 3,\n      ease: 'Power2'\n    })\n\n    // X印の表示\n    const x = this.scene.add.graphics()\n    x.lineStyle(4, 0xEF4444, 0.8)\n    x.lineBetween(-20, -20, 20, 20)\n    x.lineBetween(-20, 20, 20, -20)\n    x.setPosition(cardContainer.x, cardContainer.y)\n    x.setDepth(1001)\n\n    this.scene.tweens.add({\n      targets: x,\n      alpha: 0,\n      scale: 2,\n      duration: 1000,\n      ease: 'Power2',\n      onComplete: () => x.destroy()\n    })\n  }\n\n  /**\n   * 成功パーティクルの作成\n   */\n  private createSuccessParticles(x: number, y: number): void {\n    // シンプルなパーティクル効果\n    for (let i = 0; i < 8; i++) {\n      const particle = this.scene.add.graphics()\n      particle.fillStyle(0x10B981, 0.8)\n      particle.fillCircle(0, 0, 4)\n      particle.setPosition(x, y)\n      particle.setDepth(1002)\n\n      const angle = (i / 8) * Math.PI * 2\n      const distance = 100\n\n      this.scene.tweens.add({\n        targets: particle,\n        x: x + Math.cos(angle) * distance,\n        y: y + Math.sin(angle) * distance,\n        alpha: 0,\n        scale: 2,\n        duration: 800,\n        ease: 'Power2',\n        onComplete: () => particle.destroy()\n      })\n    }\n  }\n\n  /**\n   * ドラッグのクリーンアップ\n   */\n  private cleanupDrag(cardContainer: Phaser.GameObjects.Container): void {\n    cardContainer.setDepth(0)\n    cardContainer.setAlpha(1)\n    cardContainer.setScale(1)\n\n    // トレイルの削除\n    const trail = cardContainer.getByName('drag-trail')\n    if (trail) {\n      trail.destroy()\n    }\n  }\n\n  /**\n   * チャレンジドロップの処理\n   */\n  private handleChallengeDrop(card: Card): void {\n    // 既存のGameSceneロジックとの統合\n    if (import.meta.env.DEV) {\n      console.log(`Challenge started with card: ${card.name}`)\n    }\n  }\n\n  /**\n   * 捨て札ドロップの処理\n   */\n  private handleDiscardDrop(card: Card): void {\n    // 既存のGameSceneロジックとの統合\n    if (import.meta.env.DEV) {\n      console.log(`Card discarded: ${card.name}`)\n    }\n  }\n\n  /**\n   * カスタムドロップゾーンを追加\n   */\n  addCustomZone(zone: DropZone): void {\n    this.dropZoneManager.addZone(zone)\n  }\n\n  /**\n   * ドロップゾーンを削除\n   */\n  removeZone(zoneId: string): void {\n    this.dropZoneManager.removeZone(zoneId)\n  }\n\n  /**\n   * クリーンアップ\n   */\n  destroy(): void {\n    this.dropZoneManager.destroy()\n  }\n}","import { BaseScene } from './BaseScene'\nimport { Game } from '@/domain/entities/Game'\nimport { Card } from '@/domain/entities/Card'\nimport { CardFactory } from '@/domain/services/CardFactory'\nimport { GAME_CONSTANTS } from '../config/gameConfig'\nimport type { CardType } from '@/domain/types/card.types'\nimport type { ChallengeResult } from '@/domain/types/game.types'\nimport { AGE_PARAMETERS } from '@/domain/types/game.types'\nimport { TutorialManager } from '../systems/TutorialManager'\nimport { TutorialOverlay } from '../ui/TutorialOverlay'\nimport type { TutorialConfig, TutorialStep } from '@/domain/types/tutorial.types'\nimport { setupGlobalTutorialTests } from '../tutorial/TutorialTestHelper'\nimport { INTERACTIVE_GAME_TUTORIAL } from '../tutorial/InteractiveTutorialConfig'\nimport { DropZoneIntegration } from '../systems/DropZoneIntegration'\n\n/**\n * メインゲームシーン\n */\nexport class GameScene extends BaseScene {\n  private gameInstance!: Game\n  private handCards: Phaser.GameObjects.Container[] = []\n  private selectedCards: Set<string> = new Set()\n  private cardSelectionUI?: Phaser.GameObjects.Container\n  private insuranceTypeSelectionUI?: Phaser.GameObjects.Container\n  private selectedInsuranceType?: 'whole_life' | 'term'\n  private vitalityBarContainer?: Phaser.GameObjects.Container\n  private vitalityBar?: Phaser.GameObjects.Rectangle\n  private vitalityBarMaxWidth: number = 300\n  private insuranceListContainer?: Phaser.GameObjects.Container\n  private burdenIndicatorContainer?: Phaser.GameObjects.Container\n  private insuranceRenewalDialogUI?: Phaser.GameObjects.Container\n  \n  // ドラッグ&ドロップ関連（新システム）\n  private dropZoneIntegration?: DropZoneIntegration\n  \n  // 旧システム（段階的移行のため一時的に保持）\n  private dropZones: Map<string, Phaser.GameObjects.Container> = new Map()\n  private dropZoneHighlights: Map<string, Phaser.GameObjects.Graphics> = new Map()\n  private isDragInProgress: boolean = false\n  private dragTrail?: Phaser.GameObjects.Graphics\n  private magneticEffect?: Phaser.GameObjects.Graphics\n\n  // チュートリアル関連\n  private tutorialManager?: TutorialManager\n  private tutorialOverlay?: TutorialOverlay\n  private isTutorialMode: boolean = false\n  private tutorialStepElements: Map<string, Phaser.GameObjects.GameObject> = new Map()\n  private shouldStartTutorial: boolean = false\n\n  constructor() {\n    super({ key: 'GameScene' })\n  }\n\n  init(data: { startTutorial?: boolean }): void {\n    // メニューからのチュートリアル開始要求をフラグとして保存\n    this.shouldStartTutorial = data.startTutorial || false\n  }\n\n  protected initialize(): void {\n    // ゲームインスタンスの初期化\n    this.initializeGame()\n\n    // UI要素の作成\n    this.createUI()\n\n    // カードエリアの作成\n    this.createCardAreas()\n\n    // チュートリアルUIの初期化\n    this.initializeTutorial()\n\n    // ゲーム開始\n    this.startGame()\n  }\n\n  /**\n   * ゲームを初期化\n   */\n  private initializeGame(): void {\n    this.gameInstance = new Game({\n      difficulty: 'normal',\n      startingVitality: 20,\n      startingHandSize: 5,\n      maxHandSize: 7,\n      dreamCardCount: 2\n    })\n\n    // 初期デッキを作成\n    const starterCards = CardFactory.createStarterLifeCards()\n    this.gameInstance.playerDeck.addCards(starterCards)\n    this.gameInstance.playerDeck.shuffle()\n\n    // チャレンジデッキを作成\n    const challengeCards = CardFactory.createChallengeCards(this.gameInstance.stage)\n    this.gameInstance.challengeDeck.addCards(challengeCards)\n    this.gameInstance.challengeDeck.shuffle()\n  }\n\n  /**\n   * UI要素を作成\n   */\n  private createUI(): void {\n    // 背景 - ダークでモダンな背景\n    this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x1F2937)\n      .setOrigin(0, 0)\n\n    // ヘッダー - グラデーション風の見た目\n    const header = this.add.rectangle(0, 0, this.gameWidth, 80, 0x4C1D95)\n      .setOrigin(0, 0)\n    header.setAlpha(0.9)\n\n    // ステージ表示\n    const stageText = this.add.text(\n      20,\n      40,\n      this.getStageDisplayText(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#F9FAFB',\n        fontStyle: 'bold'\n      }\n    )\n    stageText.setOrigin(0, 0.5)\n    stageText.setName('stage-text')\n\n    // 人生段階進行インジケーター\n    this.createLifeStageIndicator()\n\n    // 活力バーコンテナ\n    this.createVitalityBar()\n\n    // 活力表示（年齢段階を含む）\n    const stageLabel = this.getStageDisplayText()\n    const vitalityText = this.add.text(\n      this.centerX,\n      40,\n      `活力: ${this.gameInstance.vitality} / ${this.gameInstance.maxVitality} (${stageLabel})`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#F9FAFB',\n        fontStyle: 'bold'\n      }\n    )\n    vitalityText.setOrigin(0.5)\n    vitalityText.setShadow(2, 2, '#000000', 0.5, true, true)\n    vitalityText.setName('vitality-text')\n\n    // ターン表示\n    const turnText = this.add.text(\n      this.gameWidth - 20,\n      40,\n      `ターン: ${this.gameInstance.turn}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#E5E7EB'\n      }\n    )\n    turnText.setOrigin(1, 0.5)\n    turnText.setName('turn-text')\n\n    // アクションボタン\n    this.createActionButtons()\n\n    // Phase 3-3: 保険料負担インジケーター\n    this.createBurdenIndicator()\n\n    // Phase 3-3: 保険カード一覧\n    this.createInsuranceListDisplay()\n  }\n\n  /**\n   * Phase 3-3: 保険料負担インジケーターを作成\n   */\n  private createBurdenIndicator(): void {\n    this.burdenIndicatorContainer = this.add.container(this.gameWidth - 200, 120)\n    this.burdenIndicatorContainer.setName('burden-indicator')\n\n    // 背景 - ガラスモルフィズム風\n    const bg = this.add.rectangle(0, 0, 180, 50, 0x111827, 0.8)\n    bg.setStrokeStyle(1, 0x818CF8, 0.5)\n\n    // ラベル\n    const label = this.add.text(\n      -80, 0,\n      '保険料負担:',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#E5E7EB'\n      }\n    ).setOrigin(0, 0.5)\n\n    // 負担値\n    const burden = this.gameInstance.insuranceBurden\n    const burdenText = this.add.text(\n      40, 0,\n      burden === 0 ? '負担なし' : `${burden}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: burden === 0 ? '#10B981' : '#EF4444',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    burdenText.setShadow(1, 1, '#000000', 0.3, true, true)\n    burdenText.setName('burden-value')\n\n    this.burdenIndicatorContainer.add([bg, label, burdenText])\n  }\n\n  /**\n   * Phase 3-3: 保険カード一覧表示を作成\n   */\n  private createInsuranceListDisplay(): void {\n    this.insuranceListContainer = this.add.container(this.gameWidth - 150, 250)\n    this.insuranceListContainer.setName('insurance-list')\n\n    // タイトル\n    const title = this.add.text(\n      0, 0,\n      '有効な保険',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#F9FAFB',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    title.setShadow(1, 1, '#000000', 0.3, true, true)\n\n    this.insuranceListContainer.add(title)\n\n    // 保険カードリストを更新\n    this.updateInsuranceList()\n  }\n\n  /**\n   * 人生段階インジケーターを作成\n   */\n  private createLifeStageIndicator(): void {\n    const indicatorContainer = this.add.container(20, 70)\n    indicatorContainer.setName('life-stage-indicator')\n\n    const stages = ['youth', 'middle', 'fulfillment'] as const\n    const stageLabels = ['青年期', '中年期', '充実期']\n    const stageColors = [0x10B981, 0xF59E0B, 0xA78BFA]\n    const currentStageIndex = stages.indexOf(this.gameInstance.stage as 'youth' | 'middle' | 'fulfillment')\n\n    stages.forEach((stage, index) => {\n      const isActive = index <= currentStageIndex\n      const isCurrent = index === currentStageIndex\n      \n      // ステージドット\n      const dot = this.add.circle(\n        index * 50, 0,\n        isCurrent ? 8 : 6,\n        isActive ? stageColors[index] : 0x4B5563,\n        isActive ? 1 : 0.5\n      )\n      \n      // ステージラベル\n      const label = this.add.text(\n        index * 50, 15,\n        stageLabels[index],\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '10px',\n          color: isActive ? '#F9FAFB' : '#6B7280',\n          fontStyle: isCurrent ? 'bold' : 'normal'\n        }\n      ).setOrigin(0.5)\n      \n      // 最大活力表示\n      const maxVitalityForStage = index === 0 ? 35 : index === 1 ? 30 : 27\n      const maxVitalityLabel = this.add.text(\n        index * 50, 25,\n        `最大${maxVitalityForStage}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '8px',\n          color: isActive ? '#9CA3AF' : '#4B5563'\n        }\n      ).setOrigin(0.5)\n      \n      indicatorContainer.add([dot, label, maxVitalityLabel])\n      \n      // 現在のステージにパルス効果\n      if (isCurrent) {\n        this.tweens.add({\n          targets: dot,\n          scale: 1.2,\n          duration: 1500,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n      }\n      \n      // 接続線（最後のステージ以外）\n      if (index < stages.length - 1) {\n        const line = this.add.rectangle(\n          index * 50 + 25, 0,\n          20, 2,\n          isActive && index < currentStageIndex ? stageColors[index] : 0x4B5563,\n          isActive && index < currentStageIndex ? 1 : 0.3\n        )\n        indicatorContainer.add(line)\n      }\n    })\n  }\n\n  /**\n   * 人生段階インジケーターを更新\n   */\n  private updateLifeStageIndicator(): void {\n    const indicatorContainer = this.children.getByName('life-stage-indicator') as Phaser.GameObjects.Container\n    if (!indicatorContainer) return\n\n    indicatorContainer.destroy()\n    this.createLifeStageIndicator()\n  }\n\n  /**\n   * 活力バーを作成\n   */\n  private createVitalityBar(): void {\n    this.vitalityBarContainer = this.add.container(this.centerX, 65)\n    this.vitalityBarContainer.setName('vitality-bar-container')\n\n    // 活力バーの背景 - よりモダンなスタイル\n    const barBg = this.add.rectangle(\n      0, 0,\n      this.vitalityBarMaxWidth + 4,\n      24,\n      0x111827\n    )\n    barBg.setStrokeStyle(2, 0x818CF8)\n    barBg.setAlpha(0.8)\n\n    // 活力バー本体\n    const vitalityPercentage = this.gameInstance.vitality / this.gameInstance.maxVitality\n    const barWidth = Math.max(0, this.vitalityBarMaxWidth * vitalityPercentage)\n    \n    this.vitalityBar = this.add.rectangle(\n      -this.vitalityBarMaxWidth / 2, 0,\n      barWidth,\n      20,\n      this.getVitalityBarColor(vitalityPercentage)\n    )\n    this.vitalityBar.setOrigin(0, 0.5)\n\n    // 最大値マーカー（現在のステージの最大値を示す）\n    const maxMarker = this.add.rectangle(\n      -this.vitalityBarMaxWidth / 2 + this.vitalityBarMaxWidth, 0,\n      2,\n      24,\n      0x818CF8\n    )\n    maxMarker.setOrigin(0.5)\n\n    this.vitalityBarContainer.add([barBg, this.vitalityBar, maxMarker])\n  }\n\n  /**\n   * 活力バーの色を取得\n   */\n  private getVitalityBarColor(percentage: number): number {\n    if (percentage > 0.6) return 0x10B981 // 緑 - 高活力\n    if (percentage > 0.3) return 0xF59E0B // オレンジ - 中活力\n    return 0xEF4444 // 赤 - 低活力\n  }\n\n  /**\n   * カードエリアを作成\n   */\n  private createCardAreas(): void {\n    // デッキエリア\n    const deckArea = this.add.container(\n      GAME_CONSTANTS.DECK_X_POSITION,\n      GAME_CONSTANTS.DECK_Y_POSITION\n    )\n    \n    const deckBack = this.add.image(0, 0, 'card-back')\n    const deckCount = this.add.text(\n      0,\n      70,\n      `${this.gameInstance.playerDeck.size()}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#333333'\n      }\n    )\n    deckCount.setOrigin(0.5)\n    deckCount.setName('deck-count')\n\n    deckArea.add([deckBack, deckCount])\n    deckArea.setName('deck-area')\n\n    // 捨て札エリア\n    const discardArea = this.add.container(\n      GAME_CONSTANTS.DISCARD_X_POSITION,\n      GAME_CONSTANTS.DISCARD_Y_POSITION\n    )\n\n    const discardPlaceholder = this.add.rectangle(\n      0,\n      0,\n      GAME_CONSTANTS.CARD_WIDTH,\n      GAME_CONSTANTS.CARD_HEIGHT,\n      0xCCCCCC,\n      0.3\n    )\n    discardPlaceholder.setStrokeStyle(2, 0x999999)\n\n    const discardLabel = this.add.text(\n      0,\n      70,\n      '捨て札',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#666666'\n      }\n    ).setOrigin(0.5)\n\n    discardArea.add([discardPlaceholder, discardLabel])\n    discardArea.setName('discard-area')\n\n    // チャレンジエリア\n    const challengeArea = this.add.container(\n      this.centerX,\n      GAME_CONSTANTS.CHALLENGE_Y_POSITION\n    )\n\n    const challengePlaceholder = this.add.rectangle(\n      0,\n      0,\n      GAME_CONSTANTS.CARD_WIDTH,\n      GAME_CONSTANTS.CARD_HEIGHT,\n      0xFFD43B,\n      0.3\n    )\n    challengePlaceholder.setStrokeStyle(2, 0xFAB005)\n\n    const challengeLabel = this.add.text(\n      0,\n      -100,\n      'チャレンジ',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#333333'\n      }\n    ).setOrigin(0.5)\n\n    challengeArea.add([challengePlaceholder, challengeLabel])\n    challengeArea.setName('challenge-area')\n    \n    // ドロップゾーンの初期化\n    this.initializeDropZones()\n    \n    // 新しいドロップゾーンシステムの初期化\n    this.initializeNewDropZoneSystem()\n  }\n\n  /**\n   * ドロップゾーンを初期化\n   */\n  private initializeDropZones(): void {\n    // チャレンジエリアのドロップゾーンを登録\n    const challengeArea = this.children.getByName('challenge-area') as Phaser.GameObjects.Container\n    if (challengeArea) {\n      this.dropZones.set('challenge', challengeArea)\n      this.createDropZoneHighlight('challenge', challengeArea.x, challengeArea.y, GAME_CONSTANTS.CARD_WIDTH + 20, GAME_CONSTANTS.CARD_HEIGHT + 20)\n    }\n    \n    // 捨て札エリアのドロップゾーンを登録\n    const discardArea = this.children.getByName('discard-area') as Phaser.GameObjects.Container\n    if (discardArea) {\n      this.dropZones.set('discard', discardArea)\n      this.createDropZoneHighlight('discard', discardArea.x, discardArea.y, GAME_CONSTANTS.CARD_WIDTH + 20, GAME_CONSTANTS.CARD_HEIGHT + 20)\n    }\n    \n    // ドラッグトレイル用のグラフィックスを作成\n    this.dragTrail = this.add.graphics()\n    this.dragTrail.setDepth(900) // カードより下、通常要素より上\n    \n    // マグネティック効果用のグラフィックスを作成\n    this.magneticEffect = this.add.graphics()\n    this.magneticEffect.setDepth(950) // ドラッグトレイルより上\n  }\n\n  /**\n   * 新しいドロップゾーンシステムを初期化\n   */\n  private initializeNewDropZoneSystem(): void {\n    // DropZoneIntegrationを初期化（デフォルトゾーンは自動的に設定される）\n    this.dropZoneIntegration = new DropZoneIntegration(this, this.gameInstance)\n    \n    // カード選択イベントのハンドリングを設定\n    this.data.events.on('cardSelected', (cardContainer: Phaser.GameObjects.Container) => {\n      this.toggleCardSelection(cardContainer)\n    })\n  }\n\n  /**\n   * ドロップゾーンのハイライトを作成\n   */\n  private createDropZoneHighlight(zoneName: string, x: number, y: number, _width: number, _height: number): void {\n    const highlight = this.add.graphics()\n    highlight.setPosition(x, y)\n    highlight.setAlpha(0) // 初期状態では非表示\n    highlight.setDepth(100) // カードより下に表示\n    \n    this.dropZoneHighlights.set(zoneName, highlight)\n  }\n\n  /**\n   * ドロップゾーンハイライトを表示\n   */\n  private showDropZoneHighlights(draggedCard?: Phaser.GameObjects.Container): void {\n    this.dropZoneHighlights.forEach((highlight, zoneName) => {\n      const isValid = this.isValidDropZone(zoneName, draggedCard)\n      const color = isValid ? GAME_CONSTANTS.COLORS.DROP_ZONE_VALID : GAME_CONSTANTS.COLORS.DROP_ZONE_INVALID\n      const alpha = isValid ? 0.3 : 0.15\n      \n      // ハイライトの描画をクリア\n      highlight.clear()\n      \n      // 円形のハイライトを描画\n      const radius = (GAME_CONSTANTS.CARD_WIDTH + 40) / 2\n      highlight.fillStyle(color, alpha)\n      highlight.fillCircle(0, 0, radius)\n      \n      // 境界線を描画\n      highlight.lineStyle(3, color, 0.8)\n      highlight.strokeCircle(0, 0, radius)\n      \n      // パルス効果のアニメーション\n      this.tweens.add({\n        targets: highlight,\n        alpha: alpha * 1.5,\n        scaleX: 1.1,\n        scaleY: 1.1,\n        duration: GAME_CONSTANTS.DRAG_DROP.GLOW_PULSE_DURATION / 2,\n        ease: 'Sine.easeInOut',\n        yoyo: true,\n        repeat: -1\n      })\n      \n      // フェードイン\n      this.tweens.add({\n        targets: highlight,\n        alpha: alpha,\n        duration: 200,\n        ease: 'Power2'\n      })\n    })\n  }\n\n  /**\n   * ドロップゾーンハイライトを隠す\n   */\n  private hideDropZoneHighlights(): void {\n    this.dropZoneHighlights.forEach((highlight) => {\n      // アニメーション停止\n      this.tweens.killTweensOf(highlight)\n      \n      // フェードアウト\n      this.tweens.add({\n        targets: highlight,\n        alpha: 0,\n        scaleX: 1,\n        scaleY: 1,\n        duration: 200,\n        ease: 'Power2',\n        onComplete: () => {\n          highlight.clear()\n        }\n      })\n    })\n  }\n\n  /**\n   * ドロップゾーンが有効かどうかを判定\n   */\n  private isValidDropZone(zoneName: string, draggedCard?: Phaser.GameObjects.Container): boolean {\n    if (!draggedCard) return true\n    \n    switch (zoneName) {\n      case 'challenge':\n        // チャレンジエリアは、チャレンジが開始されている、かつ現在チャレンジカードがない場合に有効\n        return this.gameInstance.currentChallenge !== null && !this.gameInstance.currentChallenge.isCardPlaced\n      case 'discard':\n        // 捨て札エリアは常に有効\n        return true\n      default:\n        return false\n    }\n  }\n\n  /**\n   * ドラッグ中のマグネティック効果を更新\n   */\n  private updateMagneticEffect(cardX: number, cardY: number): string | null {\n    let closestZone: string | null = null\n    let minDistance = GAME_CONSTANTS.DRAG_DROP.SNAP_DISTANCE\n    \n    // マグネティック効果をクリア\n    if (this.magneticEffect) {\n      this.magneticEffect.clear()\n    }\n    \n    this.dropZones.forEach((zone, zoneName) => {\n      const distance = Phaser.Math.Distance.Between(cardX, cardY, zone.x, zone.y)\n      \n      if (distance < GAME_CONSTANTS.DRAG_DROP.SNAP_DISTANCE && distance < minDistance) {\n        minDistance = distance\n        closestZone = zoneName\n      }\n    })\n    \n    // 最も近いゾーンにマグネティック効果を表示\n    if (closestZone && this.magneticEffect) {\n      const zone = this.dropZones.get(closestZone)\n      if (zone && this.isValidDropZone(closestZone)) {\n        // マグネティック効果のグロウを描画\n        this.magneticEffect.clear()\n        this.magneticEffect.fillStyle(GAME_CONSTANTS.COLORS.MAGNETIC_GLOW, 0.4)\n        this.magneticEffect.fillCircle(zone.x, zone.y, (GAME_CONSTANTS.CARD_WIDTH + 60) / 2)\n        \n        // 引力線を描画\n        this.magneticEffect.lineStyle(3, GAME_CONSTANTS.COLORS.MAGNETIC_GLOW, 0.6)\n        this.magneticEffect.beginPath()\n        this.magneticEffect.moveTo(cardX, cardY)\n        this.magneticEffect.lineTo(zone.x, zone.y)\n        this.magneticEffect.strokePath()\n      }\n    }\n    \n    return closestZone\n  }\n\n  /**\n   * ドラッグトレイルを更新\n   */\n  private updateDragTrail(cardX: number, cardY: number): void {\n    if (!this.dragTrail) return\n    \n    // トレイル効果を描画\n    this.dragTrail.fillStyle(GAME_CONSTANTS.COLORS.DRAG_SHADOW, 0.2)\n    this.dragTrail.fillCircle(cardX - 5, cardY + 5, 30) // 少しオフセットしたシャドウ\n  }\n\n  /**\n   * アクションボタンを作成\n   */\n  private createActionButtons(): void {\n    const buttonContainer = this.add.container(this.gameWidth - 150, 150)\n    buttonContainer.setName('action-buttons')\n\n    // ドローボタン\n    const drawButton = this.createContainerButton(\n      0,\n      0,\n      'カードを引く',\n      () => this.drawCards(1),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    )\n    drawButton.setName('draw-button')\n\n    // チャレンジボタン\n    const challengeButton = this.createContainerButton(\n      0,\n      60,\n      'チャレンジ',\n      () => this.startChallenge(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    )\n    challengeButton.setName('challenge-button')\n\n    // ターン終了ボタン\n    const endTurnButton = this.createContainerButton(\n      0,\n      120,\n      'ターン終了',\n      () => this.endTurn(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    )\n    endTurnButton.setName('end-turn-button')\n\n    buttonContainer.add([drawButton, challengeButton, endTurnButton])\n    \n    // 初期状態でボタンの有効/無効を設定\n    this.updateActionButtons()\n  }\n\n  /**\n   * ゲーム開始\n   */\n  private startGame(): void {\n    this.gameInstance.start()\n    \n    // 初期手札を引く\n    this.drawCards(GAME_CONSTANTS.INITIAL_DRAW)\n    \n    // ボタン状態を初期化\n    this.time.delayedCall(100, () => {\n      this.updateActionButtons()\n    })\n\n    // ゲーム状態を公開（チュートリアル用）\n    this.updateGameStateForTutorial()\n\n    // チュートリアルの自動開始\n    if (this.shouldStartTutorial) {\n      this.time.delayedCall(500, () => {\n        this.autoStartTutorial()\n      })\n    }\n  }\n\n  /**\n   * カードを引く\n   */\n  private drawCards(count: number): void {\n    const drawnCards = this.gameInstance.drawCards(count)\n    \n    drawnCards.forEach((card, index) => {\n      this.time.delayedCall(index * 100, () => {\n        this.createHandCard(card)\n      })\n    })\n\n    // 手札を再配置\n    this.time.delayedCall(count * 100 + 100, () => {\n      this.arrangeHand()\n      // チュートリアル用にゲーム状態を更新\n      this.updateGameStateForTutorial()\n    })\n  }\n\n  /**\n   * 手札にカードを作成\n   */\n  private createHandCard(card: Card): void {\n    const cardContainer = this.add.container(\n      GAME_CONSTANTS.DECK_X_POSITION,\n      GAME_CONSTANTS.DECK_Y_POSITION\n    )\n\n    // カード背景 - グラデーションと角丸\n    const graphics = this.add.graphics()\n    const cardColor = this.getCardColor(card.type)\n    \n    // グラデーション背景\n    graphics.fillGradientStyle(cardColor.top, cardColor.top, cardColor.bottom, cardColor.bottom, 1)\n    graphics.fillRoundedRect(-60, -80, 120, 160, 12)\n    \n    // ガラスモルフィズム効果\n    const glassBg = this.add.rectangle(0, 0, 116, 156, 0xffffff, 0.1)\n    glassBg.setStrokeStyle(1, 0xffffff, 0.3)\n    \n    // カードをインタラクティブに\n    const hitArea = new Phaser.Geom.Rectangle(-60, -80, 120, 160)\n    cardContainer.setInteractive(hitArea, Phaser.Geom.Rectangle.Contains)\n\n    // カード名\n    const cardName = this.add.text(\n      0,\n      -60,\n      card.name,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#F9FAFB',\n        fontStyle: 'bold',\n        wordWrap: { width: 100 }\n      }\n    ).setOrigin(0.5)\n    cardName.setShadow(1, 1, '#000000', 0.5, true, true)\n\n    // パワー表示\n    const powerBg = this.add.circle(-40, 60, 20, 0x111827, 0.8)\n    const powerText = this.add.text(\n      -40,\n      60,\n      `${card.power}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#10B981',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // コスト表示\n    const costBg = this.add.circle(40, 60, 18, 0x111827, 0.8)\n    const costText = this.add.text(\n      40,\n      60,\n      `${card.cost}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#F59E0B',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 年齢ボーナス表示（保険カードの場合）\n    let ageBonusIndicator: Phaser.GameObjects.Container | null = null\n    if (card.type === 'insurance' && card.ageBonus !== undefined && card.ageBonus > 0) {\n      const stage = this.gameInstance.stage\n      let currentBonus = 0\n      if (stage === 'middle') currentBonus = 0.5\n      else if (stage === 'fulfillment') currentBonus = 1.0\n      \n      if (currentBonus > 0) {\n        // 年齢ボーナス背景\n        const bonusBg = this.add.circle(0, -60, 12, 0x6366F1, 0.9)\n        \n        // 年齢ボーナステキスト\n        const bonusText = this.add.text(\n          0, -60,\n          `+${currentBonus}`,\n          {\n            fontFamily: 'Noto Sans JP',\n            fontSize: '12px',\n            color: '#FFFFFF',\n            fontStyle: 'bold'\n          }\n        ).setOrigin(0.5)\n        \n        ageBonusIndicator = this.add.container(0, 0, [bonusBg, bonusText])\n        ageBonusIndicator.setAlpha(0.8)\n        \n        // パルス効果\n        this.tweens.add({\n          targets: ageBonusIndicator,\n          alpha: 1,\n          scale: 1.1,\n          duration: 1000,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n      }\n    }\n\n    // 効果的パワー表示（年齢ボーナス適用後）\n    let effectivePower = card.power\n    if (card.type === 'insurance' && card.ageBonus !== undefined) {\n      const stage = this.gameInstance.stage\n      let multiplier = 1\n      if (stage === 'middle') multiplier = 1.5\n      else if (stage === 'fulfillment') multiplier = 2.0\n      effectivePower = Math.floor(card.power * multiplier)\n    }\n\n    // パワー表示を効果的パワーに更新\n    if (effectivePower !== card.power) {\n      powerText.setText(`${effectivePower}`)\n      powerText.setColor('#A78BFA') // 紫色で年齢ボーナスを表示\n      \n      // 基本パワーを小さく表示\n      const basePowerText = this.add.text(\n        -40, 45,\n        `(${card.power})`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '12px',\n          color: '#9CA3AF',\n          fontStyle: 'normal'\n        }\n      ).setOrigin(0.5)\n      \n      const cardElements = [graphics, glassBg, cardName, powerBg, powerText, basePowerText, costBg, costText]\n      if (ageBonusIndicator) cardElements.push(ageBonusIndicator)\n      cardContainer.add(cardElements)\n    } else {\n      const cardElements = [graphics, glassBg, cardName, powerBg, powerText, costBg, costText]\n      if (ageBonusIndicator) cardElements.push(ageBonusIndicator)\n      cardContainer.add(cardElements)\n    }\n    \n    cardContainer.setData('card', card)\n    cardContainer.setData('selected', false)\n    \n    // ホバーエフェクト用のグロウ\n    const glow = this.add.rectangle(0, 0, 130, 170, 0x818CF8, 0)\n    glow.setAlpha(0)\n    cardContainer.add(glow)\n    cardContainer.sendToBack(glow)\n    cardContainer.setData('glow', glow)\n    \n    // インタラクション設定\n    this.setupCardInteraction(cardContainer)\n    \n    // 新しいドラッグ&ドロップシステムの設定\n    if (this.dropZoneIntegration) {\n      this.dropZoneIntegration.setupCardDragAndDrop(cardContainer)\n    }\n    \n    this.handCards.push(cardContainer)\n  }\n\n  /**\n   * カードテンプレートを取得\n   */\n  private getCardTemplate(type: CardType): string {\n    switch (type) {\n      case 'life':\n        return 'life-card-template'\n      case 'insurance':\n        return 'insurance-card-template'\n      case 'pitfall':\n        return 'pitfall-card-template'\n      default:\n        return 'life-card-template'\n    }\n  }\n\n  /**\n   * カードの色を取得\n   */\n  private getCardColor(type: CardType): { top: number; bottom: number } {\n    switch (type) {\n      case 'life':\n        return { top: 0x667eea, bottom: 0x764ba2 }  // 紫グラデーション\n      case 'insurance':\n        return { top: 0x10B981, bottom: 0x059669 }  // 緑グラデーション\n      case 'pitfall':\n        return { top: 0xEF4444, bottom: 0xDC2626 }  // 赤グラデーション\n      case 'dream':\n        return { top: 0xFCD34D, bottom: 0xF59E0B }  // 金色グラデーション\n      default:\n        return { top: 0x6B7280, bottom: 0x4B5563 }  // グレーグラデーション\n    }\n  }\n\n  /**\n   * カードのインタラクションを設定\n   */\n  private setupCardInteraction(cardContainer: Phaser.GameObjects.Container): void {\n    // ドラッグ用の初期位置を保存\n    cardContainer.setData('originalX', cardContainer.x)\n    cardContainer.setData('originalY', cardContainer.y)\n    cardContainer.setData('isDragging', false)\n    \n    const glow = cardContainer.getData('glow')\n\n    // ドラッグ可能に設定\n    this.input.setDraggable(cardContainer)\n\n    // ホバー効果\n    cardContainer.on('pointerover', () => {\n      if (!cardContainer.getData('selected') && !cardContainer.getData('isDragging')) {\n        // スケールアップアニメーション\n        this.tweens.add({\n          targets: cardContainer,\n          scaleX: GAME_CONSTANTS.CARD_HOVER_SCALE,\n          scaleY: GAME_CONSTANTS.CARD_HOVER_SCALE,\n          duration: 200,\n          ease: 'Power2'\n        })\n        \n        // グロウエフェクト\n        if (glow) {\n          this.tweens.add({\n            targets: glow,\n            alpha: 0.3,\n            duration: 200,\n            ease: 'Power2'\n          })\n        }\n      }\n    })\n\n    cardContainer.on('pointerout', () => {\n      if (!cardContainer.getData('selected') && !cardContainer.getData('isDragging')) {\n        // スケールダウンアニメーション\n        this.tweens.add({\n          targets: cardContainer,\n          scaleX: 1,\n          scaleY: 1,\n          duration: 200,\n          ease: 'Power2'\n        })\n        \n        // グロウエフェクト消去\n        if (glow) {\n          this.tweens.add({\n            targets: glow,\n            alpha: 0,\n            duration: 200,\n            ease: 'Power2'\n          })\n        }\n      }\n    })\n\n    // クリック（選択）\n    cardContainer.on('pointerdown', (pointer: Phaser.Input.Pointer) => {\n      // 右クリックでドラッグ開始を防ぐ\n      if (pointer.rightButtonDown()) return\n      \n      cardContainer.setData('dragStartTime', this.time.now)\n      cardContainer.setDepth(1000) // 最前面に表示\n    })\n\n    cardContainer.on('pointerup', () => {\n      const dragStartTime = cardContainer.getData('dragStartTime')\n      const isDragging = cardContainer.getData('isDragging')\n      \n      // クリック判定（ドラッグしていない場合）\n      if (!isDragging && dragStartTime && this.time.now - dragStartTime < 200) {\n        this.toggleCardSelection(cardContainer)\n      }\n      \n      cardContainer.setData('isDragging', false)\n    })\n\n    // ドラッグ開始\n    cardContainer.on('dragstart', () => {\n      cardContainer.setData('isDragging', true)\n      this.isDragInProgress = true\n      \n      // 新しいビジュアル効果\n      cardContainer.setScale(GAME_CONSTANTS.DRAG_DROP.DRAG_SCALE)\n      cardContainer.setAlpha(GAME_CONSTANTS.DRAG_DROP.DRAG_ALPHA)\n      \n      // ドロップゾーンハイライトを表示\n      this.showDropZoneHighlights(cardContainer)\n      \n      // ドラッグトレイルをクリア\n      if (this.dragTrail) {\n        this.dragTrail.clear()\n      }\n      \n      // ドラッグ中は選択を解除\n      if (cardContainer.getData('selected')) {\n        this.toggleCardSelection(cardContainer)\n      }\n    })\n\n    // ドラッグ中\n    cardContainer.on('drag', (pointer: Phaser.Input.Pointer, dragX: number, dragY: number) => {\n      // モバイル端末でのタッチオフセット調整\n      const isMobile = this.scale.orientation === Phaser.Scale.LANDSCAPE || this.scale.orientation === Phaser.Scale.PORTRAIT\n      const offsetY = isMobile ? -GAME_CONSTANTS.DRAG_DROP.MOBILE_TOUCH_OFFSET : 0\n      \n      cardContainer.x = dragX\n      cardContainer.y = dragY + offsetY\n      \n      // ドラッグトレイルを更新\n      this.updateDragTrail(cardContainer.x, cardContainer.y)\n      \n      // マグネティック効果を更新\n      const closestZone = this.updateMagneticEffect(cardContainer.x, cardContainer.y)\n      \n      // マグネティックスナップ\n      if (closestZone && this.isValidDropZone(closestZone, cardContainer)) {\n        const zone = this.dropZones.get(closestZone)\n        if (zone) {\n          const distance = Phaser.Math.Distance.Between(cardContainer.x, cardContainer.y, zone.x, zone.y)\n          if (distance < GAME_CONSTANTS.DRAG_DROP.SNAP_DISTANCE) {\n            // マグネティックスナップアニメーション\n            this.tweens.add({\n              targets: cardContainer,\n              x: zone.x,\n              y: zone.y,\n              duration: GAME_CONSTANTS.DRAG_DROP.SNAP_DURATION,\n              ease: 'Power2.out'\n            })\n          }\n        }\n      }\n    })\n\n    // ドラッグ終了\n    cardContainer.on('dragend', () => {\n      this.isDragInProgress = false\n      \n      // ビジュアル効果をリセット\n      cardContainer.setScale(1)\n      cardContainer.setAlpha(1)\n      \n      // ドロップゾーンハイライトを隠す\n      this.hideDropZoneHighlights()\n      \n      // マグネティック効果とドラッグトレイルをクリア\n      if (this.magneticEffect) {\n        this.magneticEffect.clear()\n      }\n      if (this.dragTrail) {\n        this.dragTrail.clear()\n      }\n      \n      // ドロップ先の判定（新しいgetDropZoneV2を使用）\n      const dropZone = this.getDropZoneV2(cardContainer.x, cardContainer.y)\n      \n      if (dropZone && this.isValidDropZone(dropZone, cardContainer)) {\n        // 有効なドロップゾーンにドロップ\n        this.handleValidDrop(dropZone, cardContainer)\n      } else {\n        // 無効なドロップ - 元の位置に戻す（振動効果付き）\n        this.handleInvalidDrop(cardContainer)\n      }\n      \n      cardContainer.setDepth(0) // 通常の深度に戻す\n    })\n  }\n\n  /**\n   * カードの選択状態を切り替え\n   */\n  private toggleCardSelection(cardContainer: Phaser.GameObjects.Container): void {\n    const card = cardContainer.getData('card') as Card\n    const isSelected = cardContainer.getData('selected')\n    \n    if (isSelected) {\n      this.selectedCards.delete(card.id)\n      cardContainer.setData('selected', false)\n      cardContainer.setScale(1)\n      \n      // ハイライト削除\n      const highlight = cardContainer.getByName('highlight')\n      if (highlight) {\n        highlight.destroy()\n      }\n    } else {\n      this.selectedCards.add(card.id)\n      cardContainer.setData('selected', true)\n      \n      // ハイライト追加\n      const highlight = this.add.image(0, 0, 'card-highlight')\n      highlight.setName('highlight')\n      cardContainer.addAt(highlight, 0)\n    }\n\n    // チャレンジ中ならパワー表示を更新\n    if (this.gameInstance.currentChallenge) {\n      this.updatePowerDisplay()\n    }\n  }\n\n  /**\n   * 手札を整列\n   */\n  private arrangeHand(): void {\n    const cardCount = this.handCards.length\n    const totalWidth = (cardCount - 1) * (GAME_CONSTANTS.CARD_WIDTH + GAME_CONSTANTS.CARD_SPACING)\n    const startX = this.centerX - totalWidth / 2\n\n    this.handCards.forEach((card, index) => {\n      const targetX = startX + index * (GAME_CONSTANTS.CARD_WIDTH + GAME_CONSTANTS.CARD_SPACING)\n      \n      // ドラッグ用の元の位置を更新\n      card.setData('originalX', targetX)\n      card.setData('originalY', GAME_CONSTANTS.HAND_Y_POSITION)\n      \n      this.tweens.add({\n        targets: card,\n        x: targetX,\n        y: GAME_CONSTANTS.HAND_Y_POSITION,\n        duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\n        ease: 'Power2'\n      })\n    })\n  }\n\n  /**\n   * チャレンジ開始\n   */\n  private startChallenge(): void {\n    if (this.gameInstance.currentChallenge) {\n      // すでにチャレンジが進行中\n      return\n    }\n\n    // チャレンジカードを引く\n    const challengeCard = this.gameInstance.challengeDeck.drawCard()\n    if (!challengeCard) {\n      // チャレンジカードがありません\n      return\n    }\n\n    // チャレンジ開始\n    this.gameInstance.startChallenge(challengeCard)\n    \n    // チャレンジカードを表示\n    this.displayChallengeCard(challengeCard)\n    \n    // UIを更新\n    this.updateChallengeUI()\n    this.updateActionButtons()\n  }\n\n  /**\n   * ターン終了\n   */\n  private endTurn(): void {\n    if (!this.gameInstance.isInProgress()) return\n    \n    // フェーズをチェックして適切に処理\n    if (this.gameInstance.phase === 'resolution' || this.gameInstance.phase === 'draw') {\n      // ステージ進行チェック\n      this.checkStageProgress()\n      \n      // 次のターンへ\n      this.gameInstance.nextTurn()\n      \n      // 簡素化版：保険は永続効果のため、期限切れ処理は不要\n      \n      // UI更新\n      this.updateUI()\n      this.updateActionButtons()\n      \n      // チュートリアル用にゲーム状態を更新\n      this.updateGameStateForTutorial()\n      \n      // ゲーム終了判定\n      this.checkGameEnd()\n    }\n  }\n\n  /**\n   * Phase 3-3: 保険カードリストを更新\n   */\n  private updateInsuranceList(): void {\n    if (!this.insuranceListContainer) return\n\n    // 既存のカードアイテムを削除（タイトル以外）\n    const itemsToRemove = this.insuranceListContainer.list.filter((item, index) => index > 0)\n    itemsToRemove.forEach(item => item.destroy())\n\n    const activeInsurances = this.gameInstance.getActiveInsurances()\n    \n    if (activeInsurances.length === 0) {\n      const noInsuranceText = this.add.text(\n        0, 30,\n        'なし',\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#999999'\n        }\n      ).setOrigin(0.5)\n      this.insuranceListContainer.add(noInsuranceText)\n      return\n    }\n\n    // 保険カードをリスト表示\n    activeInsurances.forEach((insurance, index) => {\n      const yPos = 30 + index * 35\n\n      // カードコンテナ\n      const cardItem = this.add.container(0, yPos)\n\n      // Phase 5-2: 期限切れ間近の警告表示\n      const isExpiringSoon = insurance.durationType === 'term' && \n                             insurance.remainingTurns !== undefined && \n                             insurance.remainingTurns <= 2\n      const isExpiringSoonTwoTurns = isExpiringSoon && insurance.remainingTurns === 2\n      const isExpiringSoonOneTurn = isExpiringSoon && insurance.remainingTurns === 1\n\n      // カード背景色の決定\n      let bgColor = insurance.durationType === 'whole_life' ? 0xFFD700 : 0xC0C0C0\n      let strokeColor = bgColor\n      \n      if (isExpiringSoonTwoTurns) {\n        bgColor = 0xFFA500  // オレンジ色（警告）\n        strokeColor = 0xFFA500\n      } else if (isExpiringSoonOneTurn) {\n        bgColor = 0xFF4444  // 赤色（危険）\n        strokeColor = 0xFF4444\n      }\n\n      // カード背景\n      const itemBg = this.add.rectangle(\n        0, 0, 240, 30,\n        bgColor,\n        0.2\n      )\n      itemBg.setStrokeStyle(2, strokeColor)\n\n      // Phase 5-2: 期限切れ間近の点滅アニメーション\n      if (isExpiringSoon) {\n        const animationDuration = isExpiringSoonOneTurn ? 300 : 500  // 1ターン残りは速い点滅\n        this.tweens.add({\n          targets: itemBg,\n          alpha: 0.3,\n          duration: animationDuration,\n          yoyo: true,\n          repeat: -1,\n          ease: 'Sine.easeInOut'\n        })\n        itemBg.setFillStyle(bgColor, 0.3)\n      }\n\n      // Phase 5-2: 保険種別バッジ（警告状況に応じて色変更）\n      let badgeColor = insurance.durationType === 'whole_life' ? 0xFFD700 : 0xC0C0C0\n      let textColor = insurance.durationType === 'whole_life' ? '#000000' : '#ffffff'\n      \n      if (isExpiringSoonTwoTurns) {\n        badgeColor = 0xFFA500  // オレンジ色（警告）\n        textColor = '#000000'\n      } else if (isExpiringSoonOneTurn) {\n        badgeColor = 0xFF4444  // 赤色（危険）\n        textColor = '#ffffff'\n      }\n\n      const typeBadge = this.add.rectangle(\n        -100, 0, 40, 20,\n        badgeColor\n      )\n      typeBadge.setStrokeStyle(1, 0xffffff)\n\n      const typeText = this.add.text(\n        -100, 0,\n        insurance.durationType === 'whole_life' ? '終身' : '定期',\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '10px',\n          color: textColor,\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n\n      // カード名\n      const nameText = this.add.text(\n        -50, 0,\n        insurance.name.length > 8 ? insurance.name.substring(0, 8) + '...' : insurance.name,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '12px',\n          color: '#ffffff'\n        }\n      ).setOrigin(0, 0.5)\n\n      // Phase 5-2: 年齢ボーナス表示（終身保険のみ）\n      if (insurance.durationType === 'whole_life') {\n        const stage = this.gameInstance.stage\n        let bonus = 0\n        if (stage === 'middle') bonus = 0.5\n        else if (stage === 'fulfillment') bonus = 1.0\n        \n        if (bonus > 0) {\n          const bonusText = this.add.text(\n            50, 0,\n            `+${bonus}`,\n            {\n              fontFamily: 'Noto Sans JP',\n              fontSize: '12px',\n              color: '#4ade80',\n              fontStyle: 'bold'\n            }\n          ).setOrigin(0.5)\n          cardItem.add(bonusText)\n        }\n      }\n\n      // 残りターン数（定期保険の場合）\n      if (insurance.durationType === 'term' && insurance.remainingTurns !== undefined) {\n        // 残りターン数に応じた色分け\n        let turnsTextColor = '#ffffff'\n        if (insurance.remainingTurns === 2) {\n          turnsTextColor = '#FFA500'  // オレンジ色（警告）\n        } else if (insurance.remainingTurns === 1) {\n          turnsTextColor = '#FF4444'  // 赤色（危険）\n        }\n\n        const turnsText = this.add.text(\n          100, 0,\n          `残り${insurance.remainingTurns}T`,\n          {\n            fontFamily: 'Noto Sans JP',\n            fontSize: '12px',\n            color: turnsTextColor,\n            fontStyle: insurance.remainingTurns <= 2 ? 'bold' : 'normal'\n          }\n        ).setOrigin(1, 0.5)\n        \n        // Phase 5-2: 期限切れ間近の警告アイコン（色分け対応）\n        if (insurance.remainingTurns <= 2) {\n          const warningIconColor = insurance.remainingTurns === 1 ? '#FF4444' : '#FFA500'\n          const warningIcon = this.add.text(\n            115, 0,\n            insurance.remainingTurns === 1 ? '🚨' : '⚠',\n            {\n              fontFamily: 'Noto Sans JP',\n              fontSize: '14px',\n              color: warningIconColor\n            }\n          ).setOrigin(0.5)\n          cardItem.add(warningIcon)\n        }\n        \n        cardItem.add(turnsText)\n      }\n\n      cardItem.add([itemBg, typeBadge, typeText, nameText])\n      this.insuranceListContainer.add(cardItem)\n\n      // 3枚ごとに区切り線\n      if ((index + 1) % 3 === 0 && index < activeInsurances.length - 1) {\n        const divider = this.add.rectangle(\n          0, yPos + 20, 200, 2,\n          0xff4444, 0.5\n        )\n        this.insuranceListContainer.add(divider)\n      }\n    })\n\n    // 負担発生の警告\n    if (activeInsurances.length >= 3) {\n      const warningText = this.add.text(\n        0, 30 + activeInsurances.length * 35 + 10,\n        `⚠ ${Math.floor(activeInsurances.length / 3)}ポイント負担中`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#ff4444',\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n      this.insuranceListContainer.add(warningText)\n    }\n  }\n\n  /**\n   * Phase 3-3: 保険料負担インジケーターを更新\n   */\n  private updateBurdenIndicator(): void {\n    if (!this.burdenIndicatorContainer) return\n\n    const burdenText = this.burdenIndicatorContainer.getByName('burden-value') as Phaser.GameObjects.Text\n    if (!burdenText) return\n\n    const burden = this.gameInstance.insuranceBurden\n    const previousBurden = parseInt(burdenText.text === '負担なし' ? '0' : burdenText.text)\n\n    // 負担値を更新\n    burdenText.setText(burden === 0 ? '負担なし' : `${burden}`)\n    burdenText.setColor(burden === 0 ? '#00ff00' : '#ff4444')\n\n    // 負担が増えた場合は警告アニメーション\n    if (burden < previousBurden) { // 負の値なので逆\n      this.tweens.add({\n        targets: this.burdenIndicatorContainer,\n        scaleX: 1.2,\n        scaleY: 1.2,\n        duration: 200,\n        yoyo: true,\n        ease: 'Power2',\n        onComplete: () => {\n          // 赤く点滅\n          const bg = this.burdenIndicatorContainer?.list[0] as Phaser.GameObjects.Rectangle\n          if (bg) {\n            bg.setFillStyle(0xff0000, 0.8)\n            this.time.delayedCall(300, () => {\n              bg.setFillStyle(0x000000, 0.7)\n            })\n          }\n        }\n      })\n    }\n  }\n\n  /**\n   * UI更新\n   */\n  private updateUI(): void {\n    // 活力表示を更新（年齢段階を含む）\n    const vitalityText = this.children.getByName('vitality-text') as Phaser.GameObjects.Text\n    if (vitalityText) {\n      const stageLabel = this.getStageDisplayText()\n      vitalityText.setText(`活力: ${this.gameInstance.vitality} / ${this.gameInstance.maxVitality} (${stageLabel})`)\n    }\n\n    // 活力バーを更新\n    this.updateVitalityBar()\n\n    // ターン数表示を更新\n    const turnText = this.children.getByName('turn-text') as Phaser.GameObjects.Text\n    if (turnText) {\n      turnText.setText(`ターン: ${this.gameInstance.turn}`)\n    }\n\n    // デッキ枚数を更新\n    const deckCount = this.children.getByName('deck-count') as Phaser.GameObjects.Text\n    if (deckCount) {\n      deckCount.setText(`${this.gameInstance.playerDeck.size()}`)\n    }\n    \n    // ステージ表示を更新\n    const stageText = this.children.getByName('stage-text') as Phaser.GameObjects.Text\n    if (stageText) {\n      stageText.setText(this.getStageDisplayText())\n    }\n\n    // Phase 3-3: 保険関連UIを更新\n    this.updateInsuranceList()\n    this.updateBurdenIndicator()\n  }\n\n  /**\n   * 活力バーを更新\n   */\n  private updateVitalityBar(): void {\n    if (!this.vitalityBar || !this.vitalityBarContainer) return\n\n    const oldVitality = this.vitalityBar.getData('currentVitality') || this.gameInstance.vitality\n    const newVitality = this.gameInstance.vitality\n    const vitalityPercentage = newVitality / this.gameInstance.maxVitality\n    const targetWidth = Math.max(0, this.vitalityBarMaxWidth * vitalityPercentage)\n    const newColor = this.getVitalityBarColor(vitalityPercentage)\n\n    // 数値カウントアップアニメーション\n    const counter = { value: oldVitality }\n    this.tweens.add({\n      targets: counter,\n      value: newVitality,\n      duration: 800,\n      ease: 'Cubic.out',\n      onUpdate: () => {\n        const vitalityText = this.children.getByName('vitality-text') as Phaser.GameObjects.Text\n        if (vitalityText) {\n          const stageLabel = this.getStageDisplayText()\n          vitalityText.setText(`活力: ${Math.floor(counter.value)} / ${this.gameInstance.maxVitality} (${stageLabel})`)\n        }\n      }\n    })\n\n    // バーのアニメーション（より滑らか）\n    this.tweens.add({\n      targets: this.vitalityBar,\n      width: targetWidth,\n      duration: 800,\n      ease: 'Cubic.out',\n      onUpdate: () => {\n        // 現在の割合に基づいて色を動的に更新\n        const currentPercentage = this.vitalityBar!.width / this.vitalityBarMaxWidth\n        const currentColor = this.getVitalityBarColor(currentPercentage)\n        this.vitalityBar?.setFillStyle(currentColor)\n      },\n      onComplete: () => {\n        // 最終的な色を設定\n        this.vitalityBar?.setFillStyle(newColor)\n      }\n    })\n\n    // バイタリティが減った場合のパルスエフェクト\n    if (newVitality < oldVitality) {\n      this.tweens.add({\n        targets: this.vitalityBarContainer,\n        scaleX: 1.05,\n        scaleY: 1.05,\n        duration: 150,\n        ease: 'Power2',\n        yoyo: true,\n        repeat: 1\n      })\n    }\n    \n    // バイタリティが増えた場合のグローエフェクト\n    if (newVitality > oldVitality) {\n      const glow = this.add.rectangle(0, 0, this.vitalityBarMaxWidth + 20, 30, 0x10B981, 0.5)\n      glow.setAlpha(0)\n      this.vitalityBarContainer.add(glow)\n      \n      this.tweens.add({\n        targets: glow,\n        alpha: 0.6,\n        duration: 200,\n        ease: 'Power2',\n        yoyo: true,\n        repeat: 1,\n        onComplete: () => glow.destroy()\n      })\n    }\n\n    // 現在値を保存\n    this.vitalityBar.setData('currentVitality', newVitality)\n  }\n\n  /**\n   * パワー表示を更新\n   */\n  private updatePowerDisplay(): void {\n    const powerDisplay = this.children.getByName('power-display') as Phaser.GameObjects.Container\n    if (!powerDisplay) return\n\n    // Phase 3-3: 詳細なパワー計算\n    const selectedCardsArray = this.handCards\n      .filter(cardContainer => this.selectedCards.has(cardContainer.getData('card').id))\n      .map(cardContainer => cardContainer.getData('card') as Card)\n    \n    const powerBreakdown = this.gameInstance.calculateTotalPower(selectedCardsArray)\n    \n    // 既存のテキストを削除\n    const textsToRemove = powerDisplay.list.filter(item => \n      item instanceof Phaser.GameObjects.Text && item.name !== 'power-text' && item.name !== 'count-text'\n    )\n    textsToRemove.forEach(text => text.destroy())\n    \n    const powerText = powerDisplay.getByName('power-text') as Phaser.GameObjects.Text\n    const countText = powerDisplay.getByName('count-text') as Phaser.GameObjects.Text\n    \n    if (powerText) {\n      powerText.setText(`合計パワー: ${powerBreakdown.total}`)\n      powerText.setColor(powerBreakdown.total > 0 ? '#00ff00' : '#ff4444')\n    }\n    if (countText) {\n      countText.setText(`選択カード: ${this.selectedCards.size}枚`)\n    }\n\n    // Phase 3-3: パワーの内訳を表示\n    let yOffset = 40\n    \n    // 基本パワー\n    if (powerBreakdown.base > 0) {\n      const baseText = this.add.text(\n        0, yOffset,\n        `基本: +${powerBreakdown.base}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#ffffff'\n        }\n      ).setOrigin(0.5)\n      powerDisplay.add(baseText)\n      yOffset += 20\n    }\n\n    // 保険ボーナス\n    if (powerBreakdown.insurance > 0) {\n      const insuranceText = this.add.text(\n        0, yOffset,\n        `保険: +${powerBreakdown.insurance}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#4ade80'\n        }\n      ).setOrigin(0.5)\n      powerDisplay.add(insuranceText)\n      yOffset += 20\n    }\n\n    // 保険料負担\n    if (powerBreakdown.burden < 0) {\n      const burdenText = this.add.text(\n        0, yOffset,\n        `負担: ${powerBreakdown.burden}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#ff4444',\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n      powerDisplay.add(burdenText)\n    }\n  }\n\n  /**\n   * ドロップゾーンを判定\n   */\n  private getDropZone(x: number, y: number): string | null {\n    // チャレンジエリアの判定\n    const challengeX = this.centerX\n    const challengeY = GAME_CONSTANTS.CHALLENGE_Y_POSITION\n    const distance = Phaser.Math.Distance.Between(x, y, challengeX, challengeY)\n    \n    if (distance < 100) {\n      return 'challenge'\n    }\n    \n    // 新しいDropZoneシステムで捕て札ゾーンは実装済み\n    \n    return null\n  }\n\n  /**\n   * 改良版ドロップゾーン判定 - 新しいドロップゾーンシステムに対応\n   */\n  private getDropZoneV2(x: number, y: number): string | null {\n    let closestZone: string | null = null\n    let minDistance = GAME_CONSTANTS.DRAG_DROP.SNAP_DISTANCE\n    \n    this.dropZones.forEach((zone, zoneName) => {\n      const distance = Phaser.Math.Distance.Between(x, y, zone.x, zone.y)\n      if (distance < minDistance) {\n        minDistance = distance\n        closestZone = zoneName\n      }\n    })\n    \n    return closestZone\n  }\n\n  /**\n   * 有効なドロップ処理\n   */\n  private handleValidDrop(zoneName: string, cardContainer: Phaser.GameObjects.Container): void {\n    const zone = this.dropZones.get(zoneName)\n    if (!zone) return\n    \n    // バウンス効果付きでドロップゾーンに移動\n    this.tweens.add({\n      targets: cardContainer,\n      x: zone.x,\n      y: zone.y,\n      scaleX: GAME_CONSTANTS.DRAG_DROP.DROP_ZONE_SCALE,\n      scaleY: GAME_CONSTANTS.DRAG_DROP.DROP_ZONE_SCALE,\n      duration: GAME_CONSTANTS.DRAG_DROP.BOUNCE_DURATION / 2,\n      ease: 'Back.out',\n      onComplete: () => {\n        // スケールを元に戻す\n        this.tweens.add({\n          targets: cardContainer,\n          scaleX: 1,\n          scaleY: 1,\n          duration: GAME_CONSTANTS.DRAG_DROP.BOUNCE_DURATION / 2,\n          ease: 'Elastic.out'\n        })\n      }\n    })\n    \n    // 成功エフェクト\n    this.showDropSuccessEffect(zone.x, zone.y)\n    \n    // ゾーン別の処理\n    switch (zoneName) {\n      case 'challenge':\n        this.handleCardDropToChallenge(cardContainer)\n        break\n      case 'discard':\n        this.handleCardDropToDiscard(cardContainer)\n        break\n      default:\n        console.warn(`Unknown drop zone: ${zoneName}`)\n    }\n  }\n\n  /**\n   * 無効なドロップ処理\n   */\n  private handleInvalidDrop(cardContainer: Phaser.GameObjects.Container): void {\n    // 振動効果\n    const originalX = cardContainer.getData('originalX')\n    const originalY = cardContainer.getData('originalY')\n    \n    // まず振動\n    this.tweens.add({\n      targets: cardContainer,\n      x: cardContainer.x + 10,\n      duration: GAME_CONSTANTS.DRAG_DROP.VIBRATION_DURATION / 6,\n      ease: 'Power2',\n      yoyo: true,\n      repeat: 5,\n      onComplete: () => {\n        // 振動後、元の位置に戻る\n        this.tweens.add({\n          targets: cardContainer,\n          x: originalX,\n          y: originalY,\n          duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\n          ease: 'Back.out'\n        })\n      }\n    })\n    \n    // 失敗エフェクト\n    this.showDropFailureEffect(cardContainer.x, cardContainer.y)\n  }\n\n  /**\n   * ドロップ成功エフェクト\n   */\n  private showDropSuccessEffect(x: number, y: number): void {\n    // 成功時のパーティクル効果（緑色の輝き）\n    const effect = this.add.graphics()\n    effect.setPosition(x, y)\n    effect.setDepth(1100)\n    \n    // 円形の輝きを描画\n    effect.fillStyle(GAME_CONSTANTS.COLORS.DROP_ZONE_VALID, 0.8)\n    effect.fillCircle(0, 0, 20)\n    \n    // 拡大しながらフェードアウト\n    this.tweens.add({\n      targets: effect,\n      scaleX: 3,\n      scaleY: 3,\n      alpha: 0,\n      duration: 500,\n      ease: 'Power2.out',\n      onComplete: () => {\n        effect.destroy()\n      }\n    })\n    \n    // 複数の小さな輝きを散らす\n    for (let i = 0; i < 6; i++) {\n      const spark = this.add.graphics()\n      spark.setPosition(x, y)\n      spark.setDepth(1100)\n      spark.fillStyle(GAME_CONSTANTS.COLORS.DROP_ZONE_VALID, 0.6)\n      spark.fillCircle(0, 0, 5)\n      \n      const angle = (i / 6) * Math.PI * 2\n      const distance = 50\n      \n      this.tweens.add({\n        targets: spark,\n        x: x + Math.cos(angle) * distance,\n        y: y + Math.sin(angle) * distance,\n        alpha: 0,\n        duration: 600,\n        ease: 'Power2.out',\n        onComplete: () => {\n          spark.destroy()\n        }\n      })\n    }\n  }\n\n  /**\n   * ドロップ失敗エフェクト\n   */\n  private showDropFailureEffect(x: number, y: number): void {\n    // 失敗時のX印エフェクト\n    const effect = this.add.graphics()\n    effect.setPosition(x, y)\n    effect.setDepth(1100)\n    \n    // X印を描画\n    effect.lineStyle(4, GAME_CONSTANTS.COLORS.DROP_ZONE_INVALID, 0.8)\n    effect.beginPath()\n    effect.moveTo(-15, -15)\n    effect.lineTo(15, 15)\n    effect.moveTo(15, -15)\n    effect.lineTo(-15, 15)\n    effect.strokePath()\n    \n    // 振動しながらフェードアウト\n    this.tweens.add({\n      targets: effect,\n      x: x + 5,\n      duration: 100,\n      ease: 'Power2',\n      yoyo: true,\n      repeat: 3,\n    })\n    \n    this.tweens.add({\n      targets: effect,\n      alpha: 0,\n      duration: 800,\n      ease: 'Power2.out',\n      onComplete: () => {\n        effect.destroy()\n      }\n    })\n  }\n\n  /**\n   * 捨て札エリアへのドロップ処理\n   */\n  private handleCardDropToDiscard(cardContainer: Phaser.GameObjects.Container): void {\n    const card = cardContainer.getData('card') as Card\n    \n    // カードを捨て札に移動\n    this.gameInstance.discardCard(card.id)\n    \n    // 手札からカードを削除\n    const cardIndex = this.handCards.indexOf(cardContainer)\n    if (cardIndex > -1) {\n      this.handCards.splice(cardIndex, 1)\n      cardContainer.destroy()\n    }\n    \n    // 手札を再配置\n    this.arrangeHand()\n    \n    // UI更新\n    this.updateUI()\n  }\n\n  /**\n   * カードをチャレンジエリアにドロップした時の処理\n   */\n  private handleCardDropToChallenge(cardContainer: Phaser.GameObjects.Container): void {\n    const card = cardContainer.getData('card') as Card\n    \n    // すでにチャレンジカードがある場合は戻す\n    if (this.gameInstance.currentChallenge) {\n      this.tweens.add({\n        targets: cardContainer,\n        x: cardContainer.getData('originalX'),\n        y: cardContainer.getData('originalY'),\n        duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\n        ease: 'Power2'\n      })\n      return\n    }\n    \n    // チャレンジエリアに配置\n    this.tweens.add({\n      targets: cardContainer,\n      x: this.centerX,\n      y: GAME_CONSTANTS.CHALLENGE_Y_POSITION,\n      duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\n      ease: 'Power2',\n      onComplete: () => {\n        // 手札から削除\n        const index = this.handCards.indexOf(cardContainer)\n        if (index !== -1) {\n          this.handCards.splice(index, 1)\n        }\n        \n        // チャレンジ開始\n        this.gameInstance.startChallenge(card)\n        \n        // 手札を再配置\n        this.arrangeHand()\n        \n        // チャレンジUI表示\n        this.showChallengeUI(card)\n      }\n    })\n  }\n\n  /**\n   * チャレンジUIを表示\n   */\n  private showChallengeUI(challengeCard: Card): void {\n    // チャレンジ情報を表示\n    const challengeInfo = this.add.container(this.centerX, GAME_CONSTANTS.CHALLENGE_Y_POSITION - 150)\n    \n    const bg = this.add.rectangle(0, 0, 300, 60, 0x000000, 0.8)\n    const text = this.add.text(\n      0,\n      0,\n      `チャレンジ: ${challengeCard.name}\\nパワー: ${challengeCard.power}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff',\n        align: 'center'\n      }\n    ).setOrigin(0.5)\n    \n    challengeInfo.add([bg, text])\n    challengeInfo.setName('challenge-info')\n    \n    // フェードイン\n    challengeInfo.setAlpha(0)\n    this.tweens.add({\n      targets: challengeInfo,\n      alpha: 1,\n      duration: 300\n    })\n  }\n\n  /**\n   * チャレンジカードを表示\n   */\n  private displayChallengeCard(challengeCard: Card): void {\n    const challengeContainer = this.add.container(\n      this.centerX,\n      GAME_CONSTANTS.CHALLENGE_Y_POSITION\n    )\n\n    // カード背景\n    const cardBg = this.add.image(0, 0, this.getCardTemplate('life'))\n    cardBg.setTint(0xFFD43B)\n\n    // カード名\n    const cardName = this.add.text(\n      0,\n      -60,\n      challengeCard.name,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#333333',\n        fontStyle: 'bold',\n        wordWrap: { width: 100 }\n      }\n    ).setOrigin(0.5)\n\n    // パワー表示\n    const powerText = this.add.text(\n      0,\n      20,\n      `${challengeCard.power}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '36px',\n        color: '#FF0000',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 説明文\n    const descText = this.add.text(\n      0,\n      60,\n      challengeCard.description,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '12px',\n        color: '#666666',\n        wordWrap: { width: 100 }\n      }\n    ).setOrigin(0.5)\n\n    challengeContainer.add([cardBg, cardName, powerText, descText])\n    challengeContainer.setName('challenge-card')\n    challengeContainer.setScale(0)\n    \n    // アニメーション\n    this.tweens.add({\n      targets: challengeContainer,\n      scale: 1.2,\n      duration: 500,\n      ease: 'Back.easeOut'\n    })\n  }\n\n  /**\n   * チャレンジUI更新\n   */\n  private updateChallengeUI(): void {\n    // 既存のチャレンジボタンを削除\n    const existingButton = this.children.getByName('resolve-challenge-button')\n    if (existingButton) {\n      existingButton.destroy()\n    }\n\n    // プレイヤーパワー表示\n    const powerDisplay = this.add.container(this.gameWidth - 150, 300)\n    powerDisplay.setName('power-display')\n\n    const bg = this.add.rectangle(0, 0, 200, 140, 0x000000, 0.8)\n    \n    const selectedPower = this.calculateSelectedPower()\n    const text = this.add.text(\n      0,\n      -50,\n      `選択パワー: ${selectedPower}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#00FF00'\n      }\n    )\n    text.setOrigin(0.5)\n    text.setName('power-text')\n\n    const subText = this.add.text(\n      0,\n      -20,\n      `選択カード: ${this.selectedCards.size}枚`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#ffffff'\n      }\n    )\n    subText.setOrigin(0.5)\n    subText.setName('count-text')\n\n    powerDisplay.add([bg, text, subText])\n\n    // 初回表示時にパワーの内訳を更新\n    this.updatePowerDisplay()\n\n    // チャレンジ解決ボタン\n    const resolveButton = this.createButton(\n      this.gameWidth - 150,\n      400,\n      'チャレンジに挑む',\n      () => this.resolveChallenge(),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    )\n    resolveButton.setName('resolve-challenge-button')\n  }\n\n  /**\n   * 選択したカードの合計パワーを計算\n   */\n  private calculateSelectedPower(): number {\n    let totalPower = 0\n    this.handCards.forEach(cardContainer => {\n      const card = cardContainer.getData('card') as Card\n      if (this.selectedCards.has(card.id)) {\n        totalPower += card.power\n      }\n    })\n    return totalPower\n  }\n\n  /**\n   * チャレンジを解決\n   */\n  private resolveChallenge(): void {\n    if (!this.gameInstance.currentChallenge) {\n      return\n    }\n\n    // 選択したカードをゲームインスタンスに設定\n    this.gameInstance.selectedCards = []\n    this.handCards.forEach(cardContainer => {\n      const card = cardContainer.getData('card') as Card\n      if (this.selectedCards.has(card.id)) {\n        this.gameInstance.selectedCards.push(card)\n      }\n    })\n\n    // チャレンジ解決\n    const result = this.gameInstance.resolveChallenge()\n    \n    // チュートリアル用にゲーム状態を更新\n    const gameState = (window as Window & { __gameState?: Record<string, unknown> }).__gameState || {}\n    gameState.lastChallengeResult = result\n    this.updateGameStateForTutorial()\n    \n    // 結果表示\n    this.showChallengeResult(result)\n    \n    // カード選択フェーズかチェック\n    if (result.success && result.cardChoices) {\n      // Phase 2: 保険種別選択UIを先に表示\n      this.time.delayedCall(2000, () => {\n        this.showInsuranceTypeSelection()\n      })\n    } else {\n      // 失敗時または選択肢がない場合は、UIをクリーンアップして通常フローに戻す\n      this.time.delayedCall(2000, () => {\n        this.cleanupChallengeUI()\n        this.updateActionButtons()\n      })\n    }\n    \n    // 使用したカードを削除\n    this.handCards = this.handCards.filter(cardContainer => {\n      const card = cardContainer.getData('card') as Card\n      if (this.selectedCards.has(card.id)) {\n        cardContainer.destroy()\n        return false\n      }\n      return true\n    })\n    \n    // 選択をクリア\n    this.selectedCards.clear()\n    \n    // チャレンジカードを削除\n    const challengeCard = this.children.getByName('challenge-card')\n    if (challengeCard) {\n      this.tweens.add({\n        targets: challengeCard,\n        scale: 0,\n        duration: 300,\n        onComplete: () => challengeCard.destroy()\n      })\n    }\n\n    // UI更新\n    this.updateUI()\n    this.arrangeHand()\n  }\n\n  /**\n   * チャレンジ結果を表示\n   */\n  private showChallengeResult(result: ChallengeResult): void {\n    const resultContainer = this.add.container(this.centerX, this.centerY)\n    \n    const bg = this.add.rectangle(0, 0, 500, 300, 0x000000, 0.9)\n    \n    const titleText = this.add.text(\n      0,\n      -100,\n      result.success ? 'チャレンジ成功！' : 'チャレンジ失敗...',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '28px',\n        color: result.success ? '#00FF00' : '#FF0000',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    \n    // Phase 3-3: パワー計算の内訳を表示\n    let detailContent = `チャレンジパワー: ${result.challengePower}\\n\\n`\n    \n    if (result.powerBreakdown) {\n      detailContent += 'あなたのパワー内訳:\\n'\n      if (result.powerBreakdown.base > 0) {\n        detailContent += `  基本パワー: +${result.powerBreakdown.base}\\n`\n      }\n      if (result.powerBreakdown.insurance > 0) {\n        detailContent += `  保険ボーナス: +${result.powerBreakdown.insurance}\\n`\n      }\n      if (result.powerBreakdown.burden < 0) {\n        detailContent += `  保険料負担: ${result.powerBreakdown.burden}\\n`\n      }\n      detailContent += `  合計: ${result.powerBreakdown.total}\\n\\n`\n    } else {\n      detailContent += `あなたのパワー: ${result.playerPower}\\n\\n`\n    }\n    \n    detailContent += `活力変化: ${result.vitalityChange > 0 ? '+' : ''}${result.vitalityChange}`\n    \n    const detailText = this.add.text(\n      0,\n      -20,\n      detailContent,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#ffffff',\n        align: 'center',\n        lineSpacing: 5\n      }\n    ).setOrigin(0.5)\n\n    // Phase 3-3: 保険料負担が勝敗に影響した場合の特別メッセージ\n    if (!result.success && result.powerBreakdown && result.powerBreakdown.burden < 0) {\n      const withoutBurden = result.powerBreakdown.base + result.powerBreakdown.insurance\n      if (withoutBurden >= result.challengePower) {\n        const burdenImpactText = this.add.text(\n          0,\n          90,\n          '⚠ 保険料負担により敗北しました',\n          {\n            fontFamily: 'Noto Sans JP',\n            fontSize: '14px',\n            color: '#ff9999',\n            fontStyle: 'bold'\n          }\n        ).setOrigin(0.5)\n        resultContainer.add(burdenImpactText)\n      }\n    }\n    \n    const closeButton = this.createButton(\n      0,\n      120,\n      '閉じる',\n      () => {\n        this.tweens.add({\n          targets: resultContainer,\n          scale: 0,\n          duration: 300,\n          onComplete: () => resultContainer.destroy()\n        })\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#ffffff'\n      }\n    )\n    \n    resultContainer.add([bg, titleText, detailText, closeButton])\n    resultContainer.setScale(0)\n    \n    // アニメーション\n    this.tweens.add({\n      targets: resultContainer,\n      scale: 1,\n      duration: 500,\n      ease: 'Back.easeOut'\n    })\n  }\n\n  /**\n   * ステージ表示テキストを取得\n   */\n  private getStageDisplayText(): string {\n    const currentStage = this.gameInstance.stage\n    const stageName = AGE_PARAMETERS[currentStage].label\n    \n    const turnsInStage = this.getTurnsInCurrentStage()\n    const maxTurns = GAME_CONSTANTS.STAGE_TURNS[currentStage]\n    \n    return `${stageName} (${turnsInStage}/${maxTurns})`\n  }\n\n  /**\n   * 現在のステージでのターン数を取得\n   */\n  private getTurnsInCurrentStage(): number {\n    const turn = this.gameInstance.turn\n    \n    if (this.gameInstance.stage === 'youth') {\n      return turn\n    } else if (this.gameInstance.stage === 'middle') {\n      return turn - GAME_CONSTANTS.STAGE_TURNS.youth\n    } else {\n      return turn - GAME_CONSTANTS.STAGE_TURNS.youth - GAME_CONSTANTS.STAGE_TURNS.middle\n    }\n  }\n\n  /**\n   * ステージ進行をチェック\n   */\n  private checkStageProgress(): void {\n    const turn = this.gameInstance.turn\n    const stage = this.gameInstance.stage\n    \n    if (stage === 'youth' && turn >= GAME_CONSTANTS.STAGE_TURNS.youth) {\n      const previousMaxVitality = this.gameInstance.maxVitality\n      this.gameInstance.advanceStage()\n      this.showStageTransition('中年期', previousMaxVitality, this.gameInstance.maxVitality)\n      this.updateChallengeDeck()\n    } else if (stage === 'middle' && \n               turn >= GAME_CONSTANTS.STAGE_TURNS.youth + GAME_CONSTANTS.STAGE_TURNS.middle) {\n      const previousMaxVitality = this.gameInstance.maxVitality\n      this.gameInstance.advanceStage()\n      this.showStageTransition('充実期', previousMaxVitality, this.gameInstance.maxVitality)\n      this.updateChallengeDeck()\n    }\n  }\n\n  /**\n   * チャレンジデッキを更新\n   */\n  private updateChallengeDeck(): void {\n    // 古いチャレンジカードをクリア\n    this.gameInstance.challengeDeck.clear()\n    \n    // 新しいステージのチャレンジカードを追加\n    const newChallenges = CardFactory.createChallengeCards(this.gameInstance.stage)\n    this.gameInstance.challengeDeck.addCards(newChallenges)\n    this.gameInstance.challengeDeck.shuffle()\n  }\n\n  /**\n   * ステージ遷移演出を表示\n   */\n  private showStageTransition(stageName: string, previousMaxVitality: number, newMaxVitality: number): void {\n    const transitionContainer = this.add.container(this.centerX, this.centerY)\n    \n    const bg = this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x000000, 0.8)\n    \n    const text = this.add.text(\n      0,\n      -80,\n      `${stageName}へ突入！`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    \n    // 体力減少メッセージ\n    const vitalityChangeText = this.add.text(\n      0,\n      -20,\n      `体力が衰えました (最大値: ${previousMaxVitality} → ${newMaxVitality})`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ff9999'\n      }\n    ).setOrigin(0.5)\n    \n    // Phase 5-1: 保険見直し推奨メッセージ\n    const reviewRecommendation = this.getInsuranceReviewRecommendation(stageName)\n    const reviewText = this.add.text(\n      0,\n      40,\n      reviewRecommendation,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#00ff00',\n        align: 'center'\n      }\n    ).setOrigin(0.5)\n\n    // Phase 5-1: 保険見直しボタン\n    const reviewButton = this.createButton(\n      0,\n      100,\n      '保険を見直す',\n      () => {\n        this.showInsuranceReviewDialog()\n        transitionContainer.destroy()\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    )\n\n    const skipButton = this.createButton(\n      0,\n      150,\n      'あとで見直す',\n      () => {\n        this.tweens.add({\n          targets: transitionContainer,\n          alpha: 0,\n          duration: 500,\n          onComplete: () => transitionContainer.destroy()\n        })\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#cccccc'\n      }\n    )\n    \n    transitionContainer.add([bg, text, vitalityChangeText, reviewText, reviewButton, skipButton])\n    transitionContainer.setAlpha(0)\n    \n    // フェードインと同時にテキストアニメーション\n    this.tweens.add({\n      targets: transitionContainer,\n      alpha: 1,\n      duration: 500\n    })\n    \n    // タイトルテキストにスケールアニメーション\n    text.setScale(0)\n    this.tweens.add({\n      targets: text,\n      scale: 1,\n      duration: 800,\n      delay: 200,\n      ease: 'Back.easeOut'\n    })\n    \n    // 活力変化テキストにフェードイン\n    vitalityChangeText.setAlpha(0)\n    this.tweens.add({\n      targets: vitalityChangeText,\n      alpha: 1,\n      duration: 600,\n      delay: 500\n    })\n    \n    // パーティクルエフェクト（星とか光の粒子）\n    for (let i = 0; i < 20; i++) {\n      const particle = this.add.circle(\n        Phaser.Math.Between(-200, 200),\n        Phaser.Math.Between(-150, 150),\n        Phaser.Math.Between(2, 6),\n        0xFFD700,\n        0.8\n      )\n      transitionContainer.add(particle)\n      \n      // パーティクルのアニメーション\n      this.tweens.add({\n        targets: particle,\n        alpha: 0,\n        scale: 1.5,\n        duration: 2000,\n        delay: Phaser.Math.Between(0, 1000),\n        ease: 'Power2'\n      })\n    }\n    \n    // ステージ表示を更新\n    const stageText = this.children.getByName('stage-text') as Phaser.GameObjects.Text\n    if (stageText) {\n      stageText.setText(this.getStageDisplayText())\n    }\n    \n    // 人生段階インジケーターを更新\n    this.updateLifeStageIndicator()\n    \n    // 活力バーの最大値変更をアニメーション\n    this.animateMaxVitalityChange()\n  }\n\n  /**\n   * Phase 5-1: 保険見直し推奨メッセージを取得\n   */\n  private getInsuranceReviewRecommendation(stageName: string): string {\n    if (stageName === '中年期') {\n      return '📌 保険見直しの機会\\n定期保険から終身保険への変更を検討しましょう'\n    } else if (stageName === '充実期') {\n      return '📌 総合的な保険見直し\\n終身保険の価値が大幅に上昇します！'\n    }\n    return ''\n  }\n\n  /**\n   * Phase 5-1: 保険見直しダイアログを表示\n   */\n  private showInsuranceReviewDialog(): void {\n    // 保険見直し機能は将来のリリースで実装予定\n    this.showNotification('保険見直し機能は開発中です', 'info')\n  }\n\n  /**\n   * Phase 5-1: 期限切れ間近の保険をチェック\n   * DISABLED: 保険更新システムが削除されたため無効化\n   */\n  private checkExpiringInsurances(): void {\n    // 保険更新システムが削除されたため、この機能は無効化\n    return\n  }\n\n  /**\n   * Phase 5-1: 期限切れ間近の保険警告を表示\n   */\n  private showExpiringInsuranceWarning(insurance: Card): void {\n    const warningContainer = this.add.container(this.centerX, 300)\n    warningContainer.setDepth(2000)\n\n    const bg = this.add.rectangle(0, 0, 400, 120, 0xff4444, 0.95)\n    bg.setStrokeStyle(3, 0xffffff)\n\n    const iconText = this.add.text(\n      -170, 0,\n      '⚠',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    const messageText = this.add.text(\n      20, -20,\n      `${insurance.name}が\\nあと${insurance.remainingTurns}ターンで期限切れです！`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    const actionText = this.add.text(\n      20, 20,\n      '更新または終身保険への切り替えを検討しましょう',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#ffcccc'\n      }\n    ).setOrigin(0.5)\n\n    warningContainer.add([bg, iconText, messageText, actionText])\n    warningContainer.setScale(0)\n    warningContainer.setAlpha(0)\n\n    // 警告アニメーション\n    this.tweens.add({\n      targets: warningContainer,\n      scale: 1.1,\n      alpha: 1,\n      duration: 300,\n      ease: 'Back.easeOut',\n      onComplete: () => {\n        // パルスエフェクト\n        this.tweens.add({\n          targets: warningContainer,\n          scale: 1,\n          duration: 800,\n          yoyo: true,\n          repeat: 2,\n          ease: 'Sine.easeInOut'\n        })\n\n        // 自動で消える\n        this.time.delayedCall(5000, () => {\n          this.tweens.add({\n            targets: warningContainer,\n            scale: 0.8,\n            alpha: 0,\n            duration: 500,\n            ease: 'Power2',\n            onComplete: () => warningContainer.destroy()\n          })\n        })\n      }\n    })\n  }\n\n  /**\n   * 保険期限切れ警告システム - 改良版\n   * getPendingRenewalInsurances()と連携し、残り1-2ターンの保険に対応\n   */\n  private showInsuranceExpirationWarning(renewal: InsuranceRenewalOption): void {\n    const remainingTurns = renewal.remainingTurns\n    // renewalOptionから保険情報を取得（cardNameを使用）\n    const insuranceName = renewal.cardName\n    \n    // 警告レベルに応じた色とメッセージを決定\n    let warningColor = 0xFFA500  // デフォルト：オレンジ（警告）\n    let iconEmoji = '⚠'\n    let urgencyText = ''\n    \n    if (remainingTurns === 1) {\n      warningColor = 0xFF4444  // 赤色（危険）\n      iconEmoji = '🚨'\n      urgencyText = '緊急！'\n    } else if (remainingTurns === 2) {\n      warningColor = 0xFFA500  // オレンジ色（警告）\n      iconEmoji = '⚠'\n      urgencyText = '警告：'\n    }\n\n    const warningContainer = this.add.container(this.centerX, 350)\n    warningContainer.setDepth(2000)\n\n    const bg = this.add.rectangle(0, 0, 450, 130, warningColor, 0.95)\n    bg.setStrokeStyle(3, 0xffffff)\n\n    const iconText = this.add.text(\n      -190, 0,\n      iconEmoji,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    const messageText = this.add.text(\n      20, -25,\n      `${urgencyText} ${insuranceName}が\\n残り${remainingTurns}ターンで期限切れです`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff',\n        fontStyle: 'bold',\n        align: 'center'\n      }\n    ).setOrigin(0.5)\n\n    const actionText = this.add.text(\n      20, 25,\n      '更新手続きまたは終身保険への切り替えをご検討ください',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#ffcccc'\n      }\n    ).setOrigin(0.5)\n\n    warningContainer.add([bg, iconText, messageText, actionText])\n    warningContainer.setScale(0)\n    warningContainer.setAlpha(0)\n\n    // 警告アニメーション（緊急度に応じた速度）\n    const animationDuration = remainingTurns === 1 ? 200 : 300\n    this.tweens.add({\n      targets: warningContainer,\n      scale: 1.1,\n      alpha: 1,\n      duration: animationDuration,\n      ease: 'Back.easeOut',\n      onComplete: () => {\n        // パルスエフェクト（緊急度に応じた回数）\n        const pulseRepeats = remainingTurns === 1 ? 4 : 2\n        this.tweens.add({\n          targets: warningContainer,\n          scale: 1,\n          duration: remainingTurns === 1 ? 400 : 600,\n          yoyo: true,\n          repeat: pulseRepeats,\n          ease: 'Sine.easeInOut'\n        })\n\n        // 自動で消える（緊急度に応じた表示時間）\n        const displayTime = remainingTurns === 1 ? 7000 : 5000\n        this.time.delayedCall(displayTime, () => {\n          this.tweens.add({\n            targets: warningContainer,\n            scale: 0.8,\n            alpha: 0,\n            duration: 500,\n            ease: 'Power2',\n            onComplete: () => warningContainer.destroy()\n          })\n        })\n      }\n    })\n  }\n\n  /**\n   * 最大活力変更時のアニメーション\n   */\n  private animateMaxVitalityChange(): void {\n    if (!this.vitalityBarContainer) return\n\n    // 最大値マーカーを点滅させる\n    const maxMarker = this.vitalityBarContainer.list[2] as Phaser.GameObjects.Rectangle\n    if (maxMarker) {\n      this.tweens.add({\n        targets: maxMarker,\n        alpha: 0.3,\n        duration: 300,\n        yoyo: true,\n        repeat: 3,\n        ease: 'Power2'\n      })\n    }\n\n    // 活力バーコンテナを揺らす\n    this.tweens.add({\n      targets: this.vitalityBarContainer,\n      y: this.vitalityBarContainer.y - 5,\n      duration: 100,\n      yoyo: true,\n      repeat: 2,\n      ease: 'Power2'\n    })\n\n    // UI を更新\n    this.updateUI()\n  }\n\n  /**\n   * ゲーム終了をチェック\n   */\n  private checkGameEnd(): void {\n    if (this.gameInstance.isCompleted()) {\n      if (this.gameInstance.status === 'victory') {\n        this.showGameEnd(true)\n      } else if (this.gameInstance.status === 'game_over') {\n        this.showGameEnd(false)\n      }\n    } else if (this.gameInstance.stage === 'fulfillment' && \n               this.gameInstance.vitality >= GAME_CONSTANTS.VICTORY_VITALITY) {\n      // 充実期で活力が一定以上なら勝利\n      this.gameInstance.status = 'victory'\n      this.showGameEnd(true)\n    }\n  }\n\n  /**\n   * 保険種別選択UIを表示（Phase 2）\n   */\n  private showInsuranceTypeSelection(): void {\n    // 既存の保険種別選択UIがあれば削除\n    if (this.insuranceTypeSelectionUI) {\n      this.insuranceTypeSelectionUI.destroy()\n    }\n\n    // 保険種別選択コンテナを作成\n    this.insuranceTypeSelectionUI = this.add.container(this.centerX, this.centerY)\n    this.insuranceTypeSelectionUI.setDepth(2000)\n\n    // 背景オーバーレイ\n    const overlay = this.add.rectangle(\n      0, 0,\n      this.gameWidth, this.gameHeight,\n      0x000000, 0.8\n    )\n    overlay.setOrigin(0.5)\n\n    // タイトル\n    const titleText = this.add.text(\n      0, -200,\n      '保険種別を選択してください',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '36px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 年齢に応じた推奨テキスト\n    const recommendationText = this.getInsuranceRecommendation()\n    const recommendText = this.add.text(\n      0, -140,\n      recommendationText,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#00ff00'\n      }\n    ).setOrigin(0.5)\n\n    this.insuranceTypeSelectionUI.add([overlay, titleText, recommendText])\n\n    // 終身保険選択ボタン\n    this.createInsuranceTypeButton(\n      -180, 0,\n      '終身保険',\n      '一生涯の保障\\n高コスト・高効果',\n      0xFFD700, // 金色\n      'whole_life'\n    )\n\n    // 定期保険選択ボタン\n    this.createInsuranceTypeButton(\n      180, 0,\n      '定期保険',\n      '10ターンの保障\\n低コスト・標準効果',\n      0xC0C0C0, // 銀色\n      'term'\n    )\n\n    // ボタンのスタガーアニメーション設定\n    const buttons = this.insuranceTypeSelectionUI.list.filter(child => \n      child instanceof Phaser.GameObjects.Container && child !== overlay\n    )\n    \n    buttons.forEach((button) => {\n      if (button instanceof Phaser.GameObjects.Container) {\n        button.setScale(0)\n        button.setAlpha(0)\n      }\n    })\n\n    // フェードイン\n    this.insuranceTypeSelectionUI.setAlpha(0)\n    this.tweens.add({\n      targets: this.insuranceTypeSelectionUI,\n      alpha: 1,\n      duration: 500,\n      ease: 'Power2',\n      onComplete: () => {\n        // ボタンを順番に表示\n        buttons.forEach((button, index) => {\n          if (button instanceof Phaser.GameObjects.Container) {\n            this.time.delayedCall(index * 200, () => {\n              this.tweens.add({\n                targets: button,\n                scale: 1,\n                alpha: 1,\n                duration: 500,\n                ease: 'Back.easeOut'\n              })\n            })\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * 保険種別選択ボタンを作成\n   */\n  private createInsuranceTypeButton(\n    x: number,\n    y: number,\n    title: string,\n    description: string,\n    color: number,\n    insuranceType: 'whole_life' | 'term'\n  ): void {\n    if (!this.insuranceTypeSelectionUI) return\n\n    const buttonContainer = this.add.container(x, y)\n\n    // カード風の背景\n    const cardBg = this.add.rectangle(0, 0, 300, 400, 0x2C3E50)\n    cardBg.setStrokeStyle(4, color)\n    cardBg.setInteractive()\n    \n    // 光彩エフェクト（終身保険のみ）\n    if (insuranceType === 'whole_life') {\n      const glow = this.add.rectangle(0, 0, 310, 410, color, 0.2)\n      glow.setAlpha(0.5)\n      buttonContainer.addAt(glow, 0)\n      \n      // パルスエフェクト\n      this.tweens.add({\n        targets: glow,\n        alpha: 0.2,\n        scale: 1.05,\n        duration: 2000,\n        yoyo: true,\n        repeat: -1,\n        ease: 'Sine.easeInOut'\n      })\n    }\n\n    // タイトル背景\n    const titleBg = this.add.rectangle(0, -150, 280, 60, color)\n\n    // タイトルテキスト\n    const titleText = this.add.text(\n      0, -150,\n      title,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '28px',\n        color: '#000000',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 説明テキスト\n    const descText = this.add.text(\n      0, -50,\n      description,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff',\n        align: 'center',\n        lineSpacing: 10\n      }\n    ).setOrigin(0.5)\n\n    // 特徴アイコンと説明\n    const features = insuranceType === 'whole_life' \n      ? ['永続的な保障', 'パワー +2', 'コスト +2']\n      : ['期間限定保障', '標準パワー', '標準コスト']\n\n    features.forEach((feature, index) => {\n      const featureText = this.add.text(\n        0, 50 + index * 30,\n        `• ${feature}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '16px',\n          color: '#cccccc'\n        }\n      ).setOrigin(0.5)\n      buttonContainer.add(featureText)\n    })\n\n    // Phase 5-1: 詳細な推奨理由を追加\n    const detailBg = this.add.rectangle(0, 280, 280, 80, 0x000000, 0.5)\n    detailBg.setStrokeStyle(1, 0x666666)\n    \n    const detailText = this.add.text(\n      0, 280,\n      this.getDetailedInsuranceRecommendation(insuranceType),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '12px',\n        color: '#aaaaaa',\n        align: 'center',\n        lineSpacing: 5,\n        wordWrap: { width: 260 }\n      }\n    ).setOrigin(0.5)\n    \n    buttonContainer.add([detailBg, detailText])\n\n    // 選択ボタン\n    const selectButton = this.createButton(\n      0, 160,\n      '選択する',\n      () => this.onInsuranceTypeSelected(insuranceType),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    )\n\n    // ホバー効果\n    cardBg.on('pointerover', () => {\n      buttonContainer.setScale(1.05)\n      cardBg.setFillStyle(0x34495E)\n      this.tweens.add({\n        targets: buttonContainer,\n        y: y - 10,\n        duration: 200,\n        ease: 'Power2'\n      })\n    })\n\n    cardBg.on('pointerout', () => {\n      buttonContainer.setScale(1)\n      cardBg.setFillStyle(0x2C3E50)\n      this.tweens.add({\n        targets: buttonContainer,\n        y: y,\n        duration: 200,\n        ease: 'Power2'\n      })\n    })\n\n    // クリックで選択\n    cardBg.on('pointerdown', () => {\n      this.onInsuranceTypeSelected(insuranceType)\n    })\n\n    buttonContainer.add([cardBg, titleBg, titleText, descText, selectButton])\n    this.insuranceTypeSelectionUI.add(buttonContainer)\n  }\n\n  /**\n   * 年齢に応じた保険推奨を取得\n   */\n  private getInsuranceRecommendation(): string {\n    const stage = this.gameInstance.stage\n    \n    switch (stage) {\n      case 'youth':\n        return '💡 青年期は定期保険がおすすめ - コストを抑えて活力に投資'\n      case 'middle':\n        return '💡 中年期は終身保険も検討 - 将来への備えを強化'\n      case 'fulfillment':\n        return '💡 充実期は終身保険が有利 - 年齢ボーナスで効果最大化'\n      default:\n        return '保険種別を選んでください'\n    }\n  }\n\n  /**\n   * 年齢に応じた詳細な保険推奨理由を取得\n   */\n  private getDetailedInsuranceRecommendation(insuranceType: 'whole_life' | 'term'): string {\n    const stage = this.gameInstance.stage\n    \n    if (insuranceType === 'whole_life') {\n      switch (stage) {\n        case 'youth':\n          return '終身保険は高コストですが、結婚や学資など\\n人生の基盤となる保障には適しています。\\n長期的な視点で選択しましょう。'\n        case 'middle':\n          return '中年期の終身保険は+0.5ボーナス付き。\\n残りの人生を考えると、今が終身保険への\\n切り替えを検討する良いタイミングです。'\n        case 'fulfillment':\n          return '充実期の終身保険は+1.0ボーナス！\\n年齢による価値上昇を最大限活用できます。\\n安定した老後の基盤作りに最適です。'\n        default:\n          return '永続的な保障を提供します。'\n      }\n    } else {\n      switch (stage) {\n        case 'youth':\n          return '定期保険は低コストで効率的な選択です。\\n若い時期は変化も多いため、柔軟に\\n見直せる定期保険が有利です。'\n        case 'middle':\n          return '定期保険は期限があるため要注意。\\n10ターン後の更新時にはコストが上がります。\\n長期的な保障は終身への切り替えも検討を。'\n        case 'fulfillment':\n          return '充実期では終身保険のボーナスが大きいため、\\n定期保険の相対的価値は下がります。\\n一時的な保障のみに使用を推奨します。'\n        default:\n          return '10ターンの期間限定保障です。'\n      }\n    }\n  }\n\n  /**\n   * Phase 5-1: 年齢による難易度調整の表示を取得\n   */\n  private getAgeAdjustmentDisplay(challengeCard: Card): Phaser.GameObjects.Container | null {\n    // challengeCategoryが定義されていない場合は何も表示しない\n    if (!challengeCard.challengeCategory) return null\n\n    const stage = this.gameInstance.stage\n    let adjustment = 0\n    let color = 0xffffff\n    let icon = ''\n\n    // カテゴリに応じて調整値を計算\n    if (challengeCard.challengeCategory === 'physical') {\n      // 体力系: 年齢とともに難しくなる\n      if (stage === 'middle') {\n        adjustment = 3\n        color = 0xff9999\n        icon = '↑'\n      } else if (stage === 'fulfillment') {\n        adjustment = 6\n        color = 0xff4444\n        icon = '↑↑'\n      }\n    } else if (challengeCard.challengeCategory === 'knowledge') {\n      // 知識系: 年齢とともに簡単になる\n      if (stage === 'middle') {\n        adjustment = -2\n        color = 0x99ff99\n        icon = '↓'\n      } else if (stage === 'fulfillment') {\n        adjustment = -4\n        color = 0x44ff44\n        icon = '↓↓'\n      }\n    }\n\n    if (adjustment === 0) return null\n\n    const container = this.add.container(60, 20)\n\n    // 背景\n    const bg = this.add.rectangle(0, 0, 40, 25, color, 0.3)\n    bg.setStrokeStyle(1, color)\n\n    // アイコンと数値\n    const text = this.add.text(\n      0, 0,\n      `${icon}${Math.abs(adjustment)}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: `#${color.toString(16).padStart(6, '0')}`,\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    container.add([bg, text])\n    return container\n  }\n\n  /**\n   * Phase 5-1: 難易度ツールチップを追加\n   */\n  private addDifficultyTooltip(challengeContainer: Phaser.GameObjects.Container, challengeCard: Card): void {\n    const cardBg = challengeContainer.list[0] as Phaser.GameObjects.Image\n    if (!cardBg) return\n\n    let tooltipText = ''\n    const stage = this.gameInstance.stage\n\n    if (challengeCard.challengeCategory === 'physical') {\n      tooltipText = '体力系チャレンジ\\n'\n      if (stage === 'middle') {\n        tooltipText += '中年期: 必要パワー+3\\n体力の衰えにより難易度上昇'\n      } else if (stage === 'fulfillment') {\n        tooltipText += '充実期: 必要パワー+6\\n大幅な体力低下により高難度'\n      } else {\n        tooltipText += '青年期: 標準難易度\\n体力が充実している時期'\n      }\n    } else if (challengeCard.challengeCategory === 'knowledge') {\n      tooltipText = '知識系チャレンジ\\n'\n      if (stage === 'middle') {\n        tooltipText += '中年期: 必要パワー-2\\n経験の蓄積により容易化'\n      } else if (stage === 'fulfillment') {\n        tooltipText += '充実期: 必要パワー-4\\n豊富な知識で大幅に容易化'\n      } else {\n        tooltipText += '青年期: 標準難易度\\n経験はまだ浅い時期'\n      }\n    } else if (challengeCard.challengeCategory === 'balanced') {\n      tooltipText = '複合系チャレンジ\\n年齢による難易度変化なし\\n体力と知識のバランスが重要'\n    }\n\n    if (!tooltipText) return\n\n    // ツールチップコンテナ（初期は非表示）\n    const tooltipContainer = this.add.container(0, -120)\n    tooltipContainer.setVisible(false)\n    tooltipContainer.setDepth(1000)\n\n    const bg = this.add.rectangle(0, 0, 250, 80, 0x000000, 0.9)\n    bg.setStrokeStyle(2, 0xffffff)\n\n    const text = this.add.text(\n      0, 0,\n      tooltipText,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '12px',\n        color: '#ffffff',\n        align: 'center',\n        lineSpacing: 5\n      }\n    ).setOrigin(0.5)\n\n    tooltipContainer.add([bg, text])\n    challengeContainer.add(tooltipContainer)\n\n    // ホバーでツールチップ表示\n    cardBg.setInteractive()\n    cardBg.on('pointerover', () => {\n      tooltipContainer.setVisible(true)\n      this.tweens.add({\n        targets: tooltipContainer,\n        alpha: 1,\n        duration: 200\n      })\n    })\n\n    cardBg.on('pointerout', () => {\n      this.tweens.add({\n        targets: tooltipContainer,\n        alpha: 0,\n        duration: 200,\n        onComplete: () => tooltipContainer.setVisible(false)\n      })\n    })\n  }\n\n  /**\n   * 保険種別選択時の処理\n   */\n  private onInsuranceTypeSelected(insuranceType: 'whole_life' | 'term'): void {\n    if (!this.insuranceTypeSelectionUI) return\n\n    this.selectedInsuranceType = insuranceType\n\n    // 選択アニメーション\n    const selectedTypeText = insuranceType === 'whole_life' ? '終身保険' : '定期保険'\n    const confirmText = this.add.text(\n      0, 250,\n      `${selectedTypeText}を選択しました`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#00ff00',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    confirmText.setAlpha(0)\n    this.insuranceTypeSelectionUI.add(confirmText)\n    \n    // 選択エフェクト\n    this.tweens.add({\n      targets: confirmText,\n      alpha: 1,\n      scale: 1.2,\n      duration: 300,\n      yoyo: true,\n      ease: 'Power2'\n    })\n\n    // 選択後、カード選択画面へ遷移\n    this.time.delayedCall(1000, () => {\n      this.hideInsuranceTypeSelection(() => {\n        // 選択した保険種別に基づいてカードを生成\n        const cardChoices = this.generateInsuranceCards(insuranceType)\n        this.showCardSelection(cardChoices)\n      })\n    })\n  }\n\n  /**\n   * 保険種別選択UIを隠す\n   */\n  private hideInsuranceTypeSelection(onComplete?: () => void): void {\n    if (!this.insuranceTypeSelectionUI) return\n\n    this.tweens.add({\n      targets: this.insuranceTypeSelectionUI,\n      alpha: 0,\n      scale: 0.8,\n      duration: 500,\n      ease: 'Power2',\n      onComplete: () => {\n        this.insuranceTypeSelectionUI?.destroy()\n        this.insuranceTypeSelectionUI = undefined\n        if (onComplete) onComplete()\n      }\n    })\n  }\n\n  /**\n   * 選択した保険種別に基づいてカードを生成\n   */\n  private generateInsuranceCards(insuranceType: 'whole_life' | 'term'): Card[] {\n    // CardFactoryから拡張保険カードを取得\n    const allInsuranceCards = CardFactory.createExtendedInsuranceCards(this.gameInstance.stage)\n    \n    // 選択した保険種別でフィルタリング\n    const filteredCards = allInsuranceCards.filter(card => \n      card.durationType === insuranceType\n    )\n    \n    // ランダムに3枚選択\n    const shuffled = [...filteredCards].sort(() => Math.random() - 0.5)\n    return shuffled.slice(0, 3)\n  }\n\n  /**\n   * カード選択UIを表示\n   */\n  private showCardSelection(cardChoices: Card[]): void {\n    // 既存のカード選択UIがあれば削除\n    if (this.cardSelectionUI) {\n      this.cardSelectionUI.destroy()\n    }\n\n    // カード選択コンテナを作成\n    this.cardSelectionUI = this.add.container(this.centerX, this.centerY)\n    this.cardSelectionUI.setDepth(2000)\n\n    // 背景オーバーレイ\n    const overlay = this.add.rectangle(\n      0, 0,\n      this.gameWidth, this.gameHeight,\n      0x000000, 0.8\n    )\n    overlay.setOrigin(0.5)\n\n    // タイトル\n    const titleText = this.add.text(\n      0, -200,\n      '保険カードを選択してください',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '32px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 説明文\n    const descText = this.add.text(\n      0, -150,\n      '1枚選んでデッキに追加されます',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#cccccc'\n      }\n    ).setOrigin(0.5)\n\n    this.cardSelectionUI.add([overlay, titleText, descText])\n\n    // カードを表示\n    cardChoices.forEach((card, index) => {\n      this.createSelectableCard(card, index)\n    })\n\n    // フェードイン\n    this.cardSelectionUI.setAlpha(0)\n    this.tweens.add({\n      targets: this.cardSelectionUI,\n      alpha: 1,\n      duration: 500,\n      ease: 'Power2'\n    })\n    \n    // アクションボタンを無効化\n    this.updateActionButtons()\n  }\n\n  /**\n   * 選択可能なカードを作成\n   */\n  private createSelectableCard(card: Card, index: number): void {\n    if (!this.cardSelectionUI) return\n\n    const cardSpacing = 220\n    const totalCards = 3 // 常に3枚のカード\n    const startX = -(totalCards - 1) * cardSpacing / 2\n    const cardX = startX + index * cardSpacing\n\n    const cardContainer = this.add.container(cardX, 0)\n    cardContainer.setScale(1.2) // 少し大きめに表示\n\n    // カード背景\n    const cardBg = this.add.image(0, 0, this.getCardTemplate(card.type))\n    cardBg.setInteractive()\n\n    // カード名\n    const cardName = this.add.text(\n      0, -80,\n      card.name,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#ffffff',\n        fontStyle: 'bold',\n        wordWrap: { width: 120 }\n      }\n    ).setOrigin(0.5)\n\n    // 説明文\n    const cardDesc = this.add.text(\n      0, -40,\n      card.description,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '12px',\n        color: '#cccccc',\n        wordWrap: { width: 120 },\n        align: 'center'\n      }\n    ).setOrigin(0.5)\n\n    // パワー表示\n    const powerText = this.add.text(\n      -40, 50,\n      `${card.power}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#333333',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // カバレッジ表示（保険カードの場合）\n    let coverageText: Phaser.GameObjects.Text | undefined\n    if (card.coverage) {\n      coverageText = this.add.text(\n        40, 50,\n        `保障:${card.coverage}`,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '14px',\n          color: '#0066cc',\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n    }\n\n    // Phase 2: 保険期間の表示\n    let durationText: Phaser.GameObjects.Text | undefined\n    if (card.durationType) {\n      const durationLabel = card.durationType === 'whole_life' ? '終身' : '10ターン'\n      durationText = this.add.text(\n        0, 80,\n        durationLabel,\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '16px',\n          color: card.durationType === 'whole_life' ? '#FFD700' : '#C0C0C0',\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n    }\n\n    // Phase 2: カード枠線の色を保険種別に応じて変更\n    if (card.durationType === 'whole_life') {\n      // 終身保険は金色の輝きとパーティクルエフェクト\n      const goldGlow = this.add.rectangle(0, 0, GAME_CONSTANTS.CARD_WIDTH + 10, GAME_CONSTANTS.CARD_HEIGHT + 10, 0xFFD700, 0.3)\n      goldGlow.setAlpha(0.6)\n      cardContainer.addAt(goldGlow, 0)\n      \n      this.tweens.add({\n        targets: goldGlow,\n        alpha: 0.2,\n        scale: 1.1,\n        duration: 1500,\n        yoyo: true,\n        repeat: -1,\n        ease: 'Sine.easeInOut'\n      })\n    } else if (card.durationType === 'term') {\n      // 定期保険は銀色のシンプルな枠\n      cardBg.setStrokeStyle(3, 0xC0C0C0)\n    }\n\n    // 選択ボタン\n    const selectButton = this.createButton(\n      0, 120,\n      '選択',\n      () => this.onCardSelected(card),\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    )\n\n    // ホバー効果\n    cardBg.on('pointerover', () => {\n      cardContainer.setScale(1.3)\n      this.tweens.add({\n        targets: cardContainer,\n        y: -20,\n        duration: 200,\n        ease: 'Power2'\n      })\n    })\n\n    cardBg.on('pointerout', () => {\n      cardContainer.setScale(1.2)\n      this.tweens.add({\n        targets: cardContainer,\n        y: 0,\n        duration: 200,\n        ease: 'Power2'\n      })\n    })\n\n    // クリックで選択\n    cardBg.on('pointerdown', () => {\n      this.onCardSelected(card)\n    })\n\n    const cardElements = [cardBg, cardName, cardDesc, powerText, selectButton]\n    if (coverageText) cardElements.push(coverageText)\n    if (durationText) cardElements.push(durationText)\n    \n    cardContainer.add(cardElements)\n    this.cardSelectionUI.add(cardContainer)\n  }\n\n  /**\n   * カード選択時の処理\n   */\n  private onCardSelected(card: Card): void {\n    if (!this.cardSelectionUI) return\n\n    // Phase 5-2: 保険料負担の境界警告\n    const activeInsurances = this.gameInstance.getActiveInsurances()\n    const currentCount = activeInsurances.length\n    const nextCount = currentCount + 1\n    \n    // 3枚目、6枚目、9枚目の時に警告\n    if (nextCount % 3 === 0) {\n      this.showInsuranceBurdenWarning(nextCount)\n    }\n\n    // 選択アニメーション\n    const selectedContainer = this.cardSelectionUI.list.find(child => {\n      return child instanceof Phaser.GameObjects.Container &&\n             child.list.some(element => \n               element instanceof Phaser.GameObjects.Image && \n               element.input?.enabled\n             )\n    }) as Phaser.GameObjects.Container\n\n    // 選択されたカードのアニメーション\n    if (selectedContainer) {\n      this.tweens.add({\n        targets: selectedContainer,\n        scaleX: 1.1,\n        scaleY: 1.1,\n        duration: 150,\n        yoyo: true,\n        ease: 'Power2'\n      })\n    }\n\n    // カードをゲームに追加（これにより phase が 'resolution' に変わる）\n    this.gameInstance.selectCard(card.id)\n\n    // カード獲得アニメーション\n    this.showCardAcquisitionAnimation(card, () => {\n      // アニメーション完了後にUIを閉じる\n      this.hideCardSelection()\n    })\n  }\n\n  /**\n   * Phase 5-2: 保険料負担の境界警告を表示\n   */\n  private showInsuranceBurdenWarning(insuranceCount: number): void {\n    const burdenAmount = Math.floor(insuranceCount / 3)\n    const warningContainer = this.add.container(this.centerX, 200)\n    warningContainer.setDepth(3500)\n\n    const bg = this.add.rectangle(0, 0, 450, 150, 0xff4444, 0.95)\n    bg.setStrokeStyle(3, 0xffffff)\n\n    // 警告アイコン\n    const iconText = this.add.text(\n      -180, 0,\n      '🚨',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    // 警告メッセージ\n    const titleText = this.add.text(\n      20, -30,\n      '保険料負担が発生します！',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    const detailText = this.add.text(\n      20, 10,\n      `保険${insuranceCount}枚目で負担が${burdenAmount}ポイントに増加します`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#ffcccc'\n      }\n    ).setOrigin(0.5)\n\n    const adviceText = this.add.text(\n      20, 40,\n      '本当に必要な保険か、もう一度考えましょう',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    warningContainer.add([bg, iconText, titleText, detailText, adviceText])\n    warningContainer.setScale(0)\n    warningContainer.setAlpha(0)\n\n    // 警告アニメーション\n    this.tweens.add({\n      targets: warningContainer,\n      scale: 1.2,\n      alpha: 1,\n      duration: 300,\n      ease: 'Back.easeOut',\n      onComplete: () => {\n        // 揺れアニメーション\n        this.tweens.add({\n          targets: warningContainer,\n          angle: -5,\n          duration: 100,\n          yoyo: true,\n          repeat: 3,\n          ease: 'Sine.easeInOut',\n          onComplete: () => {\n            // フェードアウト\n            this.time.delayedCall(3000, () => {\n              this.tweens.add({\n                targets: warningContainer,\n                scale: 0.8,\n                alpha: 0,\n                duration: 500,\n                ease: 'Power2',\n                onComplete: () => warningContainer.destroy()\n              })\n            })\n          }\n        })\n      }\n    })\n\n    // 画面全体を一瞬赤くフラッシュ\n    const flashOverlay = this.add.rectangle(\n      this.centerX,\n      this.centerY,\n      this.gameWidth,\n      this.gameHeight,\n      0xff0000,\n      0.3\n    )\n    flashOverlay.setDepth(3000)\n    \n    this.tweens.add({\n      targets: flashOverlay,\n      alpha: 0,\n      duration: 200,\n      onComplete: () => flashOverlay.destroy()\n    })\n  }\n\n  /**\n   * カード獲得アニメーション\n   */\n  private showCardAcquisitionAnimation(card: Card, onComplete: () => void): void {\n    // 選択されたカードを強調表示\n    const highlightContainer = this.add.container(this.centerX, this.centerY)\n    highlightContainer.setDepth(3000)\n\n    const cardBg = this.add.image(0, 0, this.getCardTemplate(card.type))\n    cardBg.setScale(2) // 大きく表示\n\n    const cardName = this.add.text(\n      0, -100,\n      card.name,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '24px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    const acquiredText = this.add.text(\n      0, 120,\n      'デッキに追加されました！',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#00ff00',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    highlightContainer.add([cardBg, cardName, acquiredText])\n\n    // パルス効果\n    this.tweens.add({\n      targets: highlightContainer,\n      scale: 1.1,\n      duration: 300,\n      yoyo: true,\n      repeat: 1,\n      ease: 'Power2',\n      onComplete: () => {\n        // フェードアウト\n        this.tweens.add({\n          targets: highlightContainer,\n          alpha: 0,\n          scale: 0.5,\n          duration: 800,\n          ease: 'Power2',\n          onComplete: () => {\n            highlightContainer.destroy()\n            onComplete()\n          }\n        })\n      }\n    })\n  }\n\n  /**\n   * カード選択UIを隠す\n   */\n  private hideCardSelection(): void {\n    if (!this.cardSelectionUI) return\n\n    this.tweens.add({\n      targets: this.cardSelectionUI,\n      alpha: 0,\n      scale: 0.8,\n      duration: 500,\n      ease: 'Power2',\n      onComplete: () => {\n        this.cardSelectionUI?.destroy()\n        this.cardSelectionUI = undefined\n        \n        // チャレンジUIをクリーンアップ\n        this.cleanupChallengeUI()\n        \n        // 通常のゲームフローに戻る\n        this.updateUI()\n        this.updateActionButtons()\n      }\n    })\n  }\n\n  /**\n   * ゲーム状態をチュートリアル用に公開\n   */\n  private updateGameStateForTutorial(): void {\n    // ゲーム状態をグローバルとSceneデータの両方に設定\n    const gameState = {\n      hand: this.gameInstance.hand,\n      selectedCards: this.gameInstance.selectedCards,\n      phase: this.gameInstance.phase,\n      turn: this.gameInstance.turn,\n      vitality: this.gameInstance.vitality,\n      maxVitality: this.gameInstance.maxVitality,\n      insuranceCards: this.gameInstance.insuranceCards,\n      config: this.gameInstance.config,\n      lastChallengeResult: null as ChallengeResult | null\n    };\n    \n    (window as Window & { __gameState?: typeof gameState }).__gameState = gameState;\n    this.data.set('gameState', gameState);\n  }\n\n  /**\n   * アクションボタンの有効/無効を更新\n   */\n  private updateActionButtons(): void {\n    const actionButtons = this.children.getByName('action-buttons') as Phaser.GameObjects.Container\n    if (!actionButtons) return\n\n    const drawButton = actionButtons.getByName('draw-button') as Phaser.GameObjects.Container\n    const challengeButton = actionButtons.getByName('challenge-button') as Phaser.GameObjects.Container\n    const endTurnButton = actionButtons.getByName('end-turn-button') as Phaser.GameObjects.Container\n\n    const phase = this.gameInstance.phase\n    const isInProgress = this.gameInstance.isInProgress()\n\n    // フェーズに応じてボタンの有効/無効を切り替え\n    if (drawButton) {\n      this.setButtonEnabled(drawButton, isInProgress && phase === 'draw')\n    }\n\n    if (challengeButton) {\n      this.setButtonEnabled(challengeButton, isInProgress && phase === 'draw' && !this.gameInstance.currentChallenge)\n    }\n\n    if (endTurnButton) {\n      // ドローフェーズまたは解決フェーズでターン終了を可能に\n      this.setButtonEnabled(endTurnButton, isInProgress && (phase === 'draw' || phase === 'resolution'))\n    }\n  }\n\n  /**\n   * コンテナベースのボタンを作成\n   */\n  private createContainerButton(\n    x: number,\n    y: number,\n    text: string,\n    onClick: () => void,\n    style?: Phaser.Types.GameObjects.Text.TextStyle\n  ): Phaser.GameObjects.Container {\n    const container = this.add.container(x, y)\n    \n    // ボタン背景\n    const bg = this.add.rectangle(0, 0, 150, 40, 0x3498DB)\n    bg.setInteractive({ useHandCursor: true })\n    \n    // ボタンテキスト\n    const textObj = this.add.text(0, 0, text, style || {\n      fontFamily: 'Noto Sans JP',\n      fontSize: '18px',\n      color: '#ffffff'\n    })\n    textObj.setOrigin(0.5)\n    \n    container.add([bg, textObj])\n    \n    // クリックイベント\n    bg.on('pointerdown', onClick)\n    \n    // ホバー効果\n    bg.on('pointerover', () => {\n      bg.setFillStyle(0x2980B9)\n      container.setScale(1.05)\n    })\n    \n    bg.on('pointerout', () => {\n      bg.setFillStyle(0x3498DB)\n      container.setScale(1)\n    })\n    \n    return container\n  }\n\n  /**\n   * ボタンの有効/無効を切り替え\n   */\n  private setButtonEnabled(button: Phaser.GameObjects.Container, enabled: boolean): void {\n    if (!button || !button.list || button.list.length < 2) {\n      console.warn('Invalid button structure')\n      return\n    }\n\n    const buttonBg = button.list[0] as Phaser.GameObjects.Rectangle\n    const buttonText = button.list[1] as Phaser.GameObjects.Text\n\n    if (!buttonBg || !buttonText) {\n      console.warn('Button components not found')\n      return\n    }\n\n    if (enabled) {\n      buttonBg.setFillStyle(0x3498DB)\n      buttonText.setColor('#ffffff')\n      buttonBg.setInteractive()\n    } else {\n      buttonBg.setFillStyle(0x95A5A6)\n      buttonText.setColor('#cccccc')\n      buttonBg.disableInteractive()\n    }\n  }\n\n  /**\n   * チャレンジUI要素をクリーンアップ\n   */\n  private cleanupChallengeUI(): void {\n    // パワー表示を削除\n    const powerDisplay = this.children.getByName('power-display')\n    if (powerDisplay) {\n      powerDisplay.destroy()\n    }\n\n    // チャレンジ解決ボタンを削除\n    const resolveButton = this.children.getByName('resolve-challenge-button')\n    if (resolveButton) {\n      resolveButton.destroy()\n    }\n\n    // チャレンジ情報を削除\n    const challengeInfo = this.children.getByName('challenge-info')\n    if (challengeInfo) {\n      challengeInfo.destroy()\n    }\n  }\n\n  /**\n   * ゲーム終了画面を表示\n   */\n  private showGameEnd(isVictory: boolean): void {\n    const endContainer = this.add.container(this.centerX, this.centerY)\n    \n    const bg = this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x000000, 0.9)\n    \n    const titleText = this.add.text(\n      0,\n      -100,\n      isVictory ? '人生充実！' : 'ゲームオーバー',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '48px',\n        color: isVictory ? '#FFD43B' : '#FF6B6B',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n    \n    const stats = this.gameInstance.stats\n    const statsText = this.add.text(\n      0,\n      0,\n      `最終活力: ${this.gameInstance.vitality}\\n` +\n      `総ターン数: ${stats.turnsPlayed}\\n` +\n      `チャレンジ成功数: ${stats.successfulChallenges}/${stats.totalChallenges}\\n` +\n      `最高活力: ${stats.highestVitality}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff',\n        align: 'center',\n        lineSpacing: 10\n      }\n    ).setOrigin(0.5)\n    \n    const retryButton = this.createButton(\n      -100,\n      100,\n      'もう一度',\n      () => {\n        this.scene.restart()\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    )\n    \n    const menuButton = this.createButton(\n      100,\n      100,\n      'メニューへ',\n      () => {\n        this.scene.start('MainMenuScene')\n      },\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: '#ffffff'\n      }\n    )\n    \n    endContainer.add([bg, titleText, statsText, retryButton, menuButton])\n    endContainer.setDepth(1000)\n    endContainer.setAlpha(0)\n    \n    // フェードイン\n    this.tweens.add({\n      targets: endContainer,\n      alpha: 1,\n      duration: 1000\n    })\n  }\n\n  /**\n   * Phase 3-3: 通知を表示\n   */\n  private showNotification(message: string, type: 'info' | 'warning' | 'success' = 'info'): void {\n    const notificationContainer = this.add.container(this.centerX, 200)\n    notificationContainer.setDepth(2500)\n\n    const colors = {\n      info: 0x3498db,\n      warning: 0xf39c12,\n      success: 0x2ecc71\n    }\n\n    const bg = this.add.rectangle(0, 0, 400, 60, colors[type], 0.9)\n    bg.setStrokeStyle(2, 0xffffff)\n\n    const text = this.add.text(\n      0, 0,\n      message,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    notificationContainer.add([bg, text])\n    notificationContainer.setScale(0)\n    notificationContainer.setAlpha(0)\n\n    // アニメーション\n    this.tweens.add({\n      targets: notificationContainer,\n      scale: 1,\n      alpha: 1,\n      duration: 300,\n      ease: 'Back.easeOut',\n      onComplete: () => {\n        // 3秒後にフェードアウト\n        this.time.delayedCall(3000, () => {\n          this.tweens.add({\n            targets: notificationContainer,\n            scale: 0.8,\n            alpha: 0,\n            duration: 300,\n            ease: 'Power2',\n            onComplete: () => notificationContainer.destroy()\n          })\n        })\n      }\n    })\n  }\n\n  /**\n   * 保険更新選択ダイアログを表示\n   * DISABLED: 保険更新システムが削除されたため無効化\n   */\n  private showInsuranceRenewalDialog(renewalOption: unknown): void {\n    // 保険更新システムが削除されたため、この機能は無効化\n    console.warn('showInsuranceRenewalDialog: 保険更新システムが削除されました')\n    return\n\n    // 保険更新選択コンテナを作成\n    this.insuranceRenewalDialogUI = this.add.container(this.centerX, this.centerY)\n    this.insuranceRenewalDialogUI.setDepth(2100)\n\n    // 背景オーバーレイ\n    const overlay = this.add.rectangle(\n      0, 0,\n      this.gameWidth, this.gameHeight,\n      0x000000, 0.8\n    )\n    overlay.setOrigin(0.5)\n\n    // カード情報の背景\n    const cardInfoBg = this.add.rectangle(0, -50, 600, 400, 0x2C3E50)\n    cardInfoBg.setStrokeStyle(4, 0xFFD700)\n\n    // タイトル\n    const titleText = this.add.text(\n      0, -220,\n      '保険更新の選択',\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '36px',\n        color: '#ffffff',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 保険名表示\n    const insuranceNameText = this.add.text(\n      0, -170,\n      renewalOption.cardName,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '28px',\n        color: '#FFD700',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // コスト情報表示\n    const currentVitality = this.gameInstance.vitality\n    const canAffordRenewal = currentVitality >= renewalOption.renewalCost\n    const costColor = canAffordRenewal ? '#00ff00' : '#ff4444'\n\n    const costInfoText = this.add.text(\n      0, -120,\n      `現在コスト: ${renewalOption.currentCost} → 更新コスト: ${renewalOption.renewalCost} (+${renewalOption.costIncrease})`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: costColor,\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // 活力状況表示\n    const vitalityStatusText = this.add.text(\n      0, -80,\n      `現在の活力: ${currentVitality}`,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '18px',\n        color: '#ffffff'\n      }\n    ).setOrigin(0.5)\n\n    // 年齢による増加理由\n    const ageReason = this.getAgeIncreaseReason()\n    const ageReasonText = this.add.text(\n      0, -50,\n      ageReason,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '16px',\n        color: '#cccccc'\n      }\n    ).setOrigin(0.5)\n\n    // 活力不足警告（必要に応じて表示）\n    let insufficientVitalityWarning: Phaser.GameObjects.Text | null = null\n    if (!canAffordRenewal) {\n      insufficientVitalityWarning = this.add.text(\n        0, -10,\n        '⚠ 活力不足で更新できません',\n        {\n          fontFamily: 'Noto Sans JP',\n          fontSize: '18px',\n          color: '#ff4444',\n          fontStyle: 'bold'\n        }\n      ).setOrigin(0.5)\n    }\n\n    this.insuranceRenewalDialogUI.add([\n      overlay, \n      cardInfoBg, \n      titleText, \n      insuranceNameText, \n      costInfoText, \n      vitalityStatusText, \n      ageReasonText\n    ])\n\n    if (insufficientVitalityWarning) {\n      this.insuranceRenewalDialogUI.add(insufficientVitalityWarning)\n    }\n\n    // 更新ボタン（活力不足でも表示するが、効果的には失効する）\n    this.createRenewalButton(\n      -150, 80,\n      '更新する',\n      `コスト: ${renewalOption.renewalCost}`,\n      canAffordRenewal ? 0x4CAF50 : 0x9E9E9E, // グリーンまたはグレー\n      () => this.onRenewalSelected(renewalOption, true),\n      canAffordRenewal\n    )\n\n    // 失効ボタン\n    this.createRenewalButton(\n      150, 80,\n      '失効させる',\n      'リスクを受け入れる',\n      0xF44336, // レッド\n      () => this.onRenewalSelected(renewalOption, false),\n      true\n    )\n\n    // フェードイン\n    this.insuranceRenewalDialogUI.setAlpha(0)\n    this.tweens.add({\n      targets: this.insuranceRenewalDialogUI,\n      alpha: 1,\n      duration: 500,\n      ease: 'Power2'\n    })\n  }\n\n  /**\n   * 更新選択ボタンを作成\n   */\n  private createRenewalButton(\n    x: number,\n    y: number,\n    title: string,\n    subtitle: string,\n    color: number,\n    callback: () => void,\n    enabled: boolean\n  ): void {\n    if (!this.insuranceRenewalDialogUI) return\n\n    const buttonContainer = this.add.container(x, y)\n    \n    // ボタン背景\n    const buttonBg = this.add.rectangle(0, 0, 250, 100, color)\n    buttonBg.setStrokeStyle(3, enabled ? 0xffffff : 0x666666)\n    \n    if (enabled) {\n      buttonBg.setInteractive()\n    }\n    \n    // タイトルテキスト\n    const titleText = this.add.text(\n      0, -15,\n      title,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '20px',\n        color: enabled ? '#ffffff' : '#666666',\n        fontStyle: 'bold'\n      }\n    ).setOrigin(0.5)\n\n    // サブタイトルテキスト\n    const subtitleText = this.add.text(\n      0, 15,\n      subtitle,\n      {\n        fontFamily: 'Noto Sans JP',\n        fontSize: '14px',\n        color: enabled ? '#ffffff' : '#666666'\n      }\n    ).setOrigin(0.5)\n\n    if (enabled) {\n      // ホバー効果\n      buttonBg.on('pointerover', () => {\n        buttonContainer.setScale(1.05)\n        buttonBg.setFillStyle(Phaser.Display.Color.ValueToColor(color).brighten(20).color)\n      })\n\n      buttonBg.on('pointerout', () => {\n        buttonContainer.setScale(1)\n        buttonBg.setFillStyle(color)\n      })\n\n      // クリック処理\n      buttonBg.on('pointerdown', () => {\n        // 即座にUI応答\n        buttonContainer.setScale(0.95)\n        \n        this.time.delayedCall(100, () => {\n          buttonContainer.setScale(1)\n          callback()\n        })\n      })\n    }\n\n    buttonContainer.add([buttonBg, titleText, subtitleText])\n    this.insuranceRenewalDialogUI.add(buttonContainer)\n  }\n\n  /**\n   * 更新選択時の処理\n   */\n  private onRenewalSelected(renewalOption: InsuranceRenewalOption, shouldRenew: boolean): void {\n    // UIを閉じる\n    if (this.insuranceRenewalDialogUI) {\n      this.tweens.add({\n        targets: this.insuranceRenewalDialogUI,\n        alpha: 0,\n        scale: 0.8,\n        duration: 300,\n        ease: 'Power2',\n        onComplete: () => {\n          this.insuranceRenewalDialogUI?.destroy()\n          this.insuranceRenewalDialogUI = undefined\n        }\n      })\n    }\n\n    try {\n      let result\n      if (shouldRenew) {\n        result = this.gameInstance.renewInsurance(renewalOption.cardId)\n      } else {\n        result = this.gameInstance.expireInsurance(renewalOption.cardId)\n      }\n\n      // 結果メッセージを表示\n      const messageType = result.action === 'renewed' ? 'success' : 'warning'\n      this.showNotification(result.message, messageType)\n\n      // UIを更新\n      this.time.delayedCall(500, () => {\n        this.updateInsuranceDisplay()\n        this.updateVitalityDisplay()\n        \n        // 他に期限切れの保険があるかチェック\n        this.checkForAdditionalRenewals()\n      })\n\n    } catch (error) {\n      console.error('Insurance renewal error:', error)\n      this.showNotification('保険処理でエラーが発生しました', 'error')\n    }\n  }\n\n  /**\n   * 年齢による増加理由を取得\n   */\n  private getAgeIncreaseReason(): string {\n    const stage = this.gameInstance.stage\n    \n    switch (stage) {\n      case 'youth':\n        return '青年期のため基本コストで更新可能'\n      case 'middle':\n        return '中年期のため更新コストが増加 (+2)'\n      case 'fulfillment':\n        return '充実期のため更新コストが大幅増加 (+4)'\n      default:\n        return '年齢に応じてコストが調整されます'\n    }\n  }\n\n  /**\n   * 追加の期限切れ保険をチェック\n   * DISABLED: 保険更新システムが削除されたため無効化\n   */\n  private checkForAdditionalRenewals(): void {\n    // 保険更新システムが削除されたため、この機能は無効化\n    return\n  }\n\n  // ===================\n  // チュートリアル関連\n  // ===================\n\n  /**\n   * チュートリアルの初期化\n   */\n  private initializeTutorial(): void {\n    try {\n      // TutorialManagerの初期化\n      this.tutorialManager = new TutorialManager(this, {\n        debugMode: false,\n        autoSaveProgress: true,\n        stepChangeDelay: 500,\n        defaultHighlightOptions: {\n          color: '#FFD700',\n          opacity: 0.4,\n          borderWidth: 3,\n          borderColor: '#FFA500',\n          glowEffect: true,\n          animationType: 'pulse',\n          duration: 1200\n        }\n      })\n\n      // TutorialOverlayの初期化\n      this.tutorialOverlay = new TutorialOverlay(this)\n      this.tutorialOverlay.setVisible(false)\n\n      // チュートリアルステップで参照される要素を登録\n      this.registerTutorialElements()\n\n      // イベントリスナー設定\n      this.setupTutorialEventListeners()\n\n      // 開発環境でのテストヘルパー設定\n      if (process.env.NODE_ENV === 'development') {\n        this.time.delayedCall(1000, () => {\n          setupGlobalTutorialTests(this)\n        })\n      }\n\n    } catch (error) {\n      console.error('Tutorial initialization failed:', error)\n    }\n  }\n\n  /**\n   * チュートリアル要素の登録\n   */\n  private registerTutorialElements(): void {\n    // 手札エリア\n    if (this.handCards.length > 0) {\n      this.tutorialStepElements.set('hand-area', this.handCards[0].parentContainer || this.handCards[0])\n    }\n\n    // バイタリティバー\n    if (this.vitalityBarContainer) {\n      this.tutorialStepElements.set('vitality-bar', this.vitalityBarContainer)\n    }\n\n    // 保険リスト\n    if (this.insuranceListContainer) {\n      this.tutorialStepElements.set('insurance-list', this.insuranceListContainer)\n    }\n\n    // 負担指標\n    if (this.burdenIndicatorContainer) {\n      this.tutorialStepElements.set('burden-indicator', this.burdenIndicatorContainer)\n    }\n  }\n\n  /**\n   * チュートリアルイベントリスナーの設定\n   */\n  private setupTutorialEventListeners(): void {\n    if (!this.tutorialManager) return\n\n    this.tutorialManager.on('tutorial:started', (data) => {\n      this.isTutorialMode = true\n      this.tutorialOverlay?.setVisible(true)\n      if (import.meta.env.DEV) console.log('Tutorial started:', data.tutorialId)\n    })\n\n    this.tutorialManager.on('tutorial:step:enter', (data) => {\n      this.handleTutorialStepEnter(data)\n    })\n\n    this.tutorialManager.on('tutorial:step:exit', () => {\n      this.tutorialOverlay?.clearHighlights()\n    })\n\n    this.tutorialManager.on('tutorial:completed', () => {\n      this.endTutorialMode()\n    })\n\n    this.tutorialManager.on('tutorial:skipped', () => {\n      this.endTutorialMode()\n    })\n\n    this.tutorialManager.on('tutorial:error', (data) => {\n      console.error('Tutorial error:', data.error)\n      this.endTutorialMode()\n    })\n\n    // 画面リサイズ対応\n    this.scale.on('resize', () => {\n      this.tutorialOverlay?.onResize()\n    })\n  }\n\n  /**\n   * チュートリアルステップ開始時の処理\n   */\n  private handleTutorialStepEnter(_data: unknown): void {\n    if (!this.tutorialOverlay || !this.tutorialManager) return\n\n    const currentStep = this.tutorialManager.getCurrentStep()\n    if (!currentStep) return\n\n    const progress = this.tutorialManager.getProgress()\n    if (!progress) return\n\n    // 進捗バーの更新\n    const totalSteps = this.tutorialManager.getCurrentStep() ? \n      (this.tutorialManager as unknown as { currentConfig?: { steps: { length: number } } }).currentConfig?.steps.length || 0 : 0\n    this.tutorialOverlay.createProgressBar(progress, totalSteps)\n\n    // ターゲット要素の処理\n    let targetBounds: Phaser.Geom.Rectangle | undefined\n    if (currentStep.targetElement) {\n      const targetElement = this.tutorialStepElements.get(currentStep.targetElement) ||\n                          this.children.getByName(currentStep.targetElement)\n      \n      if (targetElement && targetElement.getBounds) {\n        targetBounds = targetElement.getBounds()\n        \n        // スポットライト効果\n        this.tutorialOverlay.createSpotlight(targetElement)\n        \n        // ハイライト効果\n        this.tutorialOverlay.highlightElement(\n          currentStep.targetElement, \n          currentStep.highlightOptions\n        )\n      }\n    }\n\n    // 吹き出し表示\n    this.tutorialOverlay.createSpeechBubble(currentStep, targetBounds)\n\n    // 制御ボタン\n    const canGoBack = progress.currentStepIndex > 0\n    const canSkip = true // 基本的にはスキップ可能\n\n    this.tutorialOverlay.createControlButtons(\n      canGoBack,\n      canSkip,\n      () => this.tutorialManager?.nextStep(),\n      canGoBack ? () => this.tutorialManager?.previousStep() : undefined,\n      () => this.tutorialManager?.skipTutorial()\n    )\n\n    // キーボード操作の有効化\n    this.tutorialOverlay.enableKeyboardControls(\n      () => this.tutorialManager?.nextStep(),\n      canGoBack ? () => this.tutorialManager?.previousStep() : undefined,\n      () => this.tutorialManager?.skipTutorial()\n    )\n\n    // アクション待機の場合の自動進行設定\n    if (currentStep.action === 'wait' && currentStep.waitTime) {\n      this.time.delayedCall(currentStep.waitTime, () => {\n        this.tutorialManager?.nextStep()\n      })\n    }\n  }\n\n  /**\n   * チュートリアルモード終了\n   */\n  private endTutorialMode(): void {\n    this.isTutorialMode = false\n    \n    if (this.tutorialOverlay) {\n      this.tutorialOverlay.setVisible(false)\n      this.tutorialOverlay.clearHighlights()\n    }\n\n    // 通常のUI制限を解除\n    this.enableAllGameUI()\n    \n    if (import.meta.env.DEV) console.log('Tutorial mode ended')\n  }\n\n  /**\n   * チュートリアル自動開始（メニューから呼び出された場合）\n   */\n  private autoStartTutorial(): void {\n    if (import.meta.env.DEV) console.log('Auto-starting tutorial from menu')\n    \n    // インタラクティブチュートリアルを開始\n    this.startTutorial(INTERACTIVE_GAME_TUTORIAL)\n      .then(() => {\n        if (import.meta.env.DEV) console.log('Tutorial started successfully')\n      })\n      .catch((error) => {\n        console.error('Failed to start tutorial:', error)\n      })\n  }\n\n  /**\n   * チュートリアル開始（外部から呼び出し用）\n   */\n  public startTutorial(config: TutorialConfig): Promise<void> {\n    if (!this.tutorialManager) {\n      return Promise.reject(new Error('Tutorial manager not initialized'))\n    }\n\n    // 既存のチュートリアルが完了済みかチェック\n    if (this.tutorialManager.isCompleted(config.id)) {\n      if (import.meta.env.DEV) console.log('Tutorial already completed:', config.id)\n      return Promise.resolve()\n    }\n\n    // チュートリアルモード制限を適用\n    this.applyTutorialModeRestrictions()\n\n    return this.tutorialManager.startTutorial(config)\n  }\n\n  /**\n   * チュートリアル中のUI制限適用\n   */\n  private applyTutorialModeRestrictions(): void {\n    // ドラッグ&ドロップを一時無効化\n    this.isDragInProgress = false\n    \n    // 通常のボタンを無効化（チュートリアルで指示されたもの以外）\n    this.disableNonTutorialUI()\n  }\n\n  /**\n   * 非チュートリアルUIの無効化\n   */\n  private disableNonTutorialUI(): void {\n    // 実装：チュートリアル中は特定のUI要素のみアクティブに\n    // 詳細な実装は既存のUI要素の構造に依存\n  }\n\n  /**\n   * 全ゲームUIの有効化\n   */\n  private enableAllGameUI(): void {\n    // 実装：すべてのUI要素を再度有効化\n    // ドラッグ&ドロップやボタンの制限を解除\n  }\n\n  /**\n   * チュートリアル要素の動的登録\n   */\n  public registerTutorialElement(name: string, element: Phaser.GameObjects.GameObject): void {\n    this.tutorialStepElements.set(name, element)\n  }\n\n  /**\n   * チュートリアル状態の確認\n   */\n  public isTutorialActive(): boolean {\n    return this.isTutorialMode\n  }\n\n  /**\n   * 現在のチュートリアルステップ取得\n   */\n  public getCurrentTutorialStep(): TutorialStep | null {\n    return this.tutorialManager?.getCurrentStep() || null\n  }\n\n  /**\n   * チュートリアル強制終了\n   */\n  public stopTutorial(): void {\n    if (this.tutorialManager) {\n      this.tutorialManager.skipTutorial()\n    }\n  }\n\n  /**\n   * シーンのクリーンアップ処理\n   */\n  public destroy(): void {\n    // 新しいドロップゾーンシステムのクリーンアップ\n    if (this.dropZoneIntegration) {\n      this.dropZoneIntegration.destroy()\n      this.dropZoneIntegration = undefined\n    }\n\n    // イベントリスナーの削除\n    this.data.events.off('cardSelected')\n\n    // 親クラスのクリーンアップを呼び出し\n    super.destroy()\n  }\n}","import Phaser from 'phaser'\nimport { gameConfig } from './config/gameConfig'\nimport { PreloadScene } from './scenes/PreloadScene'\nimport { MainMenuScene } from './scenes/MainMenuScene'\nimport { GameScene } from './scenes/GameScene'\n\n/**\n * Phaserゲームを管理するクラス\n */\nexport class GameManager {\n  private game: Phaser.Game | null = null\n  private static instance: GameManager | null = null\n\n  private constructor() {}\n\n  /**\n   * シングルトンインスタンスを取得\n   */\n  static getInstance(): GameManager {\n    if (!GameManager.instance) {\n      GameManager.instance = new GameManager()\n    }\n    return GameManager.instance\n  }\n\n  /**\n   * ゲームを初期化\n   */\n  initialize(parent: string | HTMLElement): void {\n    \n    if (this.game) {\n      return\n    }\n\n    try {\n      \n      // 設定をコピー（元の設定を変更しないため）\n      const config = { ...gameConfig }\n      config.parent = parent\n      \n      // シーンを追加\n      config.scene = [\n        PreloadScene,\n        MainMenuScene,\n        GameScene\n      ]\n\n      \n      // ゲームインスタンスを作成\n      this.game = new Phaser.Game(config)\n      \n    } catch (error) {\n      console.error('❌ GameManager: ゲーム初期化エラー:', error)\n      throw error\n    }\n  }\n\n  /**\n   * ゲームを破棄\n   */\n  destroy(): void {\n    if (this.game) {\n      this.game.destroy(true, false)\n      this.game = null\n    }\n  }\n\n  /**\n   * ゲームが初期化されているか\n   */\n  isInitialized(): boolean {\n    return this.game !== null\n  }\n\n  /**\n   * 現在のシーンを取得\n   */\n  getCurrentScene(): string | null {\n    if (!this.game) return null\n    \n    const scenes = this.game.scene.getScenes(true)\n    return scenes.length > 0 ? scenes[0].scene.key : null\n  }\n\n  /**\n   * シーンを切り替え\n   */\n  switchScene(sceneKey: string, data?: object): void {\n    if (!this.game) {\n      if (import.meta.env.DEV) console.error('Game is not initialized')\n      return\n    }\n\n    const currentScene = this.game.scene.getScenes(true)[0]\n    if (currentScene) {\n      currentScene.scene.start(sceneKey, data)\n    }\n  }\n\n  /**\n   * ゲームをリセット\n   */\n  reset(): void {\n    if (!this.game) return\n    \n    // すべてのシーンを停止\n    this.game.scene.getScenes(true).forEach(scene => {\n      scene.scene.stop()\n    })\n    \n    // プリロードシーンから再開\n    this.game.scene.start('PreloadScene')\n  }\n}"],"names":["gameConfig","Phaser","GAME_CONSTANTS","BaseScene","Scene","__publicField","duration","callback","size","x","y","text","onClick","style","button","PreloadScene","progressBar","progressBox","loadingText","percentText","value","graphics","i","j","key","color","buttonGraphics","highlightGraphics","MainMenuScene","overlay","creditContainer","creditText","closeButton","TutorialManager","scene","options","__spreadValues","config","__async","error","stepIndex","step","currentStep","elementName","element","highlightOptions","storageKey","TUTORIAL_STORAGE_KEYS","tutorialId","saved","progress","interval","timeout","type","validation","checkInterval","gameState","timeoutId","overlayOptions","bounds","_a","completed","event","data","message","TutorialOverlay","camera","targetElement","centerX","centerY","radius","targetBounds","bubbleMaxWidth","background","titleText","descriptionText","titleHeight","descriptionHeight","totalHeight","bubbleWidth","position","bubbleBounds","margin","totalSteps","barWidth","barHeight","progressWidth","progressText","canGoBack","canSkip","onNext","onBack","onSkip","buttons","totalWidth","backButton","nextButton","skipButton","currentX","colorValue","hoverBackground","buttonText","highlight","finalOptions","borderColorValue","glow","glowColorValue","animation","target","fromX","fromY","toX","toY","angle","distance","arrowX","arrowY","arrow","firstElement","mockElement","cursors","_b","_c","_d","_e","_f","_g","firstButton","isSmallScreen","mobileButtonHeight","mobileButtonWidth","maxWidth","tabletButtonHeight","tabletButtonWidth","child","width","height","index","announcement","canvas","visible","INTERACTIVE_GAME_TUTORIAL","hand","DropZoneManager","zone","zoneId","card","game","currentTime","newHoveredZone","dropZone","result","a","b","oldGraphics","hover","dx","dy","DropZoneValidators","allowedTypes","allowedPhases","currentPhase","minPower","maxPower","maxCost","requiredVitality","currentHandSize","maxHandSize","allowedStages","minAge","maxAge","age","validator","validators","condition","thenValidator","elseValidator","DropZoneActions","shuffle","amount","maxVitality","effectName","_game","actions","action","thenAction","elseAction","DropZonePresets","requiredCardType","vitalityCost","DropZoneIntegration","isMobile","isTablet","hasTouch","orientation","challengePreset","challengeZone","discardPreset","discardZone","cardContainer","pointer","dragX","dragY","adjustedPosition","snapTarget","_pointer","_card","finalPosition","dropResult","snapPosition","_result","trail","feedback","originalX","particle","GameScene","Game","starterCards","CardFactory","challengeCards","stageText","stageLabel","vitalityText","turnText","bg","label","burden","burdenText","title","indicatorContainer","stages","stageLabels","stageColors","currentStageIndex","stage","isActive","isCurrent","dot","maxVitalityForStage","maxVitalityLabel","line","barBg","vitalityPercentage","maxMarker","percentage","deckArea","deckBack","deckCount","discardArea","discardPlaceholder","discardLabel","challengeArea","challengePlaceholder","challengeLabel","zoneName","_width","_height","draggedCard","isValid","alpha","cardX","cardY","closestZone","minDistance","buttonContainer","drawButton","challengeButton","endTurnButton","count","cardColor","glassBg","hitArea","cardName","powerBg","powerText","costBg","costText","ageBonusIndicator","currentBonus","bonusBg","bonusText","effectivePower","multiplier","basePowerText","cardElements","dragStartTime","offsetY","startX","targetX","challengeCard","item","activeInsurances","noInsuranceText","insurance","yPos","cardItem","isExpiringSoon","isExpiringSoonTwoTurns","isExpiringSoonOneTurn","bgColor","strokeColor","itemBg","animationDuration","badgeColor","textColor","typeBadge","typeText","nameText","bonus","turnsTextColor","turnsText","warningIconColor","warningIcon","divider","warningText","previousBurden","oldVitality","newVitality","targetWidth","newColor","counter","currentPercentage","currentColor","powerDisplay","selectedCardsArray","powerBreakdown","countText","yOffset","baseText","insuranceText","challengeX","challengeY","originalY","effect","spark","cardIndex","challengeInfo","challengeContainer","cardBg","descText","existingButton","selectedPower","subText","totalPower","resultContainer","detailContent","detailText","burdenImpactText","currentStage","stageName","AGE_PARAMETERS","turnsInStage","maxTurns","turn","previousMaxVitality","newChallenges","newMaxVitality","transitionContainer","vitalityChangeText","reviewRecommendation","reviewText","reviewButton","warningContainer","iconText","messageText","actionText","renewal","remainingTurns","insuranceName","warningColor","iconEmoji","urgencyText","pulseRepeats","displayTime","recommendationText","recommendText","description","insuranceType","titleBg","feature","featureText","detailBg","selectButton","adjustment","icon","container","tooltipText","tooltipContainer","selectedTypeText","confirmText","cardChoices","onComplete","cardSpacing","cardDesc","coverageText","durationText","durationLabel","goldGlow","nextCount","selectedContainer","insuranceCount","burdenAmount","adviceText","flashOverlay","highlightContainer","acquiredText","actionButtons","phase","isInProgress","textObj","enabled","buttonBg","resolveButton","isVictory","endContainer","stats","statsText","retryButton","menuButton","notificationContainer","colors","renewalOption","subtitle","subtitleText","shouldRenew","messageType","_data","name","_GameManager","parent","scenes","sceneKey","currentScene","GameManager"],"mappings":"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"}