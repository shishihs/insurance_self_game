{"version":3,"file":"game-logic-DNW83sYz.js","sources":["../../src/domain/entities/Card.ts","../../src/domain/entities/Deck.ts","../../src/domain/services/CardFactory.ts","../../src/domain/services/CardManager.ts","../../src/domain/types/game.types.ts","../../src/domain/entities/Game.ts","../../src/domain/types/tutorial.types.ts"],"sourcesContent":["import type { \n  ICard, \n  CardType, \n  CardEffect,\n  CardEffectType, \n  LifeCardCategory, \n  InsuranceType,\n  InsuranceDurationType,\n  DreamCategory\n} from '../types/card.types'\n\n/**\n * カードエンティティ\n */\nexport class Card implements ICard {\n  readonly id: string\n  readonly name: string\n  readonly description: string\n  readonly type: CardType\n  readonly power: number\n  readonly cost: number\n  readonly effects: CardEffect[]\n  readonly imageUrl?: string\n  readonly category?: LifeCardCategory\n  readonly insuranceType?: InsuranceType\n  readonly coverage?: number\n  readonly penalty?: number\n  // 保険カード用プロパティ\n  readonly ageBonus?: number\n  readonly durationType?: InsuranceDurationType\n  remainingTurns?: number // 可変プロパティ（ターンごとに減少）\n  // Phase 4 夢カード用プロパティ\n  readonly dreamCategory?: DreamCategory\n\n  constructor(params: ICard) {\n    this.id = params.id\n    this.name = params.name\n    this.description = params.description\n    this.type = params.type\n    this.power = params.power\n    this.cost = params.cost\n    this.effects = params.effects\n    this.imageUrl = params.imageUrl\n    this.category = params.category\n    this.insuranceType = params.insuranceType\n    this.coverage = params.coverage\n    this.penalty = params.penalty\n    \n    // 年齢ボーナスのプロパティ\n    if ('ageBonus' in params) {\n      this.ageBonus = params.ageBonus\n    }\n    \n    // 保険期間種別と残りターン数\n    if ('durationType' in params) {\n      this.durationType = params.durationType\n    }\n    if ('remainingTurns' in params) {\n      this.remainingTurns = params.remainingTurns\n    }\n    \n    // Phase 4: 夢カードのカテゴリー\n    if ('dreamCategory' in params) {\n      this.dreamCategory = params.dreamCategory\n    }\n  }\n\n  /**\n   * カードの実効パワーを計算\n   */\n  calculateEffectivePower(bonuses: number = 0): number {\n    // 年齢ボーナスを含めて計算\n    const totalBonus = bonuses + (this.ageBonus || 0)\n    return Math.max(0, this.power + totalBonus)\n  }\n\n  /**\n   * カードが特定の効果を持っているか確認\n   */\n  hasEffect(effectType: CardEffectType): boolean {\n    return this.effects.some(effect => effect.type === effectType)\n  }\n\n  /**\n   * 人生カードかどうか\n   */\n  isLifeCard(): boolean {\n    return this.type === 'life'\n  }\n\n  /**\n   * 保険カードかどうか\n   */\n  isInsuranceCard(): boolean {\n    return this.type === 'insurance'\n  }\n\n  /**\n   * 落とし穴カードかどうか\n   */\n  isPitfallCard(): boolean {\n    return this.type === 'pitfall'\n  }\n\n  /**\n   * Phase 4: 夢カードかどうか\n   */\n  isDreamCard(): boolean {\n    return this.dreamCategory !== undefined\n  }\n\n  /**\n   * 定期保険かどうか\n   */\n  isTermInsurance(): boolean {\n    return this.isInsuranceCard() && this.durationType === 'term'\n  }\n\n  /**\n   * 終身保険かどうか\n   */\n  isWholeLifeInsurance(): boolean {\n    return this.isInsuranceCard() && this.durationType === 'whole_life'\n  }\n\n  /**\n   * 期限切れかどうか（定期保険のみ）\n   */\n  isExpired(): boolean {\n    if (!this.isTermInsurance()) {\n      return false\n    }\n    return this.remainingTurns !== undefined && this.remainingTurns <= 0\n  }\n\n  /**\n   * ターン経過処理（定期保険の期限を1減らす）\n   */\n  decrementTurn(): void {\n    if (this.isTermInsurance() && this.remainingTurns !== undefined && this.remainingTurns > 0) {\n      this.remainingTurns--\n    }\n  }\n\n  /**\n   * 期限までの残りターン数を取得（表示用）\n   */\n  getRemainingTurnsDisplay(): string {\n    if (!this.isTermInsurance() || this.remainingTurns === undefined) {\n      return '終身'\n    }\n    if (this.remainingTurns <= 0) {\n      return '期限切れ'\n    }\n    return `残り${this.remainingTurns}ターン`\n  }\n\n  /**\n   * カードのコピーを作成\n   */\n  clone(): Card {\n    const baseParams: ICard = {\n      id: this.id,\n      name: this.name,\n      description: this.description,\n      type: this.type,\n      power: this.power,\n      cost: this.cost,\n      effects: [...this.effects],\n      imageUrl: this.imageUrl,\n      category: this.category,\n      insuranceType: this.insuranceType,\n      coverage: this.coverage,\n      penalty: this.penalty,\n      ageBonus: this.ageBonus || 0,\n      durationType: this.durationType,\n      remainingTurns: this.remainingTurns,\n      dreamCategory: this.dreamCategory\n    }\n    \n    return new Card(baseParams)\n  }\n\n  /**\n   * 保険効果を適用（ダメージ軽減など）\n   */\n  applyInsuranceEffect(damage: number): number {\n    if (!this.isInsuranceCard() || !this.coverage) {\n      return damage\n    }\n\n    // シールド効果: ダメージを軽減\n    const shieldEffect = this.effects.find(effect => effect.type === 'shield')\n    if (shieldEffect && shieldEffect.value) {\n      const reduction = Math.min(damage, shieldEffect.value)\n      return Math.max(0, damage - reduction)\n    }\n\n    return damage\n  }\n\n  /**\n   * カードの表示用テキストを生成\n   */\n  toDisplayString(): string {\n    let display = `${this.name} (Power: ${this.power}, Cost: ${this.cost})`\n    \n    if (this.coverage) {\n      display += `, Coverage: ${this.coverage}`\n    }\n    \n    // 年齢ボーナスの表示\n    if (this.ageBonus) {\n      display += `, Age Bonus: +${this.ageBonus}`\n    }\n    \n    // 保険期間の表示\n    if (this.isInsuranceCard()) {\n      display += `, 期間: ${this.getRemainingTurnsDisplay()}`\n    }\n    \n    if (this.effects.length > 0) {\n      display += '\\nEffects:'\n      this.effects.forEach(effect => {\n        display += `\\n  - ${effect.description}`\n      })\n    }\n    \n    return display\n  }\n  \n}","import { Card } from './Card'\nimport type { CardType } from '../types/card.types'\n\n/**\n * デッキエンティティ\n */\nexport class Deck {\n  private cards: Card[]\n  private name: string\n\n  constructor(name: string, cards: Card[] = []) {\n    this.name = name\n    this.cards = [...cards]\n  }\n\n  /**\n   * デッキ名を取得\n   */\n  getName(): string {\n    return this.name\n  }\n\n  /**\n   * カード枚数を取得\n   */\n  size(): number {\n    return this.cards.length\n  }\n\n  /**\n   * デッキが空かどうか\n   */\n  isEmpty(): boolean {\n    return this.cards.length === 0\n  }\n\n  /**\n   * カードを追加\n   */\n  addCard(card: Card): void {\n    this.cards.push(card)\n  }\n\n  /**\n   * 複数のカードを追加\n   */\n  addCards(cards: Card[]): void {\n    this.cards.push(...cards)\n  }\n\n  /**\n   * カードを上から引く\n   */\n  drawCard(): Card | null {\n    return this.cards.pop() || null\n  }\n\n  /**\n   * 複数枚のカードを引く\n   */\n  drawCards(count: number): Card[] {\n    const drawn: Card[] = []\n    for (let i = 0; i < count && !this.isEmpty(); i++) {\n      const card = this.drawCard()\n      if (card) drawn.push(card)\n    }\n    return drawn\n  }\n\n  /**\n   * 特定のカードを削除\n   */\n  removeCard(cardId: string): boolean {\n    const index = this.cards.findIndex(card => card.id === cardId)\n    if (index !== -1) {\n      this.cards.splice(index, 1)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * デッキをシャッフル（Fisher-Yatesアルゴリズム）\n   */\n  shuffle(): void {\n    for (let i = this.cards.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]]\n    }\n  }\n\n  /**\n   * デッキの中身を確認（コピーを返す）\n   */\n  getCards(): Card[] {\n    return [...this.cards]\n  }\n\n  /**\n   * 特定のタイプのカード枚数を取得\n   */\n  countCardsByType(type: CardType): number {\n    return this.cards.filter(card => card.type === type).length\n  }\n\n  /**\n   * デッキをクリア\n   */\n  clear(): void {\n    this.cards = []\n  }\n\n  /**\n   * デッキのコピーを作成\n   */\n  clone(): Deck {\n    return new Deck(\n      this.name,\n      this.cards.map(card => card.clone())\n    )\n  }\n\n  /**\n   * デッキの統計情報を取得\n   */\n  getStats(): {\n    total: number\n    byType: Record<CardType, number>\n    averagePower: number\n    averageCost: number\n  } {\n    const stats = {\n      total: this.cards.length,\n      byType: {\n        life: 0,\n        insurance: 0,\n        pitfall: 0\n      } as Record<CardType, number>,\n      averagePower: 0,\n      averageCost: 0\n    }\n\n    let totalPower = 0\n    let totalCost = 0\n\n    this.cards.forEach(card => {\n      stats.byType[card.type]++\n      totalPower += card.power\n      totalCost += card.cost\n    })\n\n    stats.averagePower = stats.total > 0 ? totalPower / stats.total : 0\n    stats.averageCost = stats.total > 0 ? totalCost / stats.total : 0\n\n    return stats\n  }\n}","import { Card } from '../entities/Card'\nimport type { \n  LifeCardCategory, \n  InsuranceType, \n  GameStage,\n  DreamCategory\n} from '../types/card.types'\nimport type { InsuranceTypeChoice } from '../types/game.types'\n\n/**\n * カードファクトリー\n * ゲーム用のカードを生成する\n */\nexport class CardFactory {\n  private static cardIdCounter = 0\n\n  /**\n   * ユニークなカードIDを生成\n   */\n  private static generateId(): string {\n    return `card_${Date.now()}_${this.cardIdCounter++}`\n  }\n\n  /**\n   * 初期デッキ用の人生カードを生成\n   */\n  static createStarterLifeCards(): Card[] {\n    const cards: Card[] = []\n\n    // 健康カード\n    cards.push(this.createLifeCard({\n      name: '朝のジョギング',\n      description: '健康的な一日の始まり',\n      category: 'health',\n      power: 2,\n      cost: 1\n    }))\n\n    cards.push(this.createLifeCard({\n      name: '栄養バランスの良い食事',\n      description: '体調管理の基本',\n      category: 'health',\n      power: 3,\n      cost: 2\n    }))\n\n    // キャリアカード\n    cards.push(this.createLifeCard({\n      name: '新しいスキルの習得',\n      description: '成長への投資',\n      category: 'career',\n      power: 3,\n      cost: 2\n    }))\n\n    cards.push(this.createLifeCard({\n      name: 'チームワーク',\n      description: '仲間との協力',\n      category: 'career',\n      power: 2,\n      cost: 1\n    }))\n\n    // 家族カード\n    cards.push(this.createLifeCard({\n      name: '家族との団らん',\n      description: '心の充電',\n      category: 'family',\n      power: 2,\n      cost: 1\n    }))\n\n    // 趣味カード\n    cards.push(this.createLifeCard({\n      name: '趣味の時間',\n      description: 'リフレッシュタイム',\n      category: 'hobby',\n      power: 2,\n      cost: 1\n    }))\n\n    // 金融カード\n    cards.push(this.createLifeCard({\n      name: '計画的な貯蓄',\n      description: '将来への備え',\n      category: 'finance',\n      power: 3,\n      cost: 2\n    }))\n\n    return cards\n  }\n\n  /**\n   * 基本的な保険カードを生成（簡素化版：すべて終身保険、永続効果）\n   */\n  static createBasicInsuranceCards(stage: GameStage = 'youth'): Card[] {\n    const cards: Card[] = []\n    \n    // 年齢ボーナスの設定\n    const ageBonus = stage === 'middle' ? 0.5 : stage === 'fulfillment' ? 1.0 : 0\n\n    cards.push(this.createInsuranceCard({\n      name: '医療保険',\n      description: '病気やケガに備える永続保障',\n      insuranceType: 'medical',\n      power: 4,\n      cost: 3,\n      coverage: 100,\n      ageBonus: ageBonus\n    }))\n\n    cards.push(this.createInsuranceCard({\n      name: '生命保険',\n      description: '家族を守る永続保障',\n      insuranceType: 'life',\n      power: 5,\n      cost: 4,\n      coverage: 200,\n      ageBonus: ageBonus\n    }))\n\n    cards.push(this.createInsuranceCard({\n      name: '収入保障保険',\n      description: '働けなくなった時の永続保障',\n      insuranceType: 'income',\n      power: 4,\n      cost: 3,\n      coverage: 150,\n      ageBonus: ageBonus\n    }))\n\n    return cards\n  }\n\n  /**\n   * 拡張保険カードを生成（簡素化版：すべて永続効果）\n   */\n  static createExtendedInsuranceCards(stage: GameStage = 'youth'): Card[] {\n    const extendedCards: Card[] = []\n    \n    // 年齢ボーナスの設定\n    const ageBonus = stage === 'middle' ? 0.5 : stage === 'fulfillment' ? 1.0 : 0\n    \n    // 基本保険カード\n    const baseInsurances = [\n      { name: '医療保険', insuranceType: 'medical' as InsuranceType, power: 5, cost: 4, coverage: 100 },\n      { name: '生命保険', insuranceType: 'life' as InsuranceType, power: 6, cost: 5, coverage: 200 },\n      { name: '収入保障保険', insuranceType: 'income' as InsuranceType, power: 5, cost: 4, coverage: 150 }\n    ]\n    \n    // 基本保険カードを追加\n    baseInsurances.forEach(insurance => {\n      extendedCards.push(this.createInsuranceCard({\n        name: insurance.name,\n        description: `${insurance.name}の永続保障`,\n        insuranceType: insurance.insuranceType,\n        power: insurance.power,\n        cost: insurance.cost,\n        coverage: insurance.coverage,\n        ageBonus: ageBonus\n      }))\n    })\n\n    // 追加の特殊保険カード\n    const additionalInsurances = [\n      { name: '傷害保険', insuranceType: 'medical' as InsuranceType, power: 4, cost: 3, coverage: 80 },\n      { name: '就業不能保険', insuranceType: 'income' as InsuranceType, power: 7, cost: 6, coverage: 250 },\n      { name: '介護保険', insuranceType: 'medical' as InsuranceType, power: 6, cost: 5, coverage: 180 },\n      { name: 'がん保険', insuranceType: 'medical' as InsuranceType, power: 5, cost: 4, coverage: 120 },\n      { name: '個人年金保険', insuranceType: 'income' as InsuranceType, power: 4, cost: 4, coverage: 100 },\n      { name: '学資保険', insuranceType: 'life' as InsuranceType, power: 4, cost: 3, coverage: 90 }\n    ]\n    \n    // 追加保険カードを追加\n    additionalInsurances.forEach(insurance => {\n      extendedCards.push(this.createInsuranceCard({\n        name: insurance.name,\n        description: `${insurance.name}の永続保障`,\n        insuranceType: insurance.insuranceType,\n        power: insurance.power,\n        cost: insurance.cost,\n        coverage: insurance.coverage,\n        ageBonus: ageBonus\n      }))\n    })\n\n    return extendedCards\n  }\n\n  /**\n   * 保険種類選択肢を生成（定期保険と終身保険の選択肢）\n   */\n  static createInsuranceTypeChoices(stage: GameStage = 'youth'): InsuranceTypeChoice[] {\n    const choices: InsuranceTypeChoice[] = []\n    \n    // 年齢ボーナスの設定\n    const ageBonus = stage === 'middle' ? 0.5 : stage === 'fulfillment' ? 1.0 : 0\n    \n    // 基本保険タイプの定義\n    const baseInsuranceTypes = [\n      { \n        type: 'medical' as InsuranceType, \n        name: '医療保険', \n        description: '病気やケガに備える保障',\n        power: 5, \n        baseCost: 4, \n        coverage: 100 \n      },\n      { \n        type: 'life' as InsuranceType, \n        name: '生命保険', \n        description: '家族を守る保障',\n        power: 6, \n        baseCost: 5, \n        coverage: 200 \n      },\n      { \n        type: 'income' as InsuranceType, \n        name: '収入保障保険', \n        description: '働けなくなった時の保障',\n        power: 5, \n        baseCost: 4, \n        coverage: 150 \n      }\n    ]\n    \n    // 3つからランダムに選択（重複なし）\n    const availableTypes = [...baseInsuranceTypes]\n    for (let i = 0; i < 3 && availableTypes.length > 0; i++) {\n      const randomIndex = Math.floor(Math.random() * availableTypes.length)\n      const selectedType = availableTypes.splice(randomIndex, 1)[0]\n      \n      // 定期保険の期間設定（10ターン）\n      const termDuration = 10\n      \n      // 定期保険のコスト（基本コストの70%）\n      const termCost = Math.ceil(selectedType.baseCost * 0.7)\n      \n      // 終身保険のコスト（基本コスト）\n      const wholeLifeCost = selectedType.baseCost\n      \n      const choice: InsuranceTypeChoice = {\n        insuranceType: selectedType.type,\n        name: selectedType.name,\n        description: selectedType.description,\n        baseCard: {\n          name: selectedType.name,\n          description: selectedType.description,\n          type: 'insurance',\n          power: selectedType.power,\n          cost: selectedType.baseCost, // ベースコスト\n          insuranceType: selectedType.type,\n          coverage: selectedType.coverage,\n          effects: [{\n            type: 'shield',\n            value: selectedType.coverage,\n            description: `${selectedType.coverage}ポイントの保障`\n          }],\n          ageBonus: ageBonus\n        },\n        termOption: {\n          cost: termCost,\n          duration: termDuration,\n          description: `${termDuration}ターン限定の保障（低コスト）`\n        },\n        wholeLifeOption: {\n          cost: wholeLifeCost,\n          description: '生涯にわたる永続保障（高コスト）'\n        }\n      }\n      \n      choices.push(choice)\n    }\n    \n    return choices\n  }\n\n  /**\n   * 定期保険カードを作成\n   */\n  static createTermInsuranceCard(choice: InsuranceTypeChoice): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'insurance',\n      name: `定期${choice.name}`,\n      description: `${choice.baseCard.description}（${choice.termOption.duration}ターン限定）`,\n      power: choice.baseCard.power,\n      cost: choice.termOption.cost,\n      insuranceType: choice.insuranceType,\n      coverage: choice.baseCard.coverage,\n      effects: choice.baseCard.effects,\n      ageBonus: choice.baseCard.ageBonus,\n      durationType: 'term',\n      remainingTurns: choice.termOption.duration\n    })\n  }\n\n  /**\n   * 終身保険カードを作成\n   */\n  static createWholeLifeInsuranceCard(choice: InsuranceTypeChoice): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'insurance',\n      name: `終身${choice.name}`,\n      description: `${choice.baseCard.description}（永続保障）`,\n      power: choice.baseCard.power,\n      cost: choice.wholeLifeOption.cost,\n      insuranceType: choice.insuranceType,\n      coverage: choice.baseCard.coverage,\n      effects: choice.baseCard.effects,\n      ageBonus: choice.baseCard.ageBonus,\n      durationType: 'whole_life'\n    })\n  }\n\n  /**\n   * チャレンジカードを生成\n   */\n  static createChallengeCards(stage: GameStage): Card[] {\n    const cards: Card[] = []\n\n    if (stage === 'youth') {\n      // 青年期のチャレンジ\n      cards.push(this.createChallengeCard({\n        name: '就職活動',\n        description: '新たなキャリアの始まり',\n        power: 5,\n        dreamCategory: 'physical' // 体力系\n      }))\n\n      cards.push(this.createChallengeCard({\n        name: '一人暮らし',\n        description: '独立への第一歩',\n        power: 4,\n        dreamCategory: 'physical' // 体力系\n      }))\n\n      cards.push(this.createChallengeCard({\n        name: '資格試験',\n        description: 'スキルアップのチャンス',\n        power: 6,\n        dreamCategory: 'intellectual' // 知識系\n      }))\n    } else if (stage === 'middle') {\n      // 中年期のチャレンジ\n      cards.push(this.createChallengeCard({\n        name: '子育て',\n        description: '家族の成長',\n        power: 8,\n        dreamCategory: 'physical' // 体力系\n      }))\n\n      cards.push(this.createChallengeCard({\n        name: '住宅購入',\n        description: '大きな決断',\n        power: 10,\n        dreamCategory: 'physical' // 体力系\n      }))\n\n      cards.push(this.createChallengeCard({\n        name: '親の介護',\n        description: '家族の支え合い',\n        power: 9,\n        dreamCategory: 'mixed' // 複合系\n      }))\n    } else {\n      // 充実期のチャレンジ\n      cards.push(this.createChallengeCard({\n        name: '定年退職',\n        description: '新しい人生のスタート',\n        power: 12,\n        dreamCategory: 'intellectual' // 知識系\n      }))\n\n      cards.push(this.createChallengeCard({\n        name: '健康管理',\n        description: '健やかな老後のために',\n        power: 11,\n        dreamCategory: 'mixed' // 複合系\n      }))\n    }\n\n    return cards\n  }\n\n  /**\n   * 落とし穴カードを生成\n   */\n  static createPitfallCards(): Card[] {\n    const cards: Card[] = []\n\n    cards.push(this.createPitfallCard({\n      name: '急な入院',\n      description: '予期せぬ医療費',\n      power: 0,\n      penalty: 3\n    }))\n\n    cards.push(this.createPitfallCard({\n      name: '失業',\n      description: '収入の途絶',\n      power: 0,\n      penalty: 4\n    }))\n\n    cards.push(this.createPitfallCard({\n      name: '事故',\n      description: '予期せぬトラブル',\n      power: 0,\n      penalty: 2\n    }))\n\n    return cards\n  }\n\n  /**\n   * 人生カードを作成\n   */\n  private static createLifeCard(params: {\n    name: string\n    description: string\n    category: LifeCardCategory\n    power: number\n    cost: number\n  }): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'life',\n      name: params.name,\n      description: params.description,\n      power: params.power,\n      cost: params.cost,\n      category: params.category,\n      effects: []\n    })\n  }\n\n  /**\n   * 保険カードを作成（Phase 2対応）\n   */\n  private static createInsuranceCard(params: {\n    name: string\n    description: string\n    insuranceType: InsuranceType\n    power: number\n    cost: number\n    coverage: number\n    ageBonus?: number\n  }): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'insurance',\n      name: params.name,\n      description: params.description,\n      power: params.power,\n      cost: params.cost,\n      insuranceType: params.insuranceType,\n      coverage: params.coverage,\n      effects: [{\n        type: 'shield',\n        value: params.coverage,\n        description: `${params.coverage}ポイントの保障`\n      }],\n      ageBonus: params.ageBonus || 0\n    })\n  }\n\n  /**\n   * チャレンジカードを作成\n   */\n  private static createChallengeCard(params: {\n    name: string\n    description: string\n    power: number\n    dreamCategory?: DreamCategory\n  }): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'life', // チャレンジカードも人生カードの一種\n      name: params.name,\n      description: params.description,\n      power: params.power,\n      cost: 0,\n      effects: [],\n      dreamCategory: params.dreamCategory\n    })\n  }\n\n  /**\n   * 落とし穴カードを作成\n   */\n  private static createPitfallCard(params: {\n    name: string\n    description: string\n    power: number\n    penalty: number\n  }): Card {\n    return new Card({\n      id: this.generateId(),\n      type: 'pitfall',\n      name: params.name,\n      description: params.description,\n      power: params.power,\n      cost: 0,\n      penalty: params.penalty,\n      effects: []\n    })\n  }\n}","import { Card } from '../entities/Card'\nimport { Deck } from '../entities/Deck'\nimport type { GameConfig } from '../types/game.types'\n\n/**\n * カード管理の状態\n */\nexport interface CardManagerState {\n  hand: Card[]\n  discardPile: Card[]\n  playerDeck: Deck\n  challengeDeck: Deck\n  selectedCards: Card[]\n  cardChoices?: Card[]\n}\n\n/**\n * カードドロー結果\n */\nexport interface DrawResult {\n  drawnCards: Card[]\n  discardedCards: Card[] // 手札上限により捨てられたカード\n}\n\n/**\n * CardManagerのインターフェース\n */\nexport interface ICardManager {\n  /**\n   * カード管理状態を初期化\n   */\n  initialize(playerDeck: Deck, challengeDeck: Deck, config: GameConfig): void\n\n  /**\n   * 現在の状態を取得\n   */\n  getState(): CardManagerState\n\n  /**\n   * 状態を復元\n   */\n  setState(state: CardManagerState): void\n\n  /**\n   * 指定した枚数のカードをドロー\n   */\n  drawCards(count: number): DrawResult\n\n  /**\n   * カードを選択/選択解除\n   */\n  toggleCardSelection(card: Card): boolean\n\n  /**\n   * 選択中のカードをクリア\n   */\n  clearSelection(): void\n\n  /**\n   * 選択されたカードを手札から捨て札に移動\n   */\n  discardSelectedCards(): Card[]\n\n  /**\n   * カードを手札に追加\n   */\n  addToHand(card: Card): void\n\n  /**\n   * カードを捨て札に追加\n   */\n  addToDiscardPile(card: Card): void\n\n  /**\n   * カードをプレイヤーデッキに追加\n   */\n  addToPlayerDeck(card: Card): void\n\n  /**\n   * 手札上限チェックと調整\n   */\n  enforceHandLimit(): Card[]\n\n  /**\n   * カード選択肢を設定\n   */\n  setCardChoices(choices: Card[]): void\n\n  /**\n   * カード選択肢をクリア\n   */\n  clearCardChoices(): void\n\n  /**\n   * 指定IDのカードを選択肢から取得\n   */\n  getCardChoiceById(cardId: string): Card | undefined\n}\n\n/**\n * カード管理サービス\n */\nexport class CardManager implements ICardManager {\n  private hand: Card[] = []\n  private discardPile: Card[] = []\n  private playerDeck: Deck = new Deck('Player Deck')\n  private challengeDeck: Deck = new Deck('Challenge Deck')\n  private selectedCards: Card[] = []\n  private cardChoices?: Card[]\n  private config?: GameConfig\n\n  /**\n   * カード管理状態を初期化\n   */\n  initialize(playerDeck: Deck, challengeDeck: Deck, config: GameConfig): void {\n    this.playerDeck = playerDeck\n    this.challengeDeck = challengeDeck\n    this.hand = []\n    this.discardPile = []\n    this.selectedCards = []\n    this.cardChoices = undefined\n    this.config = config\n  }\n\n  /**\n   * 現在の状態を取得\n   */\n  getState(): CardManagerState {\n    return {\n      hand: [...this.hand],\n      discardPile: [...this.discardPile],\n      playerDeck: this.playerDeck.clone(),\n      challengeDeck: this.challengeDeck.clone(),\n      selectedCards: [...this.selectedCards],\n      cardChoices: this.cardChoices ? [...this.cardChoices] : undefined\n    }\n  }\n\n  /**\n   * 状態を復元\n   */\n  setState(state: CardManagerState): void {\n    this.hand = [...state.hand]\n    this.discardPile = [...state.discardPile]\n    this.playerDeck = state.playerDeck.clone()\n    this.challengeDeck = state.challengeDeck.clone()\n    this.selectedCards = [...state.selectedCards]\n    this.cardChoices = state.cardChoices ? [...state.cardChoices] : undefined\n  }\n\n  /**\n   * 指定した枚数のカードをドロー\n   */\n  drawCards(count: number): DrawResult {\n    if (!this.config) {\n      throw new Error('CardManager not initialized')\n    }\n\n    const drawnCards: Card[] = []\n    \n    for (let i = 0; i < count; i++) {\n      // デッキが空の場合、捨て札をシャッフルして山札に戻す\n      if (this.playerDeck.isEmpty() && this.discardPile.length > 0) {\n        this.reshuffleDeck()\n      }\n      \n      const card = this.playerDeck.drawCard()\n      if (card) {\n        drawnCards.push(card)\n        this.hand.push(card)\n      }\n    }\n    \n    // 手札上限チェック\n    const discardedCards = this.enforceHandLimit()\n    \n    return {\n      drawnCards,\n      discardedCards\n    }\n  }\n\n  /**\n   * カードを選択/選択解除\n   */\n  toggleCardSelection(card: Card): boolean {\n    const index = this.selectedCards.findIndex(c => c.id === card.id)\n    \n    if (index !== -1) {\n      this.selectedCards.splice(index, 1)\n      return false // 選択解除\n    } else {\n      this.selectedCards.push(card)\n      return true // 選択\n    }\n  }\n\n  /**\n   * 選択中のカードをクリア\n   */\n  clearSelection(): void {\n    this.selectedCards = []\n  }\n\n  /**\n   * 選択されたカードを手札から捨て札に移動\n   */\n  discardSelectedCards(): Card[] {\n    const discardedCards: Card[] = []\n    \n    this.selectedCards.forEach(card => {\n      const index = this.hand.findIndex(c => c.id === card.id)\n      if (index !== -1) {\n        const removedCard = this.hand.splice(index, 1)[0]\n        this.discardPile.push(removedCard)\n        discardedCards.push(removedCard)\n      }\n    })\n    \n    this.selectedCards = []\n    return discardedCards\n  }\n\n  /**\n   * カードを手札に追加\n   */\n  addToHand(card: Card): void {\n    this.hand.push(card)\n  }\n\n  /**\n   * カードを捨て札に追加\n   */\n  addToDiscardPile(card: Card): void {\n    this.discardPile.push(card)\n  }\n\n  /**\n   * カードをプレイヤーデッキに追加\n   */\n  addToPlayerDeck(card: Card): void {\n    this.playerDeck.addCard(card)\n  }\n\n  /**\n   * 手札上限チェックと調整\n   */\n  enforceHandLimit(): Card[] {\n    if (!this.config) {\n      return []\n    }\n\n    const discardedCards: Card[] = []\n    \n    // 手札上限チェック - 古いカードを捨て札に\n    while (this.hand.length > this.config.maxHandSize) {\n      const discarded = this.hand.shift()\n      if (discarded) {\n        this.discardPile.push(discarded)\n        discardedCards.push(discarded)\n      }\n    }\n    \n    return discardedCards\n  }\n\n  /**\n   * カード選択肢を設定\n   */\n  setCardChoices(choices: Card[]): void {\n    this.cardChoices = [...choices]\n  }\n\n  /**\n   * カード選択肢をクリア\n   */\n  clearCardChoices(): void {\n    this.cardChoices = undefined\n  }\n\n  /**\n   * 指定IDのカードを選択肢から取得\n   */\n  getCardChoiceById(cardId: string): Card | undefined {\n    return this.cardChoices?.find(card => card.id === cardId)\n  }\n\n  /**\n   * 捨て札をシャッフルして山札に戻す\n   */\n  private reshuffleDeck(): void {\n    this.playerDeck.addCards(this.discardPile)\n    this.playerDeck.shuffle()\n    this.discardPile = []\n  }\n}","import type { GameStage, Difficulty, InsuranceType } from './card.types'\nimport type { Card } from '../entities/Card'\nimport type { Deck } from '../entities/Deck'\n\n/**\n * ゲーム状態\n */\nexport type GameStatus = \n  | 'not_started'\n  | 'in_progress'\n  | 'stage_clear'\n  | 'game_over'\n  | 'victory'\n\n/**\n * ゲームフェーズ\n */\nexport type GamePhase = \n  | 'setup'                    // セットアップ\n  | 'draw'                     // ドロー\n  | 'challenge'                // チャレンジ\n  | 'resolution'               // 結果処理\n  | 'card_selection'           // カード選択（チャレンジ成功時）\n  | 'insurance_type_selection' // 保険種類選択（チャレンジ成功時）\n  | 'upgrade'                  // アップグレード（ステージクリア時）\n  | 'end'                     // 終了\n\n/**\n * プレイヤー統計\n */\nexport interface PlayerStats {\n  totalChallenges: number\n  successfulChallenges: number\n  failedChallenges: number\n  cardsAcquired: number\n  highestVitality: number\n  turnsPlayed: number\n}\n\n/**\n * ゲーム設定\n */\nexport interface GameConfig {\n  difficulty: Difficulty\n  startingVitality: number\n  startingHandSize: number\n  maxHandSize: number\n  dreamCardCount: number // 最終試練で選ぶ夢カードの数\n}\n\n/**\n * 保険種類選択肢\n */\nexport interface InsuranceTypeChoice {\n  insuranceType: InsuranceType\n  name: string\n  description: string\n  baseCard: Omit<Card, 'id' | 'durationType' | 'remainingTurns'>\n  termOption: {\n    cost: number\n    duration: number // ターン数\n    description: string\n  }\n  wholeLifeOption: {\n    cost: number\n    description: string\n  }\n}\n\n/**\n * チャレンジ結果\n */\nexport interface ChallengeResult {\n  success: boolean\n  playerPower: number\n  challengePower: number\n  rewards?: Card[]\n  cardChoices?: Card[]  // カード選択肢（3枚）\n  insuranceTypeChoices?: InsuranceTypeChoice[]  // 保険種類選択肢（3種類）\n  vitalityChange: number\n  message: string\n  // Phase 3: パワー計算の詳細\n  powerBreakdown?: {\n    base: number\n    insurance: number\n    burden: number\n    total: number\n  }\n}\n\n/**\n * 保険期限切れ通知\n */\nexport interface InsuranceExpirationNotice {\n  expiredCards: Card[]\n  message: string\n  showRenewalOption: boolean\n  turnNumber: number\n}\n\n/**\n * ターン結果（期限切れ通知を含む）\n */\nexport interface TurnResult {\n  insuranceExpirations?: InsuranceExpirationNotice\n  newExpiredCount: number\n  remainingInsuranceCount: number\n}\n\n/**\n * 保険種類選択結果\n */\nexport interface InsuranceTypeSelectionResult {\n  success: boolean\n  selectedCard?: Card\n  message: string\n}\n\n/**\n * ゲーム状態\n */\n/**\n * 年齢別パラメータ\n */\nexport interface AgeParameters {\n  maxVitality: number\n  label: string\n  ageMultiplier: number  // 保険効果の年齢倍率\n}\n\n/**\n * 年齢別設定\n */\nexport const AGE_PARAMETERS: Record<GameStage, AgeParameters> = {\n  youth: { \n    maxVitality: 35, \n    label: '青年期',\n    ageMultiplier: 0\n  },\n  middle: { \n    maxVitality: 30, \n    label: '中年期',\n    ageMultiplier: 0.5\n  },\n  fulfillment: { \n    maxVitality: 27, \n    label: '充実期',\n    ageMultiplier: 1.0\n  }\n}\n\n/**\n * 夢カードの年齢調整値\n */\nexport const DREAM_AGE_ADJUSTMENTS = {\n  physical: 3,      // 体力系：年齢で+3パワー必要\n  intellectual: -2, // 知識系：年齢で-2パワー\n  mixed: 0         // 複合系：変化なし\n}\n\n\n\nexport interface IGameState {\n  id: string\n  status: GameStatus\n  phase: GamePhase\n  stage: GameStage\n  turn: number\n  vitality: number\n  maxVitality: number\n  \n  // デッキ関連\n  playerDeck: Deck\n  hand: Card[]\n  discardPile: Card[]\n  challengeDeck: Deck\n  \n  // チャレンジ関連\n  currentChallenge?: Card\n  selectedCards: Card[]\n  cardChoices?: Card[]  // 現在の選択肢カード\n  insuranceTypeChoices?: InsuranceTypeChoice[]  // 現在の保険種類選択肢\n  \n  // Phase 2-4: 保険カード管理\n  insuranceCards?: Card[]  // 現在有効な保険カード\n  expiredInsurances?: Card[]  // 期限切れになった保険カード\n  \n  // Phase 3: 保険料負担\n  insuranceBurden?: number  // 保険料による負担（負の値）\n  \n  \n  // 統計\n  stats: PlayerStats\n  \n  // 設定\n  config: GameConfig\n  \n  // タイムスタンプ\n  startedAt?: Date\n  completedAt?: Date\n}\n","import { Card } from './Card'\nimport { Deck } from './Deck'\nimport { CardFactory } from '../services/CardFactory'\nimport { CardManager, type ICardManager } from '../services/CardManager'\nimport type {\n  IGameState,\n  GameStatus,\n  GamePhase,\n  GameConfig,\n  PlayerStats,\n  ChallengeResult,\n  TurnResult,\n  InsuranceExpirationNotice,\n  InsuranceTypeChoice,\n  InsuranceTypeSelectionResult\n} from '../types/game.types'\nimport { AGE_PARAMETERS, DREAM_AGE_ADJUSTMENTS } from '../types/game.types'\nimport type { GameStage } from '../types/card.types'\n\n/**\n * ゲームエンティティ\n */\nexport class Game implements IGameState {\n  id: string\n  status: GameStatus\n  phase: GamePhase\n  stage: GameStage\n  turn: number\n  vitality: number\n  maxVitality: number\n  \n  // カード管理を移譲\n  private cardManager: ICardManager\n  \n  currentChallenge?: Card\n  \n  stats: PlayerStats\n  config: GameConfig\n  \n  // Phase 2-4: 保険カード管理\n  insuranceCards: Card[]\n  expiredInsurances: Card[]\n  \n  // Phase 3: 保険料負担\n  insuranceBurden: number\n  \n  // 保険種類選択\n  insuranceTypeChoices?: InsuranceTypeChoice[]\n  \n  \n  startedAt?: Date\n  completedAt?: Date\n\n  constructor(config: GameConfig) {\n    this.id = this.generateId()\n    this.status = 'not_started'\n    this.phase = 'setup'\n    this.stage = 'youth'\n    this.turn = 0\n    this.vitality = config.startingVitality\n    this.maxVitality = AGE_PARAMETERS[this.stage].maxVitality\n    \n    // CardManagerを初期化\n    this.cardManager = new CardManager()\n    const playerDeck = new Deck('Player Deck')\n    const challengeDeck = new Deck('Challenge Deck')\n    \n    // 初期デッキを作成\n    const initialCards = CardFactory.createStarterLifeCards()\n    initialCards.forEach(card => playerDeck.addCard(card))\n    \n    // チャレンジデッキを作成\n    const challengeCards = CardFactory.createChallengeCards(this.stage)\n    challengeCards.forEach(card => challengeDeck.addCard(card))\n    \n    this.cardManager.initialize(playerDeck, challengeDeck, config)\n    \n    this.stats = {\n      totalChallenges: 0,\n      successfulChallenges: 0,\n      failedChallenges: 0,\n      cardsAcquired: 0,\n      highestVitality: config.startingVitality,\n      turnsPlayed: 0\n    }\n    \n    this.config = config\n    \n    // Phase 2-4: 保険カード管理の初期化\n    this.insuranceCards = []\n    this.expiredInsurances = []\n    \n    // Phase 3: 保険料負担の初期化\n    this.insuranceBurden = 0\n    \n  }\n\n  /**\n   * ゲームIDを生成\n   */\n  private generateId(): string {\n    return `game_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * ゲーム開始\n   */\n  start(): void {\n    if (this.status !== 'not_started') {\n      throw new Error('Game has already started')\n    }\n    \n    this.status = 'in_progress'\n    this.startedAt = new Date()\n    this.phase = 'draw'\n    this.turn = 1\n    this.stats.turnsPlayed = 1\n  }\n\n  /**\n   * カードをドロー\n   */\n  drawCards(count: number): Card[] {\n    const result = this.cardManager.drawCards(count)\n    return result.drawnCards\n  }\n\n\n  /**\n   * チャレンジを開始\n   */\n  startChallenge(challengeCard: Card): void {\n    if (this.phase !== 'draw') {\n      throw new Error('Can only start challenge during draw phase')\n    }\n    \n    this.currentChallenge = challengeCard\n    this.cardManager.clearSelection()\n    this.phase = 'challenge'\n  }\n\n  /**\n   * カードを選択/選択解除\n   */\n  toggleCardSelection(card: Card): boolean {\n    return this.cardManager.toggleCardSelection(card)\n  }\n\n  /**\n   * チャレンジを解決\n   */\n  resolveChallenge(): ChallengeResult {\n    if (!this.currentChallenge || this.phase !== 'challenge') {\n      throw new Error('No active challenge to resolve')\n    }\n    \n    // Phase 3: 詳細なパワー計算\n    const selectedCards = this.cardManager.getState().selectedCards\n    const powerBreakdown = this.calculateTotalPower(selectedCards)\n    const playerPower = powerBreakdown.total\n    \n    // Phase 4: 夢カードの場合は年齢調整を適用\n    const challengePower = this.getDreamRequiredPower(this.currentChallenge)\n    \n    // 成功判定\n    const success = playerPower >= challengePower\n    \n    // 統計更新\n    this.stats.totalChallenges++\n    if (success) {\n      this.stats.successfulChallenges++\n    } else {\n      this.stats.failedChallenges++\n    }\n    \n    // 活力変更\n    let vitalityChange = 0\n    if (success) {\n      vitalityChange = Math.floor(playerPower - challengePower) / 2\n    } else {\n      vitalityChange = -(challengePower - playerPower)\n    }\n    \n    this.updateVitality(vitalityChange)\n    \n    // 使用したカードを捨て札に\n    this.cardManager.discardSelectedCards()\n    \n    // 結果作成\n    const result: ChallengeResult = {\n      success,\n      playerPower,\n      challengePower,\n      vitalityChange,\n      message: success \n        ? `チャレンジ成功！ +${vitalityChange} 活力`\n        : `チャレンジ失敗... ${vitalityChange} 活力`,\n      // Phase 3: パワー計算の詳細を含める\n      powerBreakdown\n    }\n    \n    // 成功時は保険種類選択フェーズへ\n    if (success) {\n      // 保険種類選択肢を生成\n      const insuranceTypeChoices = CardFactory.createInsuranceTypeChoices(this.stage)\n      this.insuranceTypeChoices = insuranceTypeChoices\n      result.insuranceTypeChoices = insuranceTypeChoices\n      this.phase = 'insurance_type_selection'\n    } else {\n      // 失敗時は通常の解決フェーズへ\n      this.phase = 'resolution'\n    }\n    \n    this.currentChallenge = undefined\n    this.cardManager.clearSelection()\n    \n    return result\n  }\n\n  /**\n   * カードを選択してデッキに追加（従来のカード選択フェーズ用）\n   */\n  selectCard(cardId: string): boolean {\n    if (this.phase !== 'card_selection') {\n      throw new Error('Not in card selection phase')\n    }\n    \n    const selectedCard = this.cardManager.getCardChoiceById(cardId)\n    if (!selectedCard) {\n      throw new Error('Invalid card selection')\n    }\n    \n    // カードをデッキに追加\n    this.cardManager.addToPlayerDeck(selectedCard)\n    this.stats.cardsAcquired++\n    \n    // Phase 2-4: 保険カードの場合は管理リストに追加\n    if (selectedCard.type === 'insurance') {\n      this.insuranceCards.push(selectedCard)\n      // Phase 3: 保険料負担を更新\n      this.updateInsuranceBurden()\n    }\n    \n    // 選択肢をクリア\n    this.cardManager.clearCardChoices()\n    \n    // 解決フェーズに移行（ターン終了可能状態）\n    this.phase = 'resolution'\n    \n    return true\n  }\n\n  /**\n   * 保険種類を選択してカードを作成・追加\n   */\n  selectInsuranceType(insuranceType: string, durationType: 'term' | 'whole_life'): InsuranceTypeSelectionResult {\n    if (this.phase !== 'insurance_type_selection') {\n      throw new Error('Not in insurance type selection phase')\n    }\n    \n    if (!this.insuranceTypeChoices) {\n      throw new Error('No insurance type choices available')\n    }\n    \n    // 指定された保険種類の選択肢を探す\n    const choice = this.insuranceTypeChoices.find(choice => choice.insuranceType === insuranceType)\n    if (!choice) {\n      return {\n        success: false,\n        message: 'Invalid insurance type selection'\n      }\n    }\n    \n    // 選択された種類に応じてカードを作成\n    let selectedCard: Card\n    if (durationType === 'term') {\n      selectedCard = CardFactory.createTermInsuranceCard(choice)\n    } else {\n      selectedCard = CardFactory.createWholeLifeInsuranceCard(choice)\n    }\n    \n    // カードをデッキに追加\n    this.cardManager.addToPlayerDeck(selectedCard)\n    this.stats.cardsAcquired++\n    \n    // 保険カードの場合は管理リストに追加\n    this.insuranceCards.push(selectedCard)\n    // Phase 3: 保険料負担を更新\n    this.updateInsuranceBurden()\n    \n    // 選択肢をクリア\n    this.insuranceTypeChoices = undefined\n    \n    // 解決フェーズに移行（ターン終了可能状態）\n    this.phase = 'resolution'\n    \n    const durationText = durationType === 'term' \n      ? `定期保険（${choice.termOption.duration}ターン）` \n      : '終身保険'\n    \n    return {\n      success: true,\n      selectedCard,\n      message: `${choice.name}（${durationText}）を選択しました。コスト: ${selectedCard.cost}`\n    }\n  }\n\n  /**\n   * 活力を更新\n   */\n  private updateVitality(change: number): void {\n    this.vitality = Math.max(0, Math.min(this.maxVitality * 2, this.vitality + change))\n    this.stats.highestVitality = Math.max(this.stats.highestVitality, this.vitality)\n    \n    // ゲームオーバー判定\n    if (this.vitality <= 0) {\n      this.status = 'game_over'\n      this.completedAt = new Date()\n    }\n  }\n\n\n  /**\n   * ステージに応じて活力上限を更新\n   */\n  private updateMaxVitalityForAge(): void {\n    const newMaxVitality = AGE_PARAMETERS[this.stage].maxVitality\n    this.maxVitality = newMaxVitality\n    \n    // 現在の活力が新しい上限を超えていたら調整\n    if (this.vitality > newMaxVitality) {\n      this.vitality = newMaxVitality\n    }\n  }\n\n  /**\n   * 次のターンへ\n   */\n  nextTurn(): TurnResult {\n    if (this.status !== 'in_progress') {\n      throw new Error('Game is not in progress')\n    }\n    \n    this.turn++\n    this.stats.turnsPlayed++\n    this.phase = 'draw'\n    \n    // 定期保険の期限を1ターン減らし、期限切れ通知を取得\n    const expirationResult = this.updateInsuranceExpirations()\n    \n    // ターン開始時のドロー\n    this.drawCards(1)\n    \n    // ターン結果を返す\n    return {\n      insuranceExpirations: expirationResult,\n      newExpiredCount: expirationResult?.expiredCards.length || 0,\n      remainingInsuranceCount: this.insuranceCards.length\n    }\n  }\n\n  /**\n   * ステージを進める\n   */\n  advanceStage(): void {\n    if (this.stage === 'youth') {\n      this.stage = 'middle'\n      this.updateMaxVitalityForAge()\n    } else if (this.stage === 'middle') {\n      this.stage = 'fulfillment'\n      this.updateMaxVitalityForAge()\n    } else {\n      // 最終ステージクリア\n      this.status = 'victory'\n      this.completedAt = new Date()\n    }\n  }\n\n  /**\n   * 手札を取得\n   */\n  get hand(): Card[] {\n    return this.cardManager.getState().hand\n  }\n\n  /**\n   * 捨て札を取得\n   */\n  get discardPile(): Card[] {\n    return this.cardManager.getState().discardPile\n  }\n\n  /**\n   * プレイヤーデッキを取得\n   */\n  get playerDeck(): Deck {\n    return this.cardManager.getState().playerDeck\n  }\n\n  /**\n   * チャレンジデッキを取得\n   */\n  get challengeDeck(): Deck {\n    return this.cardManager.getState().challengeDeck\n  }\n\n  /**\n   * 選択中のカードを取得\n   */\n  get selectedCards(): Card[] {\n    return this.cardManager.getState().selectedCards\n  }\n\n  /**\n   * カード選択肢を取得\n   */\n  get cardChoices(): Card[] | undefined {\n    return this.cardManager.getState().cardChoices\n  }\n\n  /**\n   * 保険種類選択肢を取得\n   */\n  get currentInsuranceTypeChoices(): InsuranceTypeChoice[] | undefined {\n    return this.insuranceTypeChoices\n  }\n\n  /**\n   * ゲームが進行中かどうか\n   */\n  isInProgress(): boolean {\n    return this.status === 'in_progress'\n  }\n\n  /**\n   * ゲームが終了しているかどうか\n   */\n  isCompleted(): boolean {\n    return this.status === 'game_over' || this.status === 'victory'\n  }\n\n  /**\n   * Phase 4: 夢カードの必要パワーを年齢調整込みで計算\n   */\n  getDreamRequiredPower(challenge: Card): number {\n    // 夢カードでない場合は基本パワーをそのまま返す\n    if (!challenge.isDreamCard() || !challenge.dreamCategory) {\n      return challenge.power\n    }\n    \n    // 青年期は調整なし\n    if (this.stage === 'youth') {\n      return challenge.power\n    }\n    \n    // 中年期・充実期の年齢調整を適用\n    const adjustment = DREAM_AGE_ADJUSTMENTS[challenge.dreamCategory]\n    const adjustedPower = challenge.power + adjustment\n    \n    // 最小値は1\n    return Math.max(1, adjustedPower)\n  }\n\n  /**\n   * Phase 2-4: 期限切れの保険カードを取得（通知用）\n   */\n  getExpiredInsurances(): Card[] {\n    return [...this.expiredInsurances]\n  }\n\n  /**\n   * Phase 2-4: 期限切れ通知をクリア\n   */\n  clearExpiredInsurances(): void {\n    this.expiredInsurances = []\n  }\n\n  /**\n   * 期限が近い保険カードを取得（残り2ターン以下）\n   */\n  getExpiringsSoonInsurances(): Card[] {\n    return this.insuranceCards.filter(card => \n      card.isTermInsurance() && \n      card.remainingTurns !== undefined && \n      card.remainingTurns <= 2 && \n      card.remainingTurns > 0\n    )\n  }\n\n  /**\n   * 保険期限切れの警告メッセージを取得\n   */\n  getExpirationWarnings(): string[] {\n    const expiringSoon = this.getExpiringsSoonInsurances()\n    return expiringSoon.map(card => \n      `⚠️ 「${card.name}」の期限まであと${card.remainingTurns}ターンです`\n    )\n  }\n\n  /**\n   * Phase 2-4: 現在有効な保険カードを取得\n   */\n  getActiveInsurances(): Card[] {\n    return [...this.insuranceCards]\n  }\n\n  /**\n   * Phase 3: 保険料負担を計算\n   * 有効な保険カード3枚ごとに-1の負担\n   */\n  calculateInsuranceBurden(): number {\n    const activeInsuranceCount = this.insuranceCards.length\n    // 3枚ごとに-1の負担（切り捨て）\n    const burden = Math.floor(activeInsuranceCount / 3)\n    return burden === 0 ? 0 : -burden // Ensure we return 0 not -0\n  }\n\n  /**\n   * Phase 3: 保険料負担を更新\n   */\n  private updateInsuranceBurden(): void {\n    this.insuranceBurden = this.calculateInsuranceBurden()\n  }\n\n  /**\n   * 定期保険の期限を更新し、期限切れをチェック\n   */\n  private updateInsuranceExpirations(): InsuranceExpirationNotice | undefined {\n    // 期限切れになった保険を一時的に保存\n    const nowExpired: Card[] = []\n    \n    // 全ての保険カードの期限を更新\n    this.insuranceCards.forEach(card => {\n      if (card.isTermInsurance()) {\n        card.decrementTurn()\n        \n        // 期限切れになったものを記録\n        if (card.isExpired()) {\n          nowExpired.push(card)\n        }\n      }\n    })\n    \n    // 期限切れの保険を active から expired に移動\n    if (nowExpired.length > 0) {\n      this.insuranceCards = this.insuranceCards.filter(card => !nowExpired.includes(card))\n      this.expiredInsurances.push(...nowExpired)\n      \n      // 保険料負担を再計算\n      this.updateInsuranceBurden()\n      \n      // 期限切れ通知を作成\n      return this.createExpirationNotice(nowExpired)\n    }\n    \n    return undefined\n  }\n\n  /**\n   * 期限切れ通知を作成\n   */\n  private createExpirationNotice(expiredCards: Card[]): InsuranceExpirationNotice {\n    const expiredNames = expiredCards.map(card => card.name).join('、')\n    const message = expiredCards.length === 1 \n      ? `定期保険「${expiredNames}」の期限が切れました。`\n      : `定期保険${expiredCards.length}件（${expiredNames}）の期限が切れました。`\n    \n    return {\n      expiredCards,\n      message,\n      showRenewalOption: true, // 将来的に更新オプションを実装するため\n      turnNumber: this.turn\n    }\n  }\n\n  /**\n   * Phase 3: 総合パワーを詳細に計算\n   * @param cards 使用するカード\n   * @returns パワーの詳細な内訳\n   */\n  calculateTotalPower(cards: Card[]): {\n    base: number\n    insurance: number\n    burden: number\n    total: number\n  } {\n    // 基本パワー（保険以外のカード）\n    let basePower = 0\n    let insurancePower = 0\n    \n    cards.forEach(card => {\n      if (card.type === 'insurance') {\n        // 保険カードのパワー（年齢ボーナス込み）\n        insurancePower += card.calculateEffectivePower()\n      } else {\n        // その他のカードの基本パワー\n        basePower += card.calculateEffectivePower()\n      }\n    })\n    \n    // 保険料負担（常に負の値）\n    const burden = this.insuranceBurden\n    \n    // 総合パワー\n    const total = basePower + insurancePower + burden\n    \n    return {\n      base: basePower,\n      insurance: insurancePower,\n      burden: burden,\n      total: Math.max(0, total) // 総合パワーは0以下にならない\n    }\n  }\n\n\n\n\n\n\n\n  /**\n   * テスト用: カードを手札に直接追加\n   */\n  addCardToHand(card: Card): void {\n    this.cardManager.addToHand(card)\n  }\n\n  /**\n   * テスト用: カードを捨て札に直接追加\n   */\n  addCardToDiscardPile(card: Card): void {\n    this.cardManager.addToDiscardPile(card)\n  }\n\n  /**\n   * テスト用: プレイヤーデッキにカードを追加\n   */\n  addCardToPlayerDeck(card: Card): void {\n    this.cardManager.addToPlayerDeck(card)\n  }\n\n  /**\n   * テスト用: 手札をクリア\n   */\n  clearHand(): void {\n    const state = this.cardManager.getState()\n    state.hand = []\n    this.cardManager.setState(state)\n  }\n\n  /**\n   * テスト用: 手札を設定\n   */\n  setHand(cards: Card[]): void {\n    const state = this.cardManager.getState()\n    state.hand = [...cards]\n    this.cardManager.setState(state)\n  }\n\n  /**\n   * テスト用: カード選択肢を設定\n   */\n  setCardChoices(choices: Card[]): void {\n    this.cardManager.setCardChoices(choices)\n  }\n\n  /**\n   * テスト用: フェーズを設定\n   */\n  setPhase(phase: GamePhase): void {\n    this.phase = phase\n  }\n\n  /**\n   * テスト用: ステージを設定\n   */\n  setStage(stage: GameStage): void {\n    this.stage = stage\n    this.updateMaxVitalityForAge()\n  }\n\n  /**\n   * ゲーム状態のスナップショットを取得\n   */\n  getSnapshot(): IGameState {\n    const cardState = this.cardManager.getState()\n    return {\n      id: this.id,\n      status: this.status,\n      phase: this.phase,\n      stage: this.stage,\n      turn: this.turn,\n      vitality: this.vitality,\n      maxVitality: this.maxVitality,\n      playerDeck: cardState.playerDeck,\n      hand: cardState.hand,\n      discardPile: cardState.discardPile,\n      challengeDeck: cardState.challengeDeck,\n      currentChallenge: this.currentChallenge,\n      selectedCards: cardState.selectedCards,\n      cardChoices: cardState.cardChoices,\n      insuranceTypeChoices: this.insuranceTypeChoices,\n      insuranceCards: [...this.insuranceCards],\n      expiredInsurances: [...this.expiredInsurances],\n      insuranceBurden: this.insuranceBurden,\n      stats: { ...this.stats },\n      config: { ...this.config },\n      startedAt: this.startedAt,\n      completedAt: this.completedAt\n    }\n  }\n}\n","/**\n * チュートリアルシステム型定義\n */\n\n/**\n * ゲームアクション検証用\n */\nexport interface GameActionValidation {\n  type: 'draw_card' | 'select_cards' | 'resolve_challenge' | 'select_reward_card' | 'end_turn' | 'custom'\n  validation: (gameState: Record<string, unknown>) => boolean\n  timeout?: number  // タイムアウト時間（ms）\n}\n\n/**\n * チュートリアルステップの基本型\n */\nexport interface TutorialStep {\n  id: string\n  title: string\n  description: string\n  targetElement?: string  // セレクタまたは要素名\n  position?: 'top' | 'bottom' | 'left' | 'right' | 'center'\n  action?: 'click' | 'hover' | 'wait' | 'auto' | 'wait_for_game_action'  // 進行条件\n  waitTime?: number  // auto actionの場合の待機時間（ms）\n  gameAction?: GameActionValidation  // ゲームアクション待機の詳細\n  skipCondition?: () => boolean  // このステップをスキップする条件\n  onEnter?: () => void  // ステップ開始時の処理\n  onExit?: () => void   // ステップ終了時の処理\n  highlightOptions?: HighlightOptions\n}\n\n/**\n * ハイライトオプション\n */\nexport interface HighlightOptions {\n  color?: string\n  opacity?: number\n  borderWidth?: number\n  borderColor?: string\n  glowEffect?: boolean\n  animationType?: 'pulse' | 'glow' | 'border' | 'none'\n  duration?: number  // アニメーション時間（ms）\n}\n\n/**\n * チュートリアル進捗状況\n */\nexport interface TutorialProgress {\n  currentStepIndex: number\n  completedSteps: string[]\n  skippedSteps: string[]\n  isCompleted: boolean\n  startedAt?: Date\n  completedAt?: Date\n  lastPlayedVersion?: string  // ゲームバージョン\n}\n\n/**\n * チュートリアル設定\n */\nexport interface TutorialConfig {\n  id: string\n  name: string\n  description: string\n  version: string\n  steps: TutorialStep[]\n  autoStart?: boolean\n  canSkip?: boolean\n  showProgress?: boolean\n  overlayOptions?: OverlayOptions\n}\n\n/**\n * オーバーレイオプション\n */\nexport interface OverlayOptions {\n  backgroundColor?: string\n  opacity?: number\n  blurBackground?: boolean\n  allowClickThrough?: boolean\n}\n\n/**\n * チュートリアルイベント\n */\nexport type TutorialEvent = \n  | 'tutorial:started'\n  | 'tutorial:step:enter'\n  | 'tutorial:step:exit'\n  | 'tutorial:step:completed'\n  | 'tutorial:step:skipped'\n  | 'tutorial:completed'\n  | 'tutorial:skipped'\n  | 'tutorial:error'\n\n/**\n * チュートリアルイベントデータ\n */\nexport interface TutorialEventData {\n  tutorialId: string\n  stepId?: string\n  stepIndex?: number\n  totalSteps?: number\n  progress?: TutorialProgress\n  error?: string\n}\n\n/**\n * ローカルストレージのキー\n */\nexport const TUTORIAL_STORAGE_KEYS = {\n  PROGRESS: 'insurance_game_tutorial_progress',\n  SETTINGS: 'insurance_game_tutorial_settings',\n  COMPLETED_TUTORIALS: 'insurance_game_completed_tutorials'\n} as const\n\n/**\n * チュートリアル状態\n */\nexport type TutorialState = \n  | 'idle'           // 待機中\n  | 'running'        // 実行中\n  | 'paused'         // 一時停止\n  | 'completed'      // 完了\n  | 'skipped'        // スキップ\n  | 'error'          // エラー\n\n/**\n * チュートリアルマネージャーの設定\n */\nexport interface TutorialManagerOptions {\n  autoSaveProgress?: boolean\n  debugMode?: boolean\n  defaultHighlightOptions?: HighlightOptions\n  defaultOverlayOptions?: OverlayOptions\n  stepChangeDelay?: number  // ステップ変更時の遅延（ms）\n}\n\n/**\n * ステップ実行結果\n */\nexport interface StepExecutionResult {\n  success: boolean\n  stepId: string\n  action: 'completed' | 'skipped' | 'error'\n  message?: string\n  error?: Error\n}"],"names":["Card","params","__publicField","bonuses","totalBonus","effectType","effect","baseParams","damage","shieldEffect","reduction","display","Deck","name","cards","card","count","drawn","i","cardId","index","j","type","stats","totalPower","totalCost","CardFactory","stage","ageBonus","extendedCards","insurance","choices","availableTypes","randomIndex","selectedType","termDuration","termCost","wholeLifeCost","choice","CardManager","playerDeck","challengeDeck","config","state","drawnCards","discardedCards","c","removedCard","discarded","_a","AGE_PARAMETERS","DREAM_AGE_ADJUSTMENTS","Game","challengeCard","selectedCards","powerBreakdown","playerPower","challengePower","success","vitalityChange","result","insuranceTypeChoices","selectedCard","insuranceType","durationType","durationText","change","newMaxVitality","expirationResult","challenge","adjustment","adjustedPower","activeInsuranceCount","burden","nowExpired","expiredCards","expiredNames","message","basePower","insurancePower","total","phase","cardState","__spreadValues","TUTORIAL_STORAGE_KEYS"],"mappings":"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"}