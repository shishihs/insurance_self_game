{"version":3,"file":"analytics-ImNIcNXw.js","sources":["../../src/components/statistics/StatsSummaryCard.vue","../../src/components/statistics/charts/GameProgressChart.vue","../../src/components/statistics/charts/SuccessRateChart.vue","../../src/components/statistics/charts/VitalityTrendChart.vue","../../src/components/statistics/charts/StageAnalysisChart.vue","../../src/components/statistics/charts/CardUsageChart.vue","../../src/components/statistics/charts/StrategyPatternsChart.vue","../../src/components/statistics/charts/DecisionAnalysisChart.vue","../../src/components/statistics/charts/LiveVitalityChart.vue","../../src/components/statistics/charts/DecisionTimeChart.vue","../../src/components/statistics/StatisticsDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"stats-summary-card\">\r\n    <div class=\"card-header\">\r\n      <div class=\"card-icon\">{{ icon }}</div>\r\n      <h3 class=\"card-title\">{{ title }}</h3>\r\n    </div>\r\n    \r\n    <div class=\"stats-list\">\r\n      <div \r\n        v-for=\"stat in stats\" \r\n        :key=\"stat.label\"\r\n        class=\"stat-item\"\r\n      >\r\n        <div class=\"stat-info\">\r\n          <span class=\"stat-label\">{{ stat.label }}</span>\r\n          <div class=\"stat-value-row\">\r\n            <span class=\"stat-value\">{{ stat.value }}</span>\r\n            <span \r\n              v-if=\"stat.trend\" \r\n              :class=\"['stat-trend', getTrendClass(stat.trend)]\"\r\n            >\r\n              {{ stat.trend }}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div \r\n          v-if=\"stat.percentage !== undefined\" \r\n          class=\"stat-progress\"\r\n        >\r\n          <div \r\n            class=\"progress-bar\"\r\n            :style=\"{ width: `${stat.percentage}%` }\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\ninterface StatItem {\r\n  label: string\r\n  value: string\r\n  trend?: string\r\n  percentage?: number\r\n}\r\n\r\ninterface Props {\r\n  title: string\r\n  icon: string\r\n  stats: StatItem[]\r\n}\r\n\r\ndefineProps<Props>()\r\n\r\nconst getTrendClass = (trend: string): string => {\r\n  if (trend.includes('↗') || trend === '+') return 'trend-up'\r\n  if (trend.includes('↘') || trend === '-') return 'trend-down'\r\n  return 'trend-neutral'\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.stats-summary-card {\r\n  @apply bg-gray-800 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors;\r\n}\r\n\r\n.card-header {\r\n  @apply flex items-center gap-3 mb-4;\r\n}\r\n\r\n.card-icon {\r\n  @apply text-2xl;\r\n}\r\n\r\n.card-title {\r\n  @apply text-lg font-semibold text-white;\r\n}\r\n\r\n.stats-list {\r\n  @apply space-y-3;\r\n}\r\n\r\n.stat-item {\r\n  @apply space-y-2;\r\n}\r\n\r\n.stat-info {\r\n  @apply flex justify-between items-start;\r\n}\r\n\r\n.stat-label {\r\n  @apply text-sm text-gray-300;\r\n}\r\n\r\n.stat-value-row {\r\n  @apply flex items-center gap-2;\r\n}\r\n\r\n.stat-value {\r\n  @apply text-xl font-bold text-white;\r\n}\r\n\r\n.stat-trend {\r\n  @apply text-sm font-medium;\r\n}\r\n\r\n.trend-up {\r\n  @apply text-green-400;\r\n}\r\n\r\n.trend-down {\r\n  @apply text-red-400;\r\n}\r\n\r\n.trend-neutral {\r\n  @apply text-gray-400;\r\n}\r\n\r\n.stat-progress {\r\n  @apply w-full bg-gray-700 rounded-full h-2;\r\n}\r\n\r\n.progress-bar {\r\n  @apply bg-blue-500 h-2 rounded-full transition-all duration-300;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">🎮 ゲーム進行履歴</h3>\r\n    <div class=\"chart-controls\">\r\n      <select v-model=\"chartPeriod\" @change=\"updateChart\" class=\"period-selector\">\r\n        <option value=\"week\">過去1週間</option>\r\n        <option value=\"month\">過去1ヶ月</option>\r\n        <option value=\"quarter\">過去3ヶ月</option>\r\n        <option value=\"all\">全期間</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"chart-stats\">\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">総ゲーム数:</span>\r\n        <span class=\"value\">{{ totalGames }}</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">平均スコア:</span>\r\n        <span class=\"value\">{{ averageScore.toFixed(1) }}</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">最高スコア:</span>\r\n        <span class=\"value\">{{ maxScore }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface GameHistoryData {\r\n  date: string\r\n  gamesPlayed: number\r\n  averageScore: number\r\n  totalPlayTime: number\r\n}\r\n\r\ninterface Props {\r\n  data: GameHistoryData[]\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\nconst chartPeriod = ref('month')\r\n\r\n// 計算されたプロパティ\r\nconst filteredData = computed(() => {\r\n  if (!props.data || props.data.length === 0) return []\r\n  \r\n  const now = new Date()\r\n  let cutoffDate = new Date()\r\n  \r\n  switch (chartPeriod.value) {\r\n    case 'week':\r\n      cutoffDate.setDate(now.getDate() - 7)\r\n      break\r\n    case 'month':\r\n      cutoffDate.setMonth(now.getMonth() - 1)\r\n      break\r\n    case 'quarter':\r\n      cutoffDate.setMonth(now.getMonth() - 3)\r\n      break\r\n    case 'all':\r\n    default:\r\n      cutoffDate = new Date(0) // すべてのデータを含める\r\n      break\r\n  }\r\n  \r\n  return props.data.filter(item => new Date(item.date) >= cutoffDate)\r\n})\r\n\r\nconst totalGames = computed(() => {\r\n  return filteredData.value.reduce((sum, item) => sum + item.gamesPlayed, 0)\r\n})\r\n\r\nconst averageScore = computed(() => {\r\n  if (filteredData.value.length === 0) return 0\r\n  const totalScore = filteredData.value.reduce((sum, item) => sum + item.averageScore * item.gamesPlayed, 0)\r\n  return totalScore / totalGames.value\r\n})\r\n\r\nconst maxScore = computed(() => {\r\n  if (filteredData.value.length === 0) return 0\r\n  return Math.max(...filteredData.value.map(item => item.averageScore))\r\n})\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: 'プレイ回数',\r\n          data: [],\r\n          borderColor: 'rgb(99, 102, 241)',\r\n          backgroundColor: 'rgba(99, 102, 241, 0.1)',\r\n          yAxisID: 'y',\r\n          fill: true,\r\n          tension: 0.4\r\n        },\r\n        {\r\n          label: '平均スコア',\r\n          data: [],\r\n          borderColor: 'rgb(34, 197, 94)', \r\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\r\n          yAxisID: 'y1',\r\n          fill: false,\r\n          tension: 0.4\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            color: 'white',\r\n            usePointStyle: true\r\n          }\r\n        },\r\n        tooltip: {\r\n          mode: 'index',\r\n          intersect: false,\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            afterLabel: (context) => {\r\n              const dataIndex = context.dataIndex\r\n              const item = filteredData.value[dataIndex]\r\n              if (item) {\r\n                return `プレイ時間: ${formatDuration(item.totalPlayTime)}`\r\n              }\r\n              return ''\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        },\r\n        y: {\r\n          type: 'linear',\r\n          display: true,\r\n          position: 'left',\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'プレイ回数',\r\n            color: 'rgb(99, 102, 241)'\r\n          }\r\n        },\r\n        y1: {\r\n          type: 'linear',\r\n          display: true,\r\n          position: 'right',\r\n          grid: {\r\n            drawOnChartArea: false,\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '平均スコア',\r\n            color: 'rgb(34, 197, 94)'\r\n          }\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'nearest',\r\n        axis: 'x',\r\n        intersect: false\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 4,\r\n          hoverRadius: 6\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value) return\r\n  \r\n  const labels = filteredData.value.map(item => {\r\n    const date = new Date(item.date)\r\n    return date.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' })\r\n  })\r\n  \r\n  const gamesData = filteredData.value.map(item => item.gamesPlayed)\r\n  const scoresData = filteredData.value.map(item => item.averageScore)\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = gamesData\r\n  chartInstance.value.data.datasets[1].data = scoresData\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// ユーティリティ関数\r\nconst formatDuration = (ms: number): string => {\r\n  const seconds = Math.floor(ms / 1000)\r\n  const minutes = Math.floor(seconds / 60)\r\n  const hours = Math.floor(minutes / 60)\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}時間${minutes % 60}分`\r\n  } else if (minutes > 0) {\r\n    return `${minutes}分`\r\n  } else {\r\n    return `${seconds}秒`\r\n  }\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n  updateChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n\r\nwatch(() => chartPeriod.value, () => {\r\n  updateChart()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.chart-controls {\r\n  @apply flex justify-end mb-4;\r\n}\r\n\r\n.period-selector {\r\n  @apply px-3 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 300px;\r\n}\r\n\r\n.chart-stats {\r\n  @apply flex gap-6 mt-4 text-sm;\r\n}\r\n\r\n.stat-item {\r\n  @apply flex gap-2;\r\n}\r\n\r\n.stat-item .label {\r\n  @apply text-gray-300;\r\n}\r\n\r\n.stat-item .value {\r\n  @apply text-white font-semibold;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">📊 ステージ別成功率</h3>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"chart-legend\">\r\n      <div class=\"legend-item\" v-for=\"(rate, stage) in data\" :key=\"stage\">\r\n        <div class=\"legend-color\" :style=\"{ backgroundColor: getStageColor(stage) }\"></div>\r\n        <span class=\"legend-label\">{{ getStageLabel(stage) }}</span>\r\n        <span class=\"legend-value\">{{ (rate * 100).toFixed(1) }}%</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n)\r\n\r\ninterface Props {\r\n  data: Record<string, number>\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\n\r\n// ステージの色とラベルのマッピング\r\nconst STAGE_COLORS = {\r\n  youth: 'rgb(34, 197, 94)',    // 緑\r\n  middle: 'rgb(251, 191, 36)',  // 黄\r\n  fulfillment: 'rgb(168, 85, 247)' // 紫\r\n}\r\n\r\nconst STAGE_LABELS = {\r\n  youth: '青年期',\r\n  middle: '中年期', \r\n  fulfillment: '充実期'\r\n}\r\n\r\nconst getStageColor = (stage: string): string => {\r\n  return STAGE_COLORS[stage as keyof typeof STAGE_COLORS] || 'rgb(107, 114, 128)'\r\n}\r\n\r\nconst getStageLabel = (stage: string): string => {\r\n  return STAGE_LABELS[stage as keyof typeof STAGE_LABELS] || stage\r\n}\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value || !props.data) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const stages = Object.keys(props.data)\r\n  const rates = Object.values(props.data).map(rate => rate * 100) // パーセンテージに変換\r\n  const colors = stages.map(stage => getStageColor(stage))\r\n  const labels = stages.map(stage => getStageLabel(stage))\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: '成功率 (%)',\r\n          data: rates,\r\n          backgroundColor: colors.map(color => color.replace('rgb', 'rgba').replace(')', ', 0.6)')),\r\n          borderColor: colors,\r\n          borderWidth: 2,\r\n          borderRadius: 4,\r\n          borderSkipped: false\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: false // カスタムレジェンドを使用\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            label: (context) => {\r\n              const value = context.parsed.y\r\n              const stage = context.label\r\n              return `${stage}: ${value.toFixed(1)}%`\r\n            },\r\n            afterLabel: (context) => {\r\n              const rate = context.parsed.y / 100\r\n              let performance = ''\r\n              if (rate >= 0.8) performance = '優秀'\r\n              else if (rate >= 0.6) performance = '良好'\r\n              else if (rate >= 0.4) performance = '普通'\r\n              else performance = '要改善'\r\n              \r\n              return `パフォーマンス: ${performance}`\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          grid: {\r\n            display: false\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            font: {\r\n              size: 12\r\n            }\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 100,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            callback: (value) => `${value}%`\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '成功率 (%)',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      elements: {\r\n        bar: {\r\n          borderWidth: 2\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'index',\r\n        intersect: false\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data) return\r\n  \r\n  const stages = Object.keys(props.data)\r\n  const rates = Object.values(props.data).map(rate => rate * 100)\r\n  const colors = stages.map(stage => getStageColor(stage))\r\n  const labels = stages.map(stage => getStageLabel(stage))\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = rates\r\n  chartInstance.value.data.datasets[0].backgroundColor = colors.map(color => \r\n    color.replace('rgb', 'rgba').replace(')', ', 0.6)')\r\n  )\r\n  chartInstance.value.data.datasets[0].borderColor = colors\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-4 flex items-center gap-2;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 250px;\r\n}\r\n\r\n.chart-legend {\r\n  @apply flex gap-4 mt-4 flex-wrap;\r\n}\r\n\r\n.legend-item {\r\n  @apply flex items-center gap-2 text-sm;\r\n}\r\n\r\n.legend-color {\r\n  @apply w-3 h-3 rounded;\r\n}\r\n\r\n.legend-label {\r\n  @apply text-gray-300;\r\n}\r\n\r\n.legend-value {\r\n  @apply text-white font-semibold;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">💗 活力変動トレンド</h3>\r\n    <div class=\"chart-info\">\r\n      <div class=\"info-item\">\r\n        <span>現在: {{ currentVitality }}</span>\r\n      </div>\r\n      <div class=\"info-item\">\r\n        <span>最高: {{ maxVitality }}</span>\r\n      </div>\r\n      <div class=\"info-item\">\r\n        <span>最低: {{ minVitality }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface VitalityPoint {\r\n  turn: number\r\n  vitality: number\r\n}\r\n\r\ninterface Props {\r\n  data: VitalityPoint[]\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\n\r\n// 計算されたプロパティ\r\nconst currentVitality = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return props.data[props.data.length - 1].vitality\r\n})\r\n\r\nconst maxVitality = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return Math.max(...props.data.map(point => point.vitality))\r\n})\r\n\r\nconst minVitality = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return Math.min(...props.data.map(point => point.vitality))\r\n})\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: '活力',\r\n          data: [],\r\n          borderColor: 'rgb(239, 68, 68)',\r\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n          fill: true,\r\n          tension: 0.4,\r\n          pointBackgroundColor: 'rgb(239, 68, 68)',\r\n          pointBorderColor: 'white',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 4,\r\n          pointHoverRadius: 6\r\n        },\r\n        {\r\n          label: '危険ライン',\r\n          data: [],\r\n          borderColor: 'rgb(245, 101, 101)',\r\n          backgroundColor: 'transparent',\r\n          borderDash: [5, 5],\r\n          fill: false,\r\n          pointRadius: 0,\r\n          tension: 0\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            color: 'white',\r\n            usePointStyle: true,\r\n            filter: (legendItem) => legendItem.text !== '危険ライン' || props.data.some(point => point.vitality <= 20)\r\n          }\r\n        },\r\n        tooltip: {\r\n          mode: 'index',\r\n          intersect: false,\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            title: (context) => {\r\n              return `ターン ${context[0].label}`\r\n            },\r\n            label: (context) => {\r\n              if (context.datasetIndex === 0) {\r\n                const vitality = context.parsed.y\r\n                let status = ''\r\n                if (vitality >= 80) status = '絶好調'\r\n                else if (vitality >= 60) status = '好調'\r\n                else if (vitality >= 40) status = '普通'\r\n                else if (vitality >= 20) status = '要注意'\r\n                else status = '危険'\r\n                \r\n                return `活力: ${vitality} (${status})`\r\n              }\r\n              return ''\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'ターン',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 100,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            stepSize: 20\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '活力',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'nearest',\r\n        axis: 'x',\r\n        intersect: false\r\n      },\r\n      elements: {\r\n        line: {\r\n          tension: 0.4\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data) return\r\n  \r\n  const labels = props.data.map(point => point.turn.toString())\r\n  const vitalityData = props.data.map(point => point.vitality)\r\n  const dangerLineData = props.data.map(() => 20) // 危険ラインは20で固定\r\n  \r\n  // 色の動的設定（活力レベルに応じて）\r\n  const borderColors = vitalityData.map(vitality => {\r\n    if (vitality >= 80) return 'rgb(34, 197, 94)'    // 緑\r\n    if (vitality >= 60) return 'rgb(59, 130, 246)'   // 青\r\n    if (vitality >= 40) return 'rgb(251, 191, 36)'   // 黄\r\n    if (vitality >= 20) return 'rgb(245, 101, 101)'  // オレンジ\r\n    return 'rgb(239, 68, 68)'                        // 赤\r\n  })\r\n  \r\n  // グラデーション背景色\r\n  const backgroundColors = vitalityData.map(vitality => {\r\n    if (vitality >= 80) return 'rgba(34, 197, 94, 0.1)'\r\n    if (vitality >= 60) return 'rgba(59, 130, 246, 0.1)'\r\n    if (vitality >= 40) return 'rgba(251, 191, 36, 0.1)'\r\n    if (vitality >= 20) return 'rgba(245, 101, 101, 0.1)'\r\n    return 'rgba(239, 68, 68, 0.1)'\r\n  })\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = vitalityData\r\n  chartInstance.value.data.datasets[1].data = dangerLineData\r\n  \r\n  // 最新の活力レベルに応じてメインラインの色を設定\r\n  const currentLevel = vitalityData[vitalityData.length - 1] || 0\r\n  if (currentLevel >= 80) {\r\n    chartInstance.value.data.datasets[0].borderColor = 'rgb(34, 197, 94)'\r\n    chartInstance.value.data.datasets[0].backgroundColor = 'rgba(34, 197, 94, 0.1)'\r\n  } else if (currentLevel >= 60) {\r\n    chartInstance.value.data.datasets[0].borderColor = 'rgb(59, 130, 246)'\r\n    chartInstance.value.data.datasets[0].backgroundColor = 'rgba(59, 130, 246, 0.1)'\r\n  } else if (currentLevel >= 40) {\r\n    chartInstance.value.data.datasets[0].borderColor = 'rgb(251, 191, 36)'\r\n    chartInstance.value.data.datasets[0].backgroundColor = 'rgba(251, 191, 36, 0.1)'\r\n  } else if (currentLevel >= 20) {\r\n    chartInstance.value.data.datasets[0].borderColor = 'rgb(245, 101, 101)'\r\n    chartInstance.value.data.datasets[0].backgroundColor = 'rgba(245, 101, 101, 0.1)'\r\n  } else {\r\n    chartInstance.value.data.datasets[0].borderColor = 'rgb(239, 68, 68)'\r\n    chartInstance.value.data.datasets[0].backgroundColor = 'rgba(239, 68, 68, 0.1)'\r\n  }\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n  updateChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.chart-info {\r\n  @apply flex gap-4 mb-4 text-sm;\r\n}\r\n\r\n.info-item {\r\n  @apply px-3 py-1 bg-gray-700 rounded-full;\r\n}\r\n\r\n.info-item span {\r\n  @apply text-gray-200;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 280px;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">🎯 ステージ別到達分析</h3>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"analysis-summary\">\r\n      <div class=\"summary-item\" v-for=\"(count, stage) in data\" :key=\"stage\">\r\n        <div class=\"stage-icon\">{{ getStageIcon(stage) }}</div>\r\n        <div class=\"stage-info\">\r\n          <div class=\"stage-name\">{{ getStageLabel(stage) }}</div>\r\n          <div class=\"stage-count\">{{ count }}回到達</div>\r\n          <div class=\"stage-percentage\">{{ getPercentage(count) }}%</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(ArcElement, Tooltip, Legend)\r\n\r\ninterface Props {\r\n  data: Record<string, number>\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\n\r\n// ステージの設定\r\nconst STAGE_COLORS = {\r\n  youth: 'rgb(34, 197, 94)',\r\n  middle: 'rgb(251, 191, 36)', \r\n  fulfillment: 'rgb(168, 85, 247)'\r\n}\r\n\r\nconst STAGE_LABELS = {\r\n  youth: '青年期',\r\n  middle: '中年期',\r\n  fulfillment: '充実期'\r\n}\r\n\r\nconst STAGE_ICONS = {\r\n  youth: '🌱',\r\n  middle: '🌳',\r\n  fulfillment: '🌸'\r\n}\r\n\r\nconst totalCount = computed(() => {\r\n  return Object.values(props.data || {}).reduce((sum, count) => sum + count, 0)\r\n})\r\n\r\nconst getStageLabel = (stage: string): string => {\r\n  return STAGE_LABELS[stage as keyof typeof STAGE_LABELS] || stage\r\n}\r\n\r\nconst getStageIcon = (stage: string): string => {\r\n  return STAGE_ICONS[stage as keyof typeof STAGE_ICONS] || '⭐'\r\n}\r\n\r\nconst getPercentage = (count: number): string => {\r\n  if (totalCount.value === 0) return '0'\r\n  return ((count / totalCount.value) * 100).toFixed(1)\r\n}\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value || !props.data) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const stages = Object.keys(props.data)\r\n  const counts = Object.values(props.data)\r\n  const colors = stages.map(stage => STAGE_COLORS[stage as keyof typeof STAGE_COLORS] || 'rgb(107, 114, 128)')\r\n  const labels = stages.map(stage => getStageLabel(stage))\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'doughnut',\r\n    data: {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          data: counts,\r\n          backgroundColor: colors.map(color => color.replace('rgb', 'rgba').replace(')', ', 0.8)')),\r\n          borderColor: colors,\r\n          borderWidth: 2,\r\n          hoverOffset: 4\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: false // カスタムサマリーを使用\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            label: (context) => {\r\n              const label = context.label\r\n              const value = context.parsed\r\n              const percentage = ((value / totalCount.value) * 100).toFixed(1)\r\n              return `${label}: ${value}回 (${percentage}%)`\r\n            },\r\n            afterLabel: (context) => {\r\n              const stage = Object.keys(props.data)[context.dataIndex]\r\n              const difficulty = getDifficultyLevel(stage)\r\n              return `難易度: ${difficulty}`\r\n            }\r\n          }\r\n        }\r\n      },\r\n      cutout: '60%',\r\n      elements: {\r\n        arc: {\r\n          borderWidth: 2\r\n        }\r\n      }\r\n    }\r\n  })\r\n  \r\n  // 中央にテキストを表示\r\n  addCenterText()\r\n}\r\n\r\n// 中央テキストの追加\r\nconst addCenterText = () => {\r\n  if (!chartInstance.value) return\r\n  \r\n  const chart = chartInstance.value\r\n  const ctx = chart.ctx\r\n  \r\n  Chart.register({\r\n    id: 'centerText',\r\n    beforeDraw: (chart) => {\r\n      const { width, height, ctx } = chart\r\n      ctx.restore()\r\n      \r\n      const fontSize = (height / 180).toFixed(2)\r\n      ctx.font = `bold ${fontSize}em Arial`\r\n      ctx.textBaseline = 'middle'\r\n      ctx.fillStyle = 'white'\r\n      \r\n      const text = `総計\\n${totalCount.value}回`\r\n      const textX = Math.round(width / 2)\r\n      const textY = height / 2\r\n      \r\n      const lines = text.split('\\n')\r\n      lines.forEach((line, index) => {\r\n        const lineHeight = parseInt(fontSize) * 20\r\n        const y = textY + (index - (lines.length - 1) / 2) * lineHeight\r\n        ctx.fillText(line, textX, y)\r\n      })\r\n      \r\n      ctx.save()\r\n    }\r\n  })\r\n}\r\n\r\n// 難易度レベルの取得\r\nconst getDifficultyLevel = (stage: string): string => {\r\n  const difficultyMap = {\r\n    youth: '易',\r\n    middle: '中',\r\n    fulfillment: '難'\r\n  }\r\n  return difficultyMap[stage as keyof typeof difficultyMap] || '不明'\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data) return\r\n  \r\n  const stages = Object.keys(props.data)\r\n  const counts = Object.values(props.data)\r\n  const colors = stages.map(stage => STAGE_COLORS[stage as keyof typeof STAGE_COLORS] || 'rgb(107, 114, 128)')\r\n  const labels = stages.map(stage => getStageLabel(stage))\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = counts\r\n  chartInstance.value.data.datasets[0].backgroundColor = colors.map(color => \r\n    color.replace('rgb', 'rgba').replace(')', ', 0.8)')\r\n  )\r\n  chartInstance.value.data.datasets[0].borderColor = colors\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-4 flex items-center gap-2;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 250px;\r\n}\r\n\r\n.analysis-summary {\r\n  @apply space-y-3 mt-4;\r\n}\r\n\r\n.summary-item {\r\n  @apply flex items-center gap-3 p-3 bg-gray-700 rounded-lg;\r\n}\r\n\r\n.stage-icon {\r\n  @apply text-2xl;\r\n}\r\n\r\n.stage-info {\r\n  @apply flex-1;\r\n}\r\n\r\n.stage-name {\r\n  @apply text-white font-medium;\r\n}\r\n\r\n.stage-count {\r\n  @apply text-gray-300 text-sm;\r\n}\r\n\r\n.stage-percentage {\r\n  @apply text-blue-400 text-xs;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">🃏 カード使用統計</h3>\r\n    <div class=\"chart-controls\">\r\n      <select v-model=\"viewMode\" @change=\"updateChart\" class=\"mode-selector\">\r\n        <option value=\"type\">カード種別</option>\r\n        <option value=\"frequency\">使用頻度</option>\r\n        <option value=\"effectiveness\">効果別</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"usage-details\">\r\n      <div class=\"detail-header\">\r\n        <span>詳細分析</span>\r\n      </div>\r\n      <div class=\"detail-list\">\r\n        <div \r\n          v-for=\"(count, cardType) in sortedData\" \r\n          :key=\"cardType\"\r\n          class=\"detail-item\"\r\n        >\r\n          <div class=\"card-type\">\r\n            <span class=\"type-icon\">{{ getCardTypeIcon(cardType) }}</span>\r\n            <span class=\"type-name\">{{ getCardTypeName(cardType) }}</span>\r\n          </div>\r\n          <div class=\"usage-stats\">\r\n            <span class=\"usage-count\">{{ count }}回</span>\r\n            <span class=\"usage-percentage\">{{ getUsagePercentage(count) }}%</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n)\r\n\r\ninterface Props {\r\n  data: Record<string, number>\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\nconst viewMode = ref<'type' | 'frequency' | 'effectiveness'>('type')\r\n\r\n// カード種別の設定\r\nconst CARD_TYPE_CONFIG = {\r\n  life: { name: 'ライフカード', icon: '💫', color: 'rgb(34, 197, 94)' },\r\n  challenge: { name: 'チャレンジカード', icon: '⚔️', color: 'rgb(239, 68, 68)' },\r\n  insurance: { name: '保険カード', icon: '🛡️', color: 'rgb(59, 130, 246)' },\r\n  dream: { name: '夢カード', icon: '✨', color: 'rgb(168, 85, 247)' },\r\n  action: { name: 'アクションカード', icon: '🎯', color: 'rgb(251, 191, 36)' },\r\n  event: { name: 'イベントカード', icon: '🎪', color: 'rgb(236, 72, 153)' }\r\n}\r\n\r\nconst totalUsage = computed(() => {\r\n  return Object.values(props.data || {}).reduce((sum, count) => sum + count, 0)\r\n})\r\n\r\nconst sortedData = computed(() => {\r\n  if (!props.data) return {}\r\n  \r\n  const entries = Object.entries(props.data)\r\n  \r\n  switch (viewMode.value) {\r\n    case 'frequency':\r\n      return Object.fromEntries(entries.sort(([,a], [,b]) => b - a))\r\n    case 'effectiveness':\r\n      // 効果の計算（簡易版）\r\n      return Object.fromEntries(entries.sort(([typeA, countA], [typeB, countB]) => {\r\n        const effA = calculateEffectiveness(typeA, countA)\r\n        const effB = calculateEffectiveness(typeB, countB)\r\n        return effB - effA\r\n      }))\r\n    case 'type':\r\n    default:\r\n      return props.data\r\n  }\r\n})\r\n\r\nconst getCardTypeName = (cardType: string): string => {\r\n  return CARD_TYPE_CONFIG[cardType as keyof typeof CARD_TYPE_CONFIG]?.name || cardType\r\n}\r\n\r\nconst getCardTypeIcon = (cardType: string): string => {\r\n  return CARD_TYPE_CONFIG[cardType as keyof typeof CARD_TYPE_CONFIG]?.icon || '🎴'\r\n}\r\n\r\nconst getCardTypeColor = (cardType: string): string => {\r\n  return CARD_TYPE_CONFIG[cardType as keyof typeof CARD_TYPE_CONFIG]?.color || 'rgb(107, 114, 128)'\r\n}\r\n\r\nconst getUsagePercentage = (count: number): string => {\r\n  if (totalUsage.value === 0) return '0'\r\n  return ((count / totalUsage.value) * 100).toFixed(1)\r\n}\r\n\r\nconst calculateEffectiveness = (cardType: string, count: number): number => {\r\n  // 簡易的な効果計算\r\n  const typeMultipliers = {\r\n    life: 1.2,\r\n    insurance: 1.1,\r\n    dream: 1.3,\r\n    action: 1.0,\r\n    challenge: 0.8,\r\n    event: 0.9\r\n  }\r\n  \r\n  const multiplier = typeMultipliers[cardType as keyof typeof typeMultipliers] || 1.0\r\n  return count * multiplier\r\n}\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value || !props.data) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  const chartType = viewMode.value === 'type' ? 'doughnut' : 'bar'\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: chartType,\r\n    data: {\r\n      labels: [],\r\n      datasets: [{\r\n        label: 'カード使用回数',\r\n        data: [],\r\n        backgroundColor: [],\r\n        borderColor: [],\r\n        borderWidth: 2\r\n      }]\r\n    },\r\n    options: getChartOptions()\r\n  })\r\n  \r\n  updateChart()\r\n}\r\n\r\n// チャートオプションの取得\r\nconst getChartOptions = () => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      title: {\r\n        display: false\r\n      },\r\n      legend: {\r\n        display: viewMode.value === 'type',\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          color: 'white',\r\n          usePointStyle: true,\r\n          padding: 20\r\n        }\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n        titleColor: 'white',\r\n        bodyColor: 'white',\r\n        borderColor: 'rgba(75, 85, 99, 0.5)',\r\n        borderWidth: 1,\r\n        callbacks: {\r\n          label: (context: any) => {\r\n            const cardType = Object.keys(sortedData.value)[context.dataIndex]\r\n            const count = context.parsed || context.parsed.y\r\n            const percentage = getUsagePercentage(count)\r\n            const effectiveness = calculateEffectiveness(cardType, count)\r\n            \r\n            return [\r\n              `${getCardTypeName(cardType)}: ${count}回`,\r\n              `使用率: ${percentage}%`,\r\n              `効果度: ${effectiveness.toFixed(1)}`\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (viewMode.value === 'type') {\r\n    return {\r\n      ...baseOptions,\r\n      cutout: '50%',\r\n      elements: {\r\n        arc: {\r\n          borderWidth: 2\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    return {\r\n      ...baseOptions,\r\n      scales: {\r\n        x: {\r\n          grid: {\r\n            display: false\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            maxRotation: 45\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: viewMode.value === 'frequency' ? '使用回数' : '効果度',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      elements: {\r\n        bar: {\r\n          borderRadius: 4\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data) return\r\n  \r\n  const cardTypes = Object.keys(sortedData.value)\r\n  const counts = Object.values(sortedData.value)\r\n  const colors = cardTypes.map(type => getCardTypeColor(type))\r\n  const labels = cardTypes.map(type => getCardTypeName(type))\r\n  \r\n  // データに応じた値の計算\r\n  let chartData = counts\r\n  if (viewMode.value === 'effectiveness') {\r\n    chartData = cardTypes.map((type, index) => calculateEffectiveness(type, counts[index]))\r\n  }\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = chartData\r\n  chartInstance.value.data.datasets[0].backgroundColor = colors.map(color => \r\n    color.replace('rgb', 'rgba').replace(')', ', 0.7)')\r\n  )\r\n  chartInstance.value.data.datasets[0].borderColor = colors\r\n  \r\n  // チャートタイプの変更\r\n  const newType = viewMode.value === 'type' ? 'doughnut' : 'bar'\r\n  if (chartInstance.value.config.type !== newType) {\r\n    chartInstance.value.destroy()\r\n    initChart()\r\n    return\r\n  }\r\n  \r\n  chartInstance.value.options = getChartOptions()\r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データとモード変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n\r\nwatch(() => viewMode.value, () => {\r\n  updateChart()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.chart-controls {\r\n  @apply flex justify-end mb-4;\r\n}\r\n\r\n.mode-selector {\r\n  @apply px-3 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 300px;\r\n}\r\n\r\n.usage-details {\r\n  @apply mt-4 bg-gray-700 rounded-lg p-4;\r\n}\r\n\r\n.detail-header {\r\n  @apply text-white font-medium mb-3 pb-2 border-b border-gray-600;\r\n}\r\n\r\n.detail-list {\r\n  @apply space-y-2 max-h-32 overflow-y-auto;\r\n}\r\n\r\n.detail-item {\r\n  @apply flex justify-between items-center py-2;\r\n}\r\n\r\n.card-type {\r\n  @apply flex items-center gap-2;\r\n}\r\n\r\n.type-icon {\r\n  @apply text-lg;\r\n}\r\n\r\n.type-name {\r\n  @apply text-gray-200 text-sm;\r\n}\r\n\r\n.usage-stats {\r\n  @apply flex gap-3 text-sm;\r\n}\r\n\r\n.usage-count {\r\n  @apply text-white font-medium;\r\n}\r\n\r\n.usage-percentage {\r\n  @apply text-blue-400;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">🧭 戦略パターン分析</h3>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"patterns-analysis\">\r\n      <div class=\"pattern-list\">\r\n        <div \r\n          v-for=\"pattern in sortedPatterns\" \r\n          :key=\"`${pattern.situation}_${pattern.choice}`\"\r\n          class=\"pattern-item\"\r\n          :class=\"{ 'high-success': pattern.successRate >= 0.7, 'low-success': pattern.successRate < 0.4 }\"\r\n        >\r\n          <div class=\"pattern-header\">\r\n            <div class=\"pattern-situation\">{{ formatSituation(pattern.situation) }}</div>\r\n            <div class=\"pattern-choice\">{{ formatChoice(pattern.choice) }}</div>\r\n          </div>\r\n          <div class=\"pattern-stats\">\r\n            <div class=\"stat\">\r\n              <span class=\"label\">頻度:</span>\r\n              <span class=\"value\">{{ pattern.frequency }}回</span>\r\n            </div>\r\n            <div class=\"stat\">\r\n              <span class=\"label\">成功率:</span>\r\n              <span class=\"value\">{{ (pattern.successRate * 100).toFixed(1) }}%</span>\r\n            </div>\r\n            <div class=\"pattern-recommendation\">\r\n              {{ getRecommendation(pattern) }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n)\r\n\r\ninterface DecisionPattern {\r\n  situation: string\r\n  choice: string\r\n  frequency: number\r\n  successRate: number\r\n}\r\n\r\ninterface Props {\r\n  data: DecisionPattern[]\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\n\r\n// 計算されたプロパティ\r\nconst sortedPatterns = computed(() => {\r\n  return [...(props.data || [])].sort((a, b) => {\r\n    // 成功率の高い順、同じなら頻度の高い順\r\n    if (b.successRate !== a.successRate) {\r\n      return b.successRate - a.successRate\r\n    }\r\n    return b.frequency - a.frequency\r\n  })\r\n})\r\n\r\n// フォーマット関数\r\nconst formatSituation = (situation: string): string => {\r\n  const situationMap: Record<string, string> = {\r\n    'youth_high_vitality': '青年期・高活力',\r\n    'youth_low_vitality': '青年期・低活力',\r\n    'middle_high_vitality': '中年期・高活力',\r\n    'middle_low_vitality': '中年期・低活力',\r\n    'fulfillment_high_vitality': '充実期・高活力',\r\n    'fulfillment_low_vitality': '充実期・低活力'\r\n  }\r\n  \r\n  return situationMap[situation] || situation\r\n}\r\n\r\nconst formatChoice = (choice: string): string => {\r\n  const choiceMap: Record<string, string> = {\r\n    'with_insurance': '保険あり',\r\n    'no_insurance': '保険なし',\r\n    'aggressive': '積極的',\r\n    'conservative': '保守的',\r\n    'balanced': 'バランス型'\r\n  }\r\n  \r\n  return choiceMap[choice] || choice\r\n}\r\n\r\nconst getRecommendation = (pattern: DecisionPattern): string => {\r\n  if (pattern.successRate >= 0.8) {\r\n    return '👍 優秀な戦略です'\r\n  } else if (pattern.successRate >= 0.6) {\r\n    return '😊 良好な戦略です'\r\n  } else if (pattern.successRate >= 0.4) {\r\n    return '😐 改善の余地があります'\r\n  } else {\r\n    return '🤔 戦略の見直しを検討'\r\n  }\r\n}\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value || !props.data || props.data.length === 0) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  // 散布図でパターンを表示（頻度 vs 成功率）\r\n  const datasets = createDatasets()\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'scatter',\r\n    data: {\r\n      datasets\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            color: 'white',\r\n            usePointStyle: true\r\n          }\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            title: () => '',\r\n            label: (context) => {\r\n              const pattern = props.data[context.dataIndex]\r\n              return [\r\n                `状況: ${formatSituation(pattern.situation)}`,\r\n                `選択: ${formatChoice(pattern.choice)}`,\r\n                `頻度: ${pattern.frequency}回`,\r\n                `成功率: ${(pattern.successRate * 100).toFixed(1)}%`\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '使用頻度',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 1,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            callback: (value) => `${(Number(value) * 100).toFixed(0)}%`\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '成功率',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 8,\r\n          hoverRadius: 10\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// データセットの作成\r\nconst createDatasets = () => {\r\n  if (!props.data) return []\r\n  \r\n  // 状況別にグループ化\r\n  const situationGroups: Record<string, DecisionPattern[]> = {}\r\n  props.data.forEach(pattern => {\r\n    const situation = pattern.situation.split('_')[0] // youth, middle, fulfillment\r\n    if (!situationGroups[situation]) {\r\n      situationGroups[situation] = []\r\n    }\r\n    situationGroups[situation].push(pattern)\r\n  })\r\n  \r\n  const colors = {\r\n    youth: 'rgb(34, 197, 94)',\r\n    middle: 'rgb(251, 191, 36)',\r\n    fulfillment: 'rgb(168, 85, 247)'\r\n  }\r\n  \r\n  return Object.entries(situationGroups).map(([situation, patterns]) => ({\r\n    label: formatSituation(`${situation}_high_vitality`).split('・')[0], // ステージ名のみ\r\n    data: patterns.map(pattern => ({\r\n      x: pattern.frequency,\r\n      y: pattern.successRate\r\n    })),\r\n    backgroundColor: colors[situation as keyof typeof colors] || 'rgb(107, 114, 128)',\r\n    borderColor: colors[situation as keyof typeof colors] || 'rgb(107, 114, 128)',\r\n    pointRadius: patterns.map(pattern => Math.max(6, pattern.frequency / 2)), // 頻度に応じてサイズ調整\r\n    pointHoverRadius: patterns.map(pattern => Math.max(8, pattern.frequency / 2 + 2))\r\n  }))\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data) return\r\n  \r\n  const datasets = createDatasets()\r\n  chartInstance.value.data.datasets = datasets\r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-4 flex items-center gap-2;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 300px;\r\n}\r\n\r\n.patterns-analysis {\r\n  @apply mt-4;\r\n}\r\n\r\n.pattern-list {\r\n  @apply space-y-3 max-h-40 overflow-y-auto;\r\n}\r\n\r\n.pattern-item {\r\n  @apply p-3 bg-gray-700 rounded-lg border-l-4 border-gray-500;\r\n}\r\n\r\n.pattern-item.high-success {\r\n  @apply border-green-500;\r\n}\r\n\r\n.pattern-item.low-success {\r\n  @apply border-red-500;\r\n}\r\n\r\n.pattern-header {\r\n  @apply flex justify-between items-center mb-2;\r\n}\r\n\r\n.pattern-situation {\r\n  @apply text-white font-medium;\r\n}\r\n\r\n.pattern-choice {\r\n  @apply text-blue-400 text-sm;\r\n}\r\n\r\n.pattern-stats {\r\n  @apply flex justify-between items-center text-sm;\r\n}\r\n\r\n.stat {\r\n  @apply flex gap-1;\r\n}\r\n\r\n.stat .label {\r\n  @apply text-gray-300;\r\n}\r\n\r\n.stat .value {\r\n  @apply text-white font-medium;\r\n}\r\n\r\n.pattern-recommendation {\r\n  @apply text-xs;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">⏱️ 決定時間分析</h3>\r\n    <div class=\"chart-controls\">\r\n      <select v-model=\"analysisMode\" @change=\"updateChart\" class=\"mode-selector\">\r\n        <option value=\"timeline\">時系列変化</option>\r\n        <option value=\"distribution\">分布分析</option>\r\n        <option value=\"average\">平均推移</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"decision-insights\">\r\n      <div class=\"insight-grid\">\r\n        <div class=\"insight-item\">\r\n          <div class=\"insight-icon\">🎯</div>\r\n          <div class=\"insight-content\">\r\n            <div class=\"insight-label\">平均決定時間</div>\r\n            <div class=\"insight-value\">{{ averageDecisionTime.toFixed(1) }}秒</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"insight-item\">\r\n          <div class=\"insight-icon\">⚡</div>\r\n          <div class=\"insight-content\">\r\n            <div class=\"insight-label\">最速決定</div>\r\n            <div class=\"insight-value\">{{ fastestDecision.toFixed(1) }}秒</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"insight-item\">\r\n          <div class=\"insight-icon\">🤔</div>\r\n          <div class=\"insight-content\">\r\n            <div class=\"insight-label\">最長思考</div>\r\n            <div class=\"insight-value\">{{ slowestDecision.toFixed(1) }}秒</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"insight-item\">\r\n          <div class=\"insight-icon\">📈</div>\r\n          <div class=\"insight-content\">\r\n            <div class=\"insight-label\">決定トレンド</div>\r\n            <div class=\"insight-value\">{{ decisionTrend }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"analysis-summary\">\r\n        <div class=\"summary-title\">パフォーマンス分析</div>\r\n        <div class=\"summary-content\">{{ performanceAnalysis }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface DecisionTimeData {\r\n  turn: number\r\n  decisionTime: number\r\n}\r\n\r\ninterface Props {\r\n  data: DecisionTimeData[]\r\n}\r\n\r\nconst props = defineProps<Props>()\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\nconst analysisMode = ref<'timeline' | 'distribution' | 'average'>('timeline')\r\n\r\n// 計算されたプロパティ\r\nconst averageDecisionTime = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  const total = props.data.reduce((sum, item) => sum + item.decisionTime, 0)\r\n  return total / props.data.length\r\n})\r\n\r\nconst fastestDecision = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return Math.min(...props.data.map(item => item.decisionTime))\r\n})\r\n\r\nconst slowestDecision = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return Math.max(...props.data.map(item => item.decisionTime))\r\n})\r\n\r\nconst decisionTrend = computed(() => {\r\n  if (!props.data || props.data.length < 2) return '不明'\r\n  \r\n  const firstHalf = props.data.slice(0, Math.floor(props.data.length / 2))\r\n  const secondHalf = props.data.slice(Math.floor(props.data.length / 2))\r\n  \r\n  const firstAvg = firstHalf.reduce((sum, item) => sum + item.decisionTime, 0) / firstHalf.length\r\n  const secondAvg = secondHalf.reduce((sum, item) => sum + item.decisionTime, 0) / secondHalf.length\r\n  \r\n  const difference = secondAvg - firstAvg\r\n  if (Math.abs(difference) < 0.5) return '安定'\r\n  return difference > 0 ? '慎重化' : '迅速化'\r\n})\r\n\r\nconst performanceAnalysis = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 'データが不足しています'\r\n  \r\n  const avg = averageDecisionTime.value\r\n  \r\n  if (avg < 3) {\r\n    return '非常に迅速な決定を行っています。直感的なプレイスタイルです。'\r\n  } else if (avg < 8) {\r\n    return 'バランスの取れた決定時間です。適度に考えてプレイしています。'\r\n  } else if (avg < 15) {\r\n    return '慎重に考えてからプレイしています。戦略的なアプローチです。'\r\n  } else {\r\n    return '非常に慎重なプレイスタイルです。より素早い決定も検討してみてください。'\r\n  }\r\n})\r\n\r\n// 分布データの生成\r\nconst distributionData = computed(() => {\r\n  if (!props.data || props.data.length === 0) return []\r\n  \r\n  const bins = [0, 2, 5, 10, 15, 20, 30, Infinity]\r\n  const labels = ['0-2秒', '2-5秒', '5-10秒', '10-15秒', '15-20秒', '20-30秒', '30秒以上']\r\n  \r\n  const distribution = bins.slice(0, -1).map((min, index) => {\r\n    const max = bins[index + 1]\r\n    const count = props.data.filter(item => \r\n      item.decisionTime >= min && item.decisionTime < max\r\n    ).length\r\n    return { label: labels[index], count }\r\n  })\r\n  \r\n  return distribution\r\n})\r\n\r\n// 移動平均データの生成\r\nconst movingAverageData = computed(() => {\r\n  if (!props.data || props.data.length < 3) return []\r\n  \r\n  const windowSize = 3\r\n  const result = []\r\n  \r\n  for (let i = windowSize - 1; i < props.data.length; i++) {\r\n    const window = props.data.slice(i - windowSize + 1, i + 1)\r\n    const average = window.reduce((sum, item) => sum + item.decisionTime, 0) / windowSize\r\n    result.push({\r\n      turn: props.data[i].turn,\r\n      average\r\n    })\r\n  }\r\n  \r\n  return result\r\n})\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value || !props.data || props.data.length === 0) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: getChartType(),\r\n    data: getChartData(),\r\n    options: getChartOptions()\r\n  })\r\n}\r\n\r\n// チャートタイプの取得\r\nconst getChartType = () => {\r\n  switch (analysisMode.value) {\r\n    case 'distribution':\r\n      return 'bar'\r\n    case 'average':\r\n    case 'timeline':\r\n    default:\r\n      return 'line'\r\n  }\r\n}\r\n\r\n// チャートデータの取得\r\nconst getChartData = () => {\r\n  switch (analysisMode.value) {\r\n    case 'distribution':\r\n      return {\r\n        labels: distributionData.value.map(item => item.label),\r\n        datasets: [{\r\n          label: '決定回数',\r\n          data: distributionData.value.map(item => item.count),\r\n          backgroundColor: 'rgba(59, 130, 246, 0.6)',\r\n          borderColor: 'rgb(59, 130, 246)',\r\n          borderWidth: 2,\r\n          borderRadius: 4\r\n        }]\r\n      }\r\n      \r\n    case 'average':\r\n      return {\r\n        labels: movingAverageData.value.map(item => `ターン${item.turn}`),\r\n        datasets: [{\r\n          label: '移動平均（3ターン）',\r\n          data: movingAverageData.value.map(item => item.average),\r\n          borderColor: 'rgb(34, 197, 94)',\r\n          backgroundColor: 'rgba(34, 197, 94, 0.1)',\r\n          fill: true,\r\n          tension: 0.4,\r\n          pointBackgroundColor: 'rgb(34, 197, 94)',\r\n          pointBorderColor: 'white',\r\n          pointBorderWidth: 2\r\n        }]\r\n      }\r\n      \r\n    case 'timeline':\r\n    default:\r\n      return {\r\n        labels: props.data.map(item => `ターン${item.turn}`),\r\n        datasets: [\r\n          {\r\n            label: '決定時間',\r\n            data: props.data.map(item => item.decisionTime),\r\n            borderColor: 'rgb(168, 85, 247)',\r\n            backgroundColor: 'rgba(168, 85, 247, 0.1)',\r\n            fill: true,\r\n            tension: 0.4,\r\n            pointBackgroundColor: 'rgb(168, 85, 247)',\r\n            pointBorderColor: 'white',\r\n            pointBorderWidth: 2\r\n          },\r\n          {\r\n            label: '平均ライン',\r\n            data: props.data.map(() => averageDecisionTime.value),\r\n            borderColor: 'rgb(251, 191, 36)',\r\n            backgroundColor: 'transparent',\r\n            borderDash: [5, 5],\r\n            pointRadius: 0,\r\n            tension: 0\r\n          }\r\n        ]\r\n      }\r\n  }\r\n}\r\n\r\n// チャートオプションの取得\r\nconst getChartOptions = () => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      title: {\r\n        display: false\r\n      },\r\n      legend: {\r\n        display: true,\r\n        position: 'top' as const,\r\n        labels: {\r\n          color: 'white',\r\n          usePointStyle: true\r\n        }\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n        titleColor: 'white',\r\n        bodyColor: 'white',\r\n        borderColor: 'rgba(75, 85, 99, 0.5)',\r\n        borderWidth: 1\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          color: 'rgba(75, 85, 99, 0.3)'\r\n        },\r\n        ticks: {\r\n          color: 'rgba(209, 213, 219, 0.8)'\r\n        }\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          color: 'rgba(75, 85, 99, 0.3)'\r\n        },\r\n        ticks: {\r\n          color: 'rgba(209, 213, 219, 0.8)',\r\n          callback: (value: any) => {\r\n            return analysisMode.value === 'distribution' \r\n              ? `${value}回`\r\n              : `${value}秒`\r\n          }\r\n        },\r\n        title: {\r\n          display: true,\r\n          text: analysisMode.value === 'distribution' ? '決定回数' : '時間（秒）',\r\n          color: 'rgba(209, 213, 219, 0.8)'\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (analysisMode.value !== 'distribution') {\r\n    return {\r\n      ...baseOptions,\r\n      elements: {\r\n        point: {\r\n          radius: 4,\r\n          hoverRadius: 6\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return baseOptions\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value) {\r\n    initChart()\r\n    return\r\n  }\r\n  \r\n  const newType = getChartType()\r\n  if (chartInstance.value.config.type !== newType) {\r\n    chartInstance.value.destroy()\r\n    initChart()\r\n    return\r\n  }\r\n  \r\n  chartInstance.value.data = getChartData()\r\n  chartInstance.value.options = getChartOptions()\r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データとモード変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n\r\nwatch(() => analysisMode.value, () => {\r\n  updateChart()\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.chart-controls {\r\n  @apply flex justify-end mb-4;\r\n}\r\n\r\n.mode-selector {\r\n  @apply px-3 py-1 bg-gray-700 border border-gray-600 rounded text-white text-sm;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 250px;\r\n}\r\n\r\n.decision-insights {\r\n  @apply mt-4 space-y-4;\r\n}\r\n\r\n.insight-grid {\r\n  @apply grid grid-cols-2 lg:grid-cols-4 gap-3;\r\n}\r\n\r\n.insight-item {\r\n  @apply flex items-center gap-3 p-3 bg-gray-700 rounded-lg;\r\n}\r\n\r\n.insight-icon {\r\n  @apply text-2xl;\r\n}\r\n\r\n.insight-content {\r\n  @apply flex-1;\r\n}\r\n\r\n.insight-label {\r\n  @apply text-gray-300 text-xs;\r\n}\r\n\r\n.insight-value {\r\n  @apply text-white font-bold text-lg;\r\n}\r\n\r\n.analysis-summary {\r\n  @apply p-4 bg-gray-700 rounded-lg;\r\n}\r\n\r\n.summary-title {\r\n  @apply text-white font-medium mb-2;\r\n}\r\n\r\n.summary-content {\r\n  @apply text-gray-300 text-sm leading-relaxed;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">\r\n      💗 リアルタイム活力変動\r\n      <span class=\"live-indicator\">🔴 LIVE</span>\r\n    </h3>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"live-stats\">\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">現在活力:</span>\r\n        <span class=\"value\" :class=\"getVitalityClass(currentVitality)\">{{ currentVitality }}</span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">変化量:</span>\r\n        <span class=\"value\" :class=\"getChangeClass(vitalityChange)\">\r\n          {{ vitalityChange > 0 ? '+' : '' }}{{ vitalityChange }}\r\n        </span>\r\n      </div>\r\n      <div class=\"stat-item\">\r\n        <span class=\"label\">危険度:</span>\r\n        <span class=\"value\" :class=\"getRiskClass(riskLevel)\">{{ riskLevel }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface VitalityPoint {\r\n  turn: number\r\n  vitality: number\r\n}\r\n\r\ninterface Props {\r\n  data: VitalityPoint[]\r\n  autoUpdate?: boolean\r\n  updateInterval?: number\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  autoUpdate: true,\r\n  updateInterval: 1000 // 1秒\r\n})\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\nlet updateTimer: number | null = null\r\n\r\n// 計算されたプロパティ\r\nconst currentVitality = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return props.data[props.data.length - 1].vitality\r\n})\r\n\r\nconst vitalityChange = computed(() => {\r\n  if (!props.data || props.data.length < 2) return 0\r\n  const current = props.data[props.data.length - 1].vitality\r\n  const previous = props.data[props.data.length - 2].vitality\r\n  return current - previous\r\n})\r\n\r\nconst riskLevel = computed(() => {\r\n  const vitality = currentVitality.value\r\n  if (vitality >= 80) return '安全'\r\n  if (vitality >= 60) return '注意'\r\n  if (vitality >= 40) return '警戒'\r\n  if (vitality >= 20) return '危険'\r\n  return '極危険'\r\n})\r\n\r\n// スタイルクラスの取得\r\nconst getVitalityClass = (vitality: number): string => {\r\n  if (vitality >= 80) return 'text-green-400'\r\n  if (vitality >= 60) return 'text-blue-400'\r\n  if (vitality >= 40) return 'text-yellow-400'\r\n  if (vitality >= 20) return 'text-orange-400'\r\n  return 'text-red-400'\r\n}\r\n\r\nconst getChangeClass = (change: number): string => {\r\n  if (change > 0) return 'text-green-400'\r\n  if (change < 0) return 'text-red-400'\r\n  return 'text-gray-400'\r\n}\r\n\r\nconst getRiskClass = (risk: string): string => {\r\n  const riskColors: Record<string, string> = {\r\n    '安全': 'text-green-400',\r\n    '注意': 'text-blue-400',\r\n    '警戒': 'text-yellow-400',\r\n    '危険': 'text-orange-400',\r\n    '極危険': 'text-red-400 animate-pulse'\r\n  }\r\n  return riskColors[risk] || 'text-gray-400'\r\n}\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: '活力',\r\n          data: [],\r\n          borderColor: 'rgb(239, 68, 68)',\r\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n          fill: true,\r\n          tension: 0.4,\r\n          pointBackgroundColor: 'rgb(239, 68, 68)',\r\n          pointBorderColor: 'white',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 5,\r\n          pointHoverRadius: 7\r\n        },\r\n        {\r\n          label: '危険ライン',\r\n          data: [],\r\n          borderColor: 'rgb(245, 101, 101)',\r\n          backgroundColor: 'transparent',\r\n          borderDash: [10, 5],\r\n          fill: false,\r\n          pointRadius: 0,\r\n          tension: 0\r\n        },\r\n        {\r\n          label: '警戒ライン',\r\n          data: [],\r\n          borderColor: 'rgb(251, 191, 36)',\r\n          backgroundColor: 'transparent',\r\n          borderDash: [5, 10],\r\n          fill: false,\r\n          pointRadius: 0,\r\n          tension: 0\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 750,\r\n        easing: 'easeInOutQuart'\r\n      },\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            color: 'white',\r\n            usePointStyle: true,\r\n            filter: (legendItem) => legendItem.text === '活力'\r\n          }\r\n        },\r\n        tooltip: {\r\n          mode: 'index',\r\n          intersect: false,\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            title: (context) => {\r\n              return `ターン ${context[0].label}`\r\n            },\r\n            label: (context) => {\r\n              if (context.datasetIndex === 0) {\r\n                const vitality = context.parsed.y\r\n                let status = ''\r\n                if (vitality >= 80) status = '絶好調'\r\n                else if (vitality >= 60) status = '好調'\r\n                else if (vitality >= 40) status = '普通'\r\n                else if (vitality >= 20) status = '要注意'\r\n                else status = '危険'\r\n                \r\n                return `活力: ${vitality} (${status})`\r\n              }\r\n              return ''\r\n            },\r\n            afterBody: (context) => {\r\n              if (context.length > 0 && context[0].dataIndex > 0) {\r\n                const currentIndex = context[0].dataIndex\r\n                const currentVitality = props.data[currentIndex].vitality\r\n                const previousVitality = props.data[currentIndex - 1].vitality\r\n                const change = currentVitality - previousVitality\r\n                \r\n                return `変化: ${change > 0 ? '+' : ''}${change}`\r\n              }\r\n              return ''\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            maxTicksLimit: 10\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'ターン',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          max: 100,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            stepSize: 20\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '活力',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'nearest',\r\n        axis: 'x',\r\n        intersect: false\r\n      },\r\n      elements: {\r\n        line: {\r\n          tension: 0.4\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data || props.data.length === 0) return\r\n  \r\n  const labels = props.data.map(point => point.turn.toString())\r\n  const vitalityData = props.data.map(point => point.vitality)\r\n  const dangerLineData = props.data.map(() => 20) // 危険ライン\r\n  const cautionLineData = props.data.map(() => 40) // 警戒ライン\r\n  \r\n  // 最新の活力値に応じて線の色を動的に変更\r\n  const currentLevel = currentVitality.value\r\n  let borderColor = 'rgb(239, 68, 68)'\r\n  let backgroundColor = 'rgba(239, 68, 68, 0.1)'\r\n  \r\n  if (currentLevel >= 80) {\r\n    borderColor = 'rgb(34, 197, 94)'\r\n    backgroundColor = 'rgba(34, 197, 94, 0.1)'\r\n  } else if (currentLevel >= 60) {\r\n    borderColor = 'rgb(59, 130, 246)'\r\n    backgroundColor = 'rgba(59, 130, 246, 0.1)'\r\n  } else if (currentLevel >= 40) {\r\n    borderColor = 'rgb(251, 191, 36)'\r\n    backgroundColor = 'rgba(251, 191, 36, 0.1)'\r\n  } else if (currentLevel >= 20) {\r\n    borderColor = 'rgb(245, 101, 101)'\r\n    backgroundColor = 'rgba(245, 101, 101, 0.1)'\r\n  }\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = vitalityData\r\n  chartInstance.value.data.datasets[0].borderColor = borderColor\r\n  chartInstance.value.data.datasets[0].backgroundColor = backgroundColor\r\n  chartInstance.value.data.datasets[0].pointBackgroundColor = borderColor\r\n  chartInstance.value.data.datasets[1].data = dangerLineData\r\n  chartInstance.value.data.datasets[2].data = cautionLineData\r\n  \r\n  // 最新のポイントを強調\r\n  const pointRadii = vitalityData.map((_, index) => \r\n    index === vitalityData.length - 1 ? 8 : 4\r\n  )\r\n  chartInstance.value.data.datasets[0].pointRadius = pointRadii\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// 自動更新の設定\r\nconst startAutoUpdate = () => {\r\n  if (props.autoUpdate && !updateTimer) {\r\n    updateTimer = window.setInterval(() => {\r\n      updateChart()\r\n    }, props.updateInterval)\r\n  }\r\n}\r\n\r\nconst stopAutoUpdate = () => {\r\n  if (updateTimer) {\r\n    clearInterval(updateTimer)\r\n    updateTimer = null\r\n  }\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  stopAutoUpdate()\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n  updateChart()\r\n  startAutoUpdate()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n\r\n// 自動更新設定の変更監視\r\nwatch(() => props.autoUpdate, (newValue) => {\r\n  if (newValue) {\r\n    startAutoUpdate()\r\n  } else {\r\n    stopAutoUpdate()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.live-indicator {\r\n  @apply text-xs px-2 py-1 bg-red-600 rounded-full animate-pulse;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 280px;\r\n}\r\n\r\n.live-stats {\r\n  @apply flex gap-4 mt-4 text-sm;\r\n}\r\n\r\n.stat-item {\r\n  @apply flex flex-col gap-1 p-3 bg-gray-700 rounded-lg flex-1;\r\n}\r\n\r\n.stat-item .label {\r\n  @apply text-gray-300 text-xs;\r\n}\r\n\r\n.stat-item .value {\r\n  @apply font-bold text-lg;\r\n}\r\n</style>","<template>\r\n  <div class=\"chart-wrapper\">\r\n    <h3 class=\"chart-title\">\r\n      ⏱️ リアルタイム決定時間\r\n      <span class=\"live-indicator\">🔴 LIVE</span>\r\n    </h3>\r\n    <div class=\"chart-container\">\r\n      <canvas ref=\"chartCanvas\"></canvas>\r\n    </div>\r\n    <div class=\"time-metrics\">\r\n      <div class=\"metric-item\">\r\n        <div class=\"metric-icon\">⚡</div>\r\n        <div class=\"metric-content\">\r\n          <div class=\"metric-label\">最新決定</div>\r\n          <div class=\"metric-value\">{{ latestDecisionTime.toFixed(1) }}秒</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"metric-item\">\r\n        <div class=\"metric-icon\">📊</div>\r\n        <div class=\"metric-content\">\r\n          <div class=\"metric-label\">平均時間</div>\r\n          <div class=\"metric-value\">{{ averageTime.toFixed(1) }}秒</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"metric-item\">\r\n        <div class=\"metric-icon\">🎯</div>\r\n        <div class=\"metric-content\">\r\n          <div class=\"metric-label\">決定パターン</div>\r\n          <div class=\"metric-value\">{{ decisionPattern }}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, onMounted, onUnmounted, watch, computed } from 'vue'\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n} from 'chart.js'\r\n\r\n// Chart.jsの登録\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n)\r\n\r\ninterface DecisionTimeData {\r\n  turn: number\r\n  decisionTime: number\r\n}\r\n\r\ninterface Props {\r\n  data: DecisionTimeData[]\r\n  autoUpdate?: boolean\r\n  updateInterval?: number\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  autoUpdate: true,\r\n  updateInterval: 1000 // 1秒\r\n})\r\n\r\nconst chartCanvas = ref<HTMLCanvasElement>()\r\nconst chartInstance = ref<Chart | null>(null)\r\nlet updateTimer: number | null = null\r\n\r\n// 計算されたプロパティ\r\nconst latestDecisionTime = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  return props.data[props.data.length - 1].decisionTime\r\n})\r\n\r\nconst averageTime = computed(() => {\r\n  if (!props.data || props.data.length === 0) return 0\r\n  const total = props.data.reduce((sum, item) => sum + item.decisionTime, 0)\r\n  return total / props.data.length\r\n})\r\n\r\nconst decisionPattern = computed(() => {\r\n  if (!props.data || props.data.length < 3) return '分析中'\r\n  \r\n  const recent = props.data.slice(-3)\r\n  const avgRecent = recent.reduce((sum, item) => sum + item.decisionTime, 0) / 3\r\n  const overall = averageTime.value\r\n  \r\n  if (avgRecent < overall * 0.8) return '迅速化'\r\n  if (avgRecent > overall * 1.2) return '慎重化'\r\n  return '安定'\r\n})\r\n\r\n// チャートの初期化\r\nconst initChart = () => {\r\n  if (!chartCanvas.value) return\r\n  \r\n  const ctx = chartCanvas.value.getContext('2d')\r\n  if (!ctx) return\r\n  \r\n  chartInstance.value = new Chart(ctx, {\r\n    type: 'line',\r\n    data: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          label: '決定時間',\r\n          data: [],\r\n          borderColor: 'rgb(168, 85, 247)',\r\n          backgroundColor: 'rgba(168, 85, 247, 0.1)',\r\n          fill: true,\r\n          tension: 0.4,\r\n          pointBackgroundColor: 'rgb(168, 85, 247)',\r\n          pointBorderColor: 'white',\r\n          pointBorderWidth: 2,\r\n          pointRadius: 5,\r\n          pointHoverRadius: 7\r\n        },\r\n        {\r\n          label: '目標時間（5秒）',\r\n          data: [],\r\n          borderColor: 'rgb(34, 197, 94)',\r\n          backgroundColor: 'transparent',\r\n          borderDash: [5, 5],\r\n          fill: false,\r\n          pointRadius: 0,\r\n          tension: 0\r\n        }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      animation: {\r\n        duration: 500,\r\n        easing: 'easeInOutQuart'\r\n      },\r\n      plugins: {\r\n        title: {\r\n          display: false\r\n        },\r\n        legend: {\r\n          display: true,\r\n          position: 'top',\r\n          labels: {\r\n            color: 'white',\r\n            usePointStyle: true,\r\n            filter: (legendItem) => legendItem.text === '決定時間'\r\n          }\r\n        },\r\n        tooltip: {\r\n          mode: 'index',\r\n          intersect: false,\r\n          backgroundColor: 'rgba(17, 24, 39, 0.9)',\r\n          titleColor: 'white',\r\n          bodyColor: 'white',\r\n          borderColor: 'rgba(75, 85, 99, 0.5)',\r\n          borderWidth: 1,\r\n          callbacks: {\r\n            title: (context) => {\r\n              return `ターン ${context[0].label}`\r\n            },\r\n            label: (context) => {\r\n              if (context.datasetIndex === 0) {\r\n                const time = context.parsed.y\r\n                let speed = ''\r\n                if (time <= 3) speed = '超高速'\r\n                else if (time <= 5) speed = '高速'\r\n                else if (time <= 10) speed = '普通'\r\n                else if (time <= 15) speed = '慎重'\r\n                else speed = '超慎重'\r\n                \r\n                return `決定時間: ${time.toFixed(1)}秒 (${speed})`\r\n              }\r\n              return ''\r\n            },\r\n            afterBody: (context) => {\r\n              if (context.length > 0) {\r\n                const time = context[0].parsed.y\r\n                const target = 5\r\n                const diff = time - target\r\n                \r\n                if (Math.abs(diff) < 1) {\r\n                  return '🎯 理想的な決定時間です'\r\n                } else if (diff > 0) {\r\n                  return `⏳ 目標より${diff.toFixed(1)}秒長いです`\r\n                } else {\r\n                  return `⚡ 目標より${Math.abs(diff).toFixed(1)}秒速いです`\r\n                }\r\n              }\r\n              return ''\r\n            }\r\n          }\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            maxTicksLimit: 8\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'ターン',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        },\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            color: 'rgba(75, 85, 99, 0.3)'\r\n          },\r\n          ticks: {\r\n            color: 'rgba(209, 213, 219, 0.8)',\r\n            callback: (value) => `${value}秒`\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: '時間（秒）',\r\n            color: 'rgba(209, 213, 219, 0.8)'\r\n          }\r\n        }\r\n      },\r\n      interaction: {\r\n        mode: 'nearest',\r\n        axis: 'x',\r\n        intersect: false\r\n      },\r\n      elements: {\r\n        line: {\r\n          tension: 0.4\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n// チャートデータの更新\r\nconst updateChart = () => {\r\n  if (!chartInstance.value || !props.data || props.data.length === 0) return\r\n  \r\n  const labels = props.data.map(point => point.turn.toString())\r\n  const timeData = props.data.map(point => point.decisionTime)\r\n  const targetData = props.data.map(() => 5) // 目標時間5秒\r\n  \r\n  // 最新の決定時間に応じて線の色を動的に変更\r\n  const latestTime = latestDecisionTime.value\r\n  let borderColor = 'rgb(168, 85, 247)'\r\n  let backgroundColor = 'rgba(168, 85, 247, 0.1)'\r\n  \r\n  if (latestTime <= 3) {\r\n    borderColor = 'rgb(34, 197, 94)' // 緑 - 高速\r\n    backgroundColor = 'rgba(34, 197, 94, 0.1)'\r\n  } else if (latestTime <= 5) {\r\n    borderColor = 'rgb(59, 130, 246)' // 青 - 理想\r\n    backgroundColor = 'rgba(59, 130, 246, 0.1)'\r\n  } else if (latestTime <= 10) {\r\n    borderColor = 'rgb(251, 191, 36)' // 黄 - 普通\r\n    backgroundColor = 'rgba(251, 191, 36, 0.1)'\r\n  } else if (latestTime <= 15) {\r\n    borderColor = 'rgb(245, 101, 101)' // オレンジ - 慎重\r\n    backgroundColor = 'rgba(245, 101, 101, 0.1)'\r\n  } else {\r\n    borderColor = 'rgb(239, 68, 68)' // 赤 - 超慎重\r\n    backgroundColor = 'rgba(239, 68, 68, 0.1)'\r\n  }\r\n  \r\n  chartInstance.value.data.labels = labels\r\n  chartInstance.value.data.datasets[0].data = timeData\r\n  chartInstance.value.data.datasets[0].borderColor = borderColor\r\n  chartInstance.value.data.datasets[0].backgroundColor = backgroundColor\r\n  chartInstance.value.data.datasets[0].pointBackgroundColor = borderColor\r\n  chartInstance.value.data.datasets[1].data = targetData\r\n  \r\n  // 最新のポイントを強調\r\n  const pointRadii = timeData.map((_, index) => \r\n    index === timeData.length - 1 ? 8 : 4\r\n  )\r\n  const pointColors = timeData.map((time, index) => {\r\n    if (index === timeData.length - 1) {\r\n      // 最新ポイントは特別な色\r\n      if (time <= 3) return 'rgb(34, 197, 94)'\r\n      if (time <= 5) return 'rgb(59, 130, 246)'\r\n      if (time <= 10) return 'rgb(251, 191, 36)'\r\n      if (time <= 15) return 'rgb(245, 101, 101)'\r\n      return 'rgb(239, 68, 68)'\r\n    }\r\n    return borderColor\r\n  })\r\n  \r\n  chartInstance.value.data.datasets[0].pointRadius = pointRadii\r\n  chartInstance.value.data.datasets[0].pointBackgroundColor = pointColors\r\n  \r\n  chartInstance.value.update('active')\r\n}\r\n\r\n// 自動更新の設定\r\nconst startAutoUpdate = () => {\r\n  if (props.autoUpdate && !updateTimer) {\r\n    updateTimer = window.setInterval(() => {\r\n      updateChart()\r\n    }, props.updateInterval)\r\n  }\r\n}\r\n\r\nconst stopAutoUpdate = () => {\r\n  if (updateTimer) {\r\n    clearInterval(updateTimer)\r\n    updateTimer = null\r\n  }\r\n}\r\n\r\n// チャートの破棄\r\nconst destroyChart = () => {\r\n  stopAutoUpdate()\r\n  if (chartInstance.value) {\r\n    chartInstance.value.destroy()\r\n    chartInstance.value = null\r\n  }\r\n}\r\n\r\n// ライフサイクル\r\nonMounted(() => {\r\n  initChart()\r\n  updateChart()\r\n  startAutoUpdate()\r\n})\r\n\r\nonUnmounted(() => {\r\n  destroyChart()\r\n})\r\n\r\n// データ変更の監視\r\nwatch(() => props.data, () => {\r\n  updateChart()\r\n}, { deep: true })\r\n\r\n// 自動更新設定の変更監視\r\nwatch(() => props.autoUpdate, (newValue) => {\r\n  if (newValue) {\r\n    startAutoUpdate()\r\n  } else {\r\n    stopAutoUpdate()\r\n  }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.chart-wrapper {\r\n  @apply w-full h-full flex flex-col;\r\n}\r\n\r\n.chart-title {\r\n  @apply text-lg font-semibold text-white mb-2 flex items-center gap-2;\r\n}\r\n\r\n.live-indicator {\r\n  @apply text-xs px-2 py-1 bg-red-600 rounded-full animate-pulse;\r\n}\r\n\r\n.chart-container {\r\n  @apply flex-1 min-h-0 relative;\r\n  height: 250px;\r\n}\r\n\r\n.time-metrics {\r\n  @apply flex gap-3 mt-4;\r\n}\r\n\r\n.metric-item {\r\n  @apply flex items-center gap-3 p-3 bg-gray-700 rounded-lg flex-1;\r\n}\r\n\r\n.metric-icon {\r\n  @apply text-2xl;\r\n}\r\n\r\n.metric-content {\r\n  @apply flex-1;\r\n}\r\n\r\n.metric-label {\r\n  @apply text-gray-300 text-xs;\r\n}\r\n\r\n.metric-value {\r\n  @apply font-bold text-lg text-white;\r\n}\r\n</style>","<template>\r\n  <div class=\"statistics-dashboard\">\r\n    <!-- ヘッダー -->\r\n    <div class=\"dashboard-header\">\r\n      <h2 class=\"dashboard-title\">\r\n        <span class=\"icon\">📊</span>\r\n        プレイヤー統計ダッシュボード\r\n      </h2>\r\n      <div class=\"header-controls\">\r\n        <button @click=\"refreshData\" class=\"refresh-btn\" :disabled=\"loading\">\r\n          <span class=\"icon\">🔄</span>\r\n          {{ loading ? '更新中...' : '更新' }}\r\n        </button>\r\n        <button @click=\"exportData\" class=\"export-btn\">\r\n          <span class=\"icon\">💾</span>\r\n          エクスポート\r\n        </button>\r\n        <button @click=\"$emit('close')\" class=\"close-btn\">\r\n          <span class=\"icon\">✕</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- フィルターコントロール -->\r\n    <div class=\"filter-section\" v-if=\"showFilters\">\r\n      <div class=\"filter-row\">\r\n        <div class=\"filter-group\">\r\n          <label>期間</label>\r\n          <select v-model=\"filters.dateRange\" @change=\"applyFilters\">\r\n            <option value=\"all\">全期間</option>\r\n            <option value=\"week\">過去1週間</option>\r\n            <option value=\"month\">過去1ヶ月</option>\r\n            <option value=\"quarter\">過去3ヶ月</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"filter-group\">\r\n          <label>ゲームステータス</label>\r\n          <select v-model=\"filters.gameStatus\" @change=\"applyFilters\">\r\n            <option value=\"all\">すべて</option>\r\n            <option value=\"victory\">勝利</option>\r\n            <option value=\"game_over\">ゲームオーバー</option>\r\n            <option value=\"in_progress\">進行中</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"filter-group\">\r\n          <label>ステージ</label>\r\n          <select v-model=\"filters.stage\" @change=\"applyFilters\">\r\n            <option value=\"all\">すべて</option>\r\n            <option value=\"youth\">青年期</option>\r\n            <option value=\"middle\">中年期</option>\r\n            <option value=\"fulfillment\">充実期</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- タブナビゲーション -->\r\n    <div class=\"tab-navigation\">\r\n      <button \r\n        v-for=\"tab in tabs\" \r\n        :key=\"tab.key\"\r\n        @click=\"activeTab = tab.key\"\r\n        :class=\"['tab-button', { active: activeTab === tab.key }]\"\r\n      >\r\n        <span class=\"icon\">{{ tab.icon }}</span>\r\n        {{ tab.label }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- メインコンテンツ -->\r\n    <div class=\"dashboard-content\" v-if=\"!loading\">\r\n      <!-- 概要タブ -->\r\n      <div v-if=\"activeTab === 'overview'\" class=\"tab-content\">\r\n        <div class=\"stats-grid\">\r\n          <StatsSummaryCard \r\n            title=\"基本統計\"\r\n            :stats=\"basicStats\"\r\n            icon=\"🎮\"\r\n          />\r\n          <StatsSummaryCard \r\n            title=\"パフォーマンス\"\r\n            :stats=\"performanceStats\"\r\n            icon=\"⚡\"\r\n          />\r\n          <StatsSummaryCard \r\n            title=\"プレイ時間\"\r\n            :stats=\"timeStats\"\r\n            icon=\"⏱️\"\r\n          />\r\n          <StatsSummaryCard \r\n            title=\"保険統計\"\r\n            :stats=\"insuranceStats\"\r\n            icon=\"🛡️\"\r\n          />\r\n        </div>\r\n\r\n        <!-- 主要チャート -->\r\n        <div class=\"main-charts\">\r\n          <div class=\"chart-container\">\r\n            <GameProgressChart :data=\"progressChartData\" />\r\n          </div>\r\n          <div class=\"chart-container\">\r\n            <SuccessRateChart :data=\"successRateData\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 詳細分析タブ -->\r\n      <div v-if=\"activeTab === 'detailed'\" class=\"tab-content\">\r\n        <div class=\"detailed-charts\">\r\n          <div class=\"chart-row\">\r\n            <div class=\"chart-container half\">\r\n              <VitalityTrendChart :data=\"vitalityTrendData\" />\r\n            </div>\r\n            <div class=\"chart-container half\">\r\n              <StageAnalysisChart :data=\"stageAnalysisData\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"chart-row\">\r\n            <div class=\"chart-container full\">\r\n              <CardUsageChart :data=\"cardUsageData\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 戦略パターンタブ -->\r\n      <div v-if=\"activeTab === 'patterns'\" class=\"tab-content\">\r\n        <div class=\"patterns-section\">\r\n          <StrategyPatternsChart :data=\"strategyPatternsData\" />\r\n          <DecisionAnalysisChart :data=\"decisionAnalysisData\" />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- リアルタイムタブ -->\r\n      <div v-if=\"activeTab === 'realtime'\" class=\"tab-content\">\r\n        <div class=\"realtime-section\" v-if=\"realtimeData\">\r\n          <div class=\"realtime-header\">\r\n            <h3>現在のセッション</h3>\r\n            <div class=\"session-info\">\r\n              <span>開始時刻: {{ formatTime(realtimeData.currentSession.startTime) }}</span>\r\n              <span>プレイ済みゲーム: {{ realtimeData.currentSession.gamesPlayed }}</span>\r\n              <span>連続記録: {{ realtimeData.currentSession.currentStreak }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"realtime-charts\">\r\n            <LiveVitalityChart :data=\"realtimeData.live.vitalityOverTime\" />\r\n            <DecisionTimeChart :data=\"realtimeData.live.decisionTimes\" />\r\n          </div>\r\n        </div>\r\n        <div v-else class=\"no-session\">\r\n          <p>現在アクティブなゲームセッションがありません</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- ローディング表示 -->\r\n    <div v-if=\"loading\" class=\"loading-overlay\">\r\n      <div class=\"loading-spinner\">\r\n        <span class=\"icon\">⏳</span>\r\n        <p>統計データを読み込み中...</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- エラー表示 -->\r\n    <div v-if=\"error\" class=\"error-message\">\r\n      <span class=\"icon\">⚠️</span>\r\n      <p>{{ error }}</p>\r\n      <button @click=\"retryLoad\">再試行</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { ref, computed, onMounted, onUnmounted, watch } from 'vue'\r\nimport { StatisticsDataService, type StatisticsData, type StatisticsFilter, type RealtimeStatistics } from '../../domain/services/StatisticsDataService'\r\n\r\n// コンポーネントのインポート\r\nimport StatsSummaryCard from './StatsSummaryCard.vue'\r\nimport GameProgressChart from './charts/GameProgressChart.vue'\r\nimport SuccessRateChart from './charts/SuccessRateChart.vue'\r\nimport VitalityTrendChart from './charts/VitalityTrendChart.vue'\r\nimport StageAnalysisChart from './charts/StageAnalysisChart.vue'\r\nimport CardUsageChart from './charts/CardUsageChart.vue'\r\nimport StrategyPatternsChart from './charts/StrategyPatternsChart.vue'\r\nimport DecisionAnalysisChart from './charts/DecisionAnalysisChart.vue'\r\nimport LiveVitalityChart from './charts/LiveVitalityChart.vue'\r\nimport DecisionTimeChart from './charts/DecisionTimeChart.vue'\r\n\r\n// Props\r\ninterface Props {\r\n  autoRefresh?: boolean\r\n  refreshInterval?: number\r\n}\r\n\r\nconst props = withDefaults(defineProps<Props>(), {\r\n  autoRefresh: true,\r\n  refreshInterval: 30000 // 30秒\r\n})\r\n\r\n// Emits\r\nconst emit = defineEmits<{\r\n  close: []\r\n  dataUpdated: [data: StatisticsData]\r\n}>()\r\n\r\n// リアクティブデータ\r\nconst statisticsService = StatisticsDataService.getInstance()\r\nconst loading = ref(false)\r\nconst error = ref('')\r\nconst statisticsData = ref<StatisticsData | null>(null)\r\nconst realtimeData = ref<RealtimeStatistics | null>(null)\r\nconst activeTab = ref('overview')\r\nconst showFilters = ref(false)\r\n\r\n// フィルター設定\r\nconst filters = ref({\r\n  dateRange: 'all',\r\n  gameStatus: 'all',\r\n  stage: 'all'\r\n})\r\n\r\n// タブ設定\r\nconst tabs = [\r\n  { key: 'overview', label: '概要', icon: '📊' },\r\n  { key: 'detailed', label: '詳細分析', icon: '🔍' },\r\n  { key: 'patterns', label: '戦略パターン', icon: '🧭' },\r\n  { key: 'realtime', label: 'リアルタイム', icon: '📈' }\r\n]\r\n\r\n// 自動更新のインターバル\r\nlet refreshTimer: number | null = null\r\nlet unsubscribe: (() => void) | null = null\r\n\r\n// 計算されたプロパティ\r\nconst basicStats = computed(() => {\r\n  if (!statisticsData.value) return []\r\n  const data = statisticsData.value\r\n  return [\r\n    { label: '総ゲーム数', value: data.totalGames.toString(), trend: '+' },\r\n    { label: '完了ゲーム数', value: data.completedGames.toString(), trend: '+' },\r\n    { label: '勝利ゲーム数', value: data.victoryGames.toString(), trend: '+' },\r\n    { label: '勝利率', value: `${((data.victoryGames / Math.max(data.completedGames, 1)) * 100).toFixed(1)}%`, trend: '=' }\r\n  ]\r\n})\r\n\r\nconst performanceStats = computed(() => {\r\n  if (!statisticsData.value) return []\r\n  const data = statisticsData.value\r\n  return [\r\n    { label: 'チャレンジ成功率', value: `${data.challengeSuccessRate.toFixed(1)}%`, trend: data.recentTrends.performanceImprovement > 0 ? '↗' : '↘' },\r\n    { label: '平均活力', value: data.averageVitality.toFixed(1), trend: '=' },\r\n    { label: '最高活力', value: data.highestVitality.toString(), trend: '+' },\r\n    { label: '平均ターン数', value: data.averageTurnsPerGame.toFixed(1), trend: '=' }\r\n  ]\r\n})\r\n\r\nconst timeStats = computed(() => {\r\n  if (!statisticsData.value) return []\r\n  const data = statisticsData.value\r\n  return [\r\n    { label: '総プレイ時間', value: formatDuration(data.totalPlayTime), trend: '+' },\r\n    { label: '平均ゲーム時間', value: formatDuration(data.averageGameDuration), trend: data.recentTrends.playTimeIncrease > 0 ? '↗' : '↘' },\r\n    { label: '今日のプレイ', value: getTodayPlayTime(), trend: '=' },\r\n    { label: '連続プレイ記録', value: getCurrentStreak(), trend: '+' }\r\n  ]\r\n})\r\n\r\nconst insuranceStats = computed(() => {\r\n  if (!statisticsData.value) return []\r\n  const data = statisticsData.value\r\n  return [\r\n    { label: '保険購入回数', value: data.totalInsurancePurchases.toString(), trend: '+' },\r\n    { label: '平均保険負担', value: data.averageInsuranceBurden.toFixed(1), trend: '=' },\r\n    { label: '保険効果', value: `${data.insuranceEffectiveness.toFixed(1)}%`, trend: data.insuranceEffectiveness > 0 ? '↗' : '↘' },\r\n    { label: '人気保険', value: getMostPopularInsurance(), trend: '=' }\r\n  ]\r\n})\r\n\r\nconst progressChartData = computed(() => {\r\n  return statisticsData.value?.gameHistoryByDate || []\r\n})\r\n\r\nconst successRateData = computed(() => {\r\n  if (!statisticsData.value) return {}\r\n  return statisticsData.value.stageSuccessRates\r\n})\r\n\r\nconst vitalityTrendData = computed(() => {\r\n  return realtimeData.value?.live.vitalityOverTime || []\r\n})\r\n\r\nconst stageAnalysisData = computed(() => {\r\n  if (!statisticsData.value) return {}\r\n  return statisticsData.value.stageReachCounts\r\n})\r\n\r\nconst cardUsageData = computed(() => {\r\n  if (!statisticsData.value) return {}\r\n  return statisticsData.value.cardTypeUsage\r\n})\r\n\r\nconst strategyPatternsData = computed(() => {\r\n  return statisticsData.value?.decisionPatterns || []\r\n})\r\n\r\nconst decisionAnalysisData = computed(() => {\r\n  return realtimeData.value?.live.decisionTimes || []\r\n})\r\n\r\n// メソッド\r\nconst refreshData = async () => {\r\n  loading.value = true\r\n  error.value = ''\r\n  \r\n  try {\r\n    // 統計データを取得\r\n    const filters = createFilterFromUI()\r\n    statisticsData.value = statisticsService.generateStatistics(filters)\r\n    \r\n    // リアルタイムデータを取得\r\n    realtimeData.value = statisticsService.getRealtimeStatistics()\r\n    \r\n    emit('dataUpdated', statisticsData.value)\r\n  } catch (err) {\r\n    error.value = `データの読み込みに失敗しました: ${err}`\r\n  } finally {\r\n    loading.value = false\r\n  }\r\n}\r\n\r\nconst applyFilters = () => {\r\n  refreshData()\r\n}\r\n\r\nconst exportData = () => {\r\n  try {\r\n    const jsonData = statisticsService.exportData('json')\r\n    const blob = new Blob([jsonData], { type: 'application/json' })\r\n    const url = URL.createObjectURL(blob)\r\n    \r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = `game-statistics-${new Date().toISOString().split('T')[0]}.json`\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    URL.revokeObjectURL(url)\r\n  } catch (err) {\r\n    error.value = `エクスポートに失敗しました: ${err}`\r\n  }\r\n}\r\n\r\nconst retryLoad = () => {\r\n  refreshData()\r\n}\r\n\r\nconst createFilterFromUI = (): StatisticsFilter => {\r\n  const filter: StatisticsFilter = {}\r\n  \r\n  if (filters.value.dateRange !== 'all') {\r\n    const now = new Date()\r\n    const start = new Date()\r\n    \r\n    switch (filters.value.dateRange) {\r\n      case 'week':\r\n        start.setDate(now.getDate() - 7)\r\n        break\r\n      case 'month':\r\n        start.setMonth(now.getMonth() - 1)\r\n        break\r\n      case 'quarter':\r\n        start.setMonth(now.getMonth() - 3)\r\n        break\r\n    }\r\n    \r\n    filter.dateRange = { start, end: now }\r\n  }\r\n  \r\n  if (filters.value.gameStatus !== 'all') {\r\n    filter.gameStatus = [filters.value.gameStatus as any]\r\n  }\r\n  \r\n  if (filters.value.stage !== 'all') {\r\n    filter.stages = [filters.value.stage as any]\r\n  }\r\n  \r\n  return filter\r\n}\r\n\r\nconst formatDuration = (ms: number): string => {\r\n  const seconds = Math.floor(ms / 1000)\r\n  const minutes = Math.floor(seconds / 60)\r\n  const hours = Math.floor(minutes / 60)\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}時間${minutes % 60}分`\r\n  } else if (minutes > 0) {\r\n    return `${minutes}分${seconds % 60}秒`\r\n  } else {\r\n    return `${seconds}秒`\r\n  }\r\n}\r\n\r\nconst formatTime = (date: Date): string => {\r\n  return date.toLocaleTimeString('ja-JP')\r\n}\r\n\r\nconst getTodayPlayTime = (): string => {\r\n  // 簡易実装: 今日のプレイ時間を計算\r\n  if (!statisticsData.value) return '0分'\r\n  \r\n  const today = new Date().toISOString().split('T')[0]\r\n  const todayData = statisticsData.value.gameHistoryByDate.find(d => d.date === today)\r\n  \r\n  return todayData ? formatDuration(todayData.totalPlayTime) : '0分'\r\n}\r\n\r\nconst getCurrentStreak = (): string => {\r\n  if (realtimeData.value) {\r\n    return `${realtimeData.value.currentSession.currentStreak}勝`\r\n  }\r\n  return '0勝'\r\n}\r\n\r\nconst getMostPopularInsurance = (): string => {\r\n  if (!statisticsData.value) return '-'\r\n  \r\n  const usage = statisticsData.value.insuranceTypeUsage\r\n  const entries = Object.entries(usage)\r\n  \r\n  if (entries.length === 0) return '-'\r\n  \r\n  const most = entries.reduce((a, b) => a[1] > b[1] ? a : b)\r\n  return most[0]\r\n}\r\n\r\n// 自動更新の設定\r\nconst setupAutoRefresh = () => {\r\n  if (props.autoRefresh && !refreshTimer) {\r\n    refreshTimer = window.setInterval(refreshData, props.refreshInterval)\r\n  }\r\n}\r\n\r\nconst clearAutoRefresh = () => {\r\n  if (refreshTimer) {\r\n    clearInterval(refreshTimer)\r\n    refreshTimer = null\r\n  }\r\n}\r\n\r\n// ライフサイクルフック\r\nonMounted(() => {\r\n  refreshData()\r\n  setupAutoRefresh()\r\n  \r\n  // データ変更の購読\r\n  unsubscribe = statisticsService.subscribe((data) => {\r\n    statisticsData.value = data\r\n    emit('dataUpdated', data)\r\n  })\r\n})\r\n\r\nonUnmounted(() => {\r\n  clearAutoRefresh()\r\n  if (unsubscribe) {\r\n    unsubscribe()\r\n  }\r\n})\r\n\r\n// フィルター変更の監視  \r\nwatch(() => filters.value, () => {\r\n  applyFilters()\r\n}, { deep: true })\r\n</script>\r\n\r\n<style scoped>\r\n.statistics-dashboard {\r\n  @apply w-full h-full bg-gray-900 text-white overflow-hidden flex flex-col;\r\n}\r\n\r\n.dashboard-header {\r\n  @apply flex items-center justify-between p-4 bg-gray-800 border-b border-gray-700;\r\n}\r\n\r\n.dashboard-title {\r\n  @apply text-2xl font-bold flex items-center gap-2;\r\n}\r\n\r\n.header-controls {\r\n  @apply flex gap-2;\r\n}\r\n\r\n.refresh-btn, .export-btn, .close-btn {\r\n  @apply px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors flex items-center gap-1;\r\n}\r\n\r\n.close-btn {\r\n  @apply bg-red-600 hover:bg-red-700;\r\n}\r\n\r\n.filter-section {\r\n  @apply p-4 bg-gray-800 border-b border-gray-700;\r\n}\r\n\r\n.filter-row {\r\n  @apply flex gap-4 flex-wrap;\r\n}\r\n\r\n.filter-group {\r\n  @apply flex flex-col gap-1;\r\n}\r\n\r\n.filter-group label {\r\n  @apply text-sm text-gray-300;\r\n}\r\n\r\n.filter-group select {\r\n  @apply px-3 py-2 bg-gray-700 border border-gray-600 rounded text-white;\r\n}\r\n\r\n.tab-navigation {\r\n  @apply flex bg-gray-800 border-b border-gray-700;\r\n}\r\n\r\n.tab-button {\r\n  @apply px-6 py-3 border-b-2 border-transparent hover:bg-gray-700 transition-colors flex items-center gap-2;\r\n}\r\n\r\n.tab-button.active {\r\n  @apply border-blue-500 bg-gray-700;\r\n}\r\n\r\n.dashboard-content {\r\n  @apply flex-1 overflow-auto p-4;\r\n}\r\n\r\n.tab-content {\r\n  @apply space-y-6;\r\n}\r\n\r\n.stats-grid {\r\n  @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;\r\n}\r\n\r\n.main-charts {\r\n  @apply grid grid-cols-1 lg:grid-cols-2 gap-6;\r\n}\r\n\r\n.chart-container {\r\n  @apply bg-gray-800 rounded-lg p-4;\r\n}\r\n\r\n.chart-container.half {\r\n  @apply flex-1;\r\n}\r\n\r\n.chart-container.full {\r\n  @apply col-span-full;\r\n}\r\n\r\n.detailed-charts {\r\n  @apply space-y-6;\r\n}\r\n\r\n.chart-row {\r\n  @apply flex gap-6 flex-col lg:flex-row;\r\n}\r\n\r\n.patterns-section {\r\n  @apply space-y-6;\r\n}\r\n\r\n.realtime-section {\r\n  @apply space-y-6;\r\n}\r\n\r\n.realtime-header {\r\n  @apply bg-gray-800 rounded-lg p-4;\r\n}\r\n\r\n.realtime-header h3 {\r\n  @apply text-xl font-bold mb-2;\r\n}\r\n\r\n.session-info {\r\n  @apply flex gap-4 text-sm text-gray-300 flex-wrap;\r\n}\r\n\r\n.realtime-charts {\r\n  @apply grid grid-cols-1 lg:grid-cols-2 gap-6;\r\n}\r\n\r\n.no-session {\r\n  @apply text-center py-12 text-gray-400;\r\n}\r\n\r\n.loading-overlay {\r\n  @apply absolute inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center;\r\n}\r\n\r\n.loading-spinner {\r\n  @apply text-center;\r\n}\r\n\r\n.loading-spinner .icon {\r\n  @apply text-4xl block mb-4;\r\n}\r\n\r\n.error-message {\r\n  @apply bg-red-900 border border-red-700 rounded-lg p-4 m-4 flex items-center gap-2;\r\n}\r\n\r\n.error-message button {\r\n  @apply ml-auto px-4 py-2 bg-red-700 hover:bg-red-600 rounded transition-colors;\r\n}\r\n\r\n.icon {\r\n  @apply inline-block;\r\n}\r\n</style>"],"names":["getTrendClass","trend","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","icon","_hoisted_4","title","_hoisted_5","_Fragment","_renderList","stats","stat","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_normalizeClass","_hoisted_10","_normalizeStyle","Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","props","__props","chartCanvas","ref","chartInstance","chartPeriod","filteredData","computed","now","cutoffDate","item","totalGames","sum","averageScore","maxScore","initChart","ctx","context","dataIndex","formatDuration","updateChart","labels","gamesData","scoresData","ms","seconds","minutes","hours","destroyChart","onMounted","onUnmounted","watch","_cache","$event","BarElement","STAGE_COLORS","STAGE_LABELS","getStageColor","stage","getStageLabel","stages","rates","rate","colors","color","value","performance","data","currentVitality","maxVitality","point","minVitality","legendItem","vitality","status","vitalityData","dangerLineData","currentLevel","ArcElement","STAGE_ICONS","totalCount","count","getStageIcon","getPercentage","counts","label","percentage","getDifficultyLevel","addCenterText","chart","width","height","fontSize","text","textX","textY","lines","line","index","lineHeight","y","viewMode","CARD_TYPE_CONFIG","totalUsage","sortedData","entries","a","b","typeA","countA","typeB","countB","effA","calculateEffectiveness","getCardTypeName","cardType","_a","getCardTypeIcon","getCardTypeColor","getUsagePercentage","multiplier","chartType","getChartOptions","baseOptions","effectiveness","__spreadProps","__spreadValues","cardTypes","type","chartData","newType","_hoisted_11","sortedPatterns","formatSituation","situation","formatChoice","choice","getRecommendation","pattern","datasets","createDatasets","situationGroups","patterns","_hoisted_12","_hoisted_13","analysisMode","averageDecisionTime","fastestDecision","slowestDecision","decisionTrend","firstHalf","secondHalf","firstAvg","difference","performanceAnalysis","avg","distributionData","bins","min","max","movingAverageData","windowSize","result","i","average","getChartType","getChartData","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","updateTimer","vitalityChange","current","previous","riskLevel","getVitalityClass","getChangeClass","change","getRiskClass","risk","currentIndex","previousVitality","cautionLineData","borderColor","backgroundColor","pointRadii","_","startAutoUpdate","stopAutoUpdate","newValue","latestDecisionTime","averageTime","decisionPattern","avgRecent","overall","time","speed","diff","timeData","targetData","latestTime","pointColors","emit","__emit","statisticsService","StatisticsDataService","loading","error","statisticsData","realtimeData","activeTab","showFilters","filters","tabs","refreshTimer","unsubscribe","basicStats","performanceStats","timeStats","getTodayPlayTime","getCurrentStreak","insuranceStats","getMostPopularInsurance","progressChartData","successRateData","vitalityTrendData","stageAnalysisData","cardUsageData","strategyPatternsData","decisionAnalysisData","refreshData","__async","createFilterFromUI","err","applyFilters","exportData","jsonData","blob","url","retryLoad","filter","start","formatTime","date","today","todayData","d","usage","setupAutoRefresh","clearAutoRefresh","_createTextVNode","$emit","_vModelSelect","tab","_createVNode","StatsSummaryCard","GameProgressChart","SuccessRateChart","_hoisted_20","_hoisted_21","_hoisted_22","VitalityTrendChart","_hoisted_23","StageAnalysisChart","_hoisted_24","_hoisted_25","CardUsageChart","_hoisted_26","_hoisted_27","StrategyPatternsChart","DecisionAnalysisChart","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","LiveVitalityChart","DecisionTimeChart","_hoisted_33","_hoisted_34","_hoisted_35"],"mappings":"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"}