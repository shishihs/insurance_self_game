{"version":3,"mappings":"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","names":["gameContainer","ref","gameManager","shallowRef","isLoading","errorMessage","isDev","isMounted","getUnifiedAnimationManager","onMounted","__async","resolve","GameManager","__vitePreload","n","handleTutorialEvent","handleCleanupEvent","error","onUnmounted","tutorialHandler","cleanupHandler","resetGame","returnToMenu","__expose","_openBlock","_createElementBlock","_hoisted_1","_hoisted_2","_cache","_createElementVNode","_hoisted_3","_hoisted_4","_toDisplayString","_normalizeStyle","_unref","_hoisted_6"],"ignoreList":[],"sources":["../../src/components/game/GameCanvas.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { onMounted, onUnmounted, ref, shallowRef } from 'vue'\r\nimport type { GameManager } from '@/game/GameManager'\r\nimport type { WindowWithTutorialEvents } from '@/types/game-events'\r\nimport { getUnifiedAnimationManager } from '@/game/systems/UnifiedAnimationManager'\r\n\r\nconst gameContainer = ref<HTMLDivElement>()\r\n// パフォーマンス最適化: GameManagerは深い監視不要\r\nconst gameManager = shallowRef<GameManager | null>(null)\r\nconst isLoading = ref(true)\r\nconst errorMessage = ref<string>('')\r\nconst isDev = import.meta.env.DEV\r\n\r\n// コンポーネントがマウントされているか追跡\r\nlet isMounted = false\r\n\r\n// アニメーションマネージャーのインスタンス\r\nconst animationManager = getUnifiedAnimationManager()\r\n\r\nonMounted(async () => {\r\n  isMounted = true\r\n  \r\n  // requestAnimationFrameでDOMが完全に準備されるまで待機\r\n  await new Promise(resolve => requestAnimationFrame(resolve))\r\n  \r\n  if (gameContainer.value) {\r\n    try {\r\n      \r\n      // Phaserとゲームマネージャーを動的にインポート\r\n      const { GameManager } = await import('@/game/GameManager')\r\n      \r\n      // マウント状態を再確認\r\n      if (!isMounted) return\r\n      \r\n      gameManager.value = GameManager.getInstance()\r\n      \r\n      // ゲームを初期化\r\n      gameManager.value.initialize(gameContainer.value)\r\n      \r\n      isLoading.value = false\r\n      \r\n      // チュートリアル開始イベントリスナーを設定\r\n      const handleTutorialEvent = () => {\r\n        if (isDev) console.log('GameCanvas: チュートリアル開始イベントを受信')\r\n        if (gameManager.value && isMounted) {\r\n          // GameSceneに直接移動してチュートリアルを開始\r\n          gameManager.value.switchScene('GameScene', { startTutorial: true })\r\n        }\r\n      }\r\n      \r\n      // ゲームクリーンアップイベントリスナー\r\n      const handleCleanupEvent = () => {\r\n        if (gameManager.value) {\r\n          // Phaserのリソースを解放\r\n          gameManager.value.clearCache()\r\n        }\r\n      }\r\n      \r\n      window.addEventListener('startTutorial', handleTutorialEvent)\r\n      window.addEventListener('cleanupGame', handleCleanupEvent)\r\n      \r\n      // クリーンアップ用に参照を保存\r\n      ;(window as WindowWithTutorialEvents)._tutorialEventHandler = handleTutorialEvent\r\n      ;(window as any)._cleanupEventHandler = handleCleanupEvent\r\n      \r\n    } catch (error) {\r\n      console.error('❌ ゲームの初期化に失敗しました:', error)\r\n      console.error('❌ エラー詳細:', {\r\n        name: error instanceof Error ? error.name : 'Unknown',\r\n        message: error instanceof Error ? error.message : String(error),\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      })\r\n      errorMessage.value = error instanceof Error ? error.message : String(error)\r\n      isLoading.value = false\r\n    }\r\n  } else {\r\n    if (isDev) console.error('❌ gameContainer が見つかりません')\r\n    errorMessage.value = 'ゲームコンテナが見つかりません'\r\n    isLoading.value = false\r\n  }\r\n})\r\n\r\nonUnmounted(() => {\r\n  isMounted = false\r\n  \r\n  // イベントリスナーをクリーンアップ\r\n  const tutorialHandler = (window as WindowWithTutorialEvents)._tutorialEventHandler\r\n  const cleanupHandler = (window as any)._cleanupEventHandler\r\n  \r\n  if (tutorialHandler) {\r\n    window.removeEventListener('startTutorial', tutorialHandler as EventListener)\r\n    delete (window as WindowWithTutorialEvents)._tutorialEventHandler\r\n  }\r\n  \r\n  if (cleanupHandler) {\r\n    window.removeEventListener('cleanupGame', cleanupHandler as EventListener)\r\n    delete (window as any)._cleanupEventHandler\r\n  }\r\n  \r\n  // ゲームを破棄\r\n  if (gameManager.value) {\r\n    gameManager.value.destroy()\r\n    gameManager.value = null\r\n  }\r\n})\r\n\r\n/**\r\n * ゲームをリセット\r\n */\r\nconst resetGame = () => {\r\n  if (gameManager.value) {\r\n    gameManager.value.reset()\r\n  }\r\n}\r\n\r\n/**\r\n * メインメニューに戻る\r\n */\r\nconst returnToMenu = () => {\r\n  if (gameManager.value) {\r\n    gameManager.value.switchScene('MainMenuScene')\r\n  }\r\n}\r\n\r\n// 親コンポーネントに関数を公開\r\ndefineExpose({\r\n  resetGame,\r\n  returnToMenu\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"game-canvas-container\">\r\n    <!-- ローディング表示 -->\r\n    <div v-if=\"isLoading\" class=\"loading-container\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <p class=\"loading-text\">ゲームを読み込み中...</p>\r\n    </div>\r\n    \r\n    <!-- エラー表示 -->\r\n    <div v-else-if=\"errorMessage\" class=\"error-container\">\r\n      <h3 class=\"error-title\">ゲームの読み込みに失敗しました</h3>\r\n      <p class=\"error-message\">{{ errorMessage }}</p>\r\n      <p class=\"error-help\">\r\n        ブラウザのコンソール（F12）でより詳細なエラー情報を確認できます。\r\n      </p>\r\n    </div>\r\n    \r\n    <!-- Phaserゲームがここにマウントされる -->\r\n    <div \r\n      ref=\"gameContainer\" \r\n      id=\"game-container\" \r\n      class=\"game-container\" \r\n      :style=\"{ display: !isLoading && !errorMessage ? 'block' : 'none' }\"\r\n      :aria-hidden=\"isLoading || !!errorMessage\"\r\n    ></div>\r\n    \r\n    <!-- デバッグ用コントロール（開発中のみ表示） -->\r\n    <div v-if=\"isDev && !isLoading\" class=\"debug-controls\">\r\n      <button @click=\"resetGame\" class=\"btn btn-warning text-sm\">\r\n        ゲームリセット\r\n      </button>\r\n      <button @click=\"returnToMenu\" class=\"btn text-sm\">\r\n        メニューへ\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.game-canvas-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #1a1a1a;\r\n}\r\n\r\n.loading-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.loading-spinner {\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid rgba(255, 255, 255, 0.3);\r\n  border-top: 3px solid #4C6EF5;\r\n  border-radius: 50%;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n.loading-text {\r\n  color: rgba(255, 255, 255, 0.8);\r\n  font-size: 0.9rem;\r\n  margin: 0;\r\n}\r\n\r\n.error-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  max-width: 500px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.error-title {\r\n  color: #FF6B6B;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  margin: 0;\r\n}\r\n\r\n.error-message {\r\n  color: rgba(255, 255, 255, 0.9);\r\n  font-size: 1rem;\r\n  margin: 0;\r\n  word-break: break-word;\r\n}\r\n\r\n.error-help {\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 0.9rem;\r\n  margin: 0;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.game-container {\r\n  /* Phaserが自動的にcanvasのサイズを設定 */\r\n}\r\n\r\n.debug-controls {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  right: 10px;\r\n  display: flex;\r\n  gap: 10px;\r\n  z-index: 100;\r\n}\r\n\r\n/* レスポンシブ対応 */\r\n@media (max-width: 768px) {\r\n  .game-canvas-container {\r\n    /* モバイルでのフルスクリーン表示 */\r\n    height: 100vh;\r\n    height: 100dvh;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  .debug-controls {\r\n    bottom: max(5px, env(safe-area-inset-bottom, 0px));\r\n    right: max(5px, env(safe-area-inset-right, 0px));\r\n    gap: 5px;\r\n  }\r\n  \r\n  .debug-controls button {\r\n    padding: 0.25rem 0.5rem;\r\n    font-size: 0.75rem;\r\n    min-height: var(--touch-target-min);\r\n    border-radius: 6px;\r\n  }\r\n  \r\n  .loading-container,\r\n  .error-container {\r\n    padding: var(--space-lg);\r\n    margin: var(--space-sm);\r\n  }\r\n  \r\n  .loading-spinner {\r\n    width: 32px;\r\n    height: 32px;\r\n  }\r\n  \r\n  .error-title {\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n\r\n/* タブレット対応 */\r\n@media (min-width: 769px) and (max-width: 1024px) {\r\n  .debug-controls {\r\n    bottom: 15px;\r\n    right: 15px;\r\n  }\r\n}\r\n\r\n/* ランドスケープモード対応 */\r\n@media (max-height: 600px) and (orientation: landscape) {\r\n  .debug-controls {\r\n    bottom: max(5px, env(safe-area-inset-bottom, 0px));\r\n    right: max(5px, env(safe-area-inset-right, 0px));\r\n    flex-direction: row;\r\n  }\r\n  \r\n  .debug-controls button {\r\n    font-size: 0.7rem;\r\n    padding: 0.2rem 0.4rem;\r\n  }\r\n}\r\n\r\n/* 極小画面対応 */\r\n@media (max-width: 375px) {\r\n  .loading-container,\r\n  .error-container {\r\n    padding: var(--space-md);\r\n    margin: var(--space-xs);\r\n  }\r\n  \r\n  .error-container {\r\n    max-width: 300px;\r\n  }\r\n  \r\n  .debug-controls {\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n  }\r\n  \r\n  .debug-controls button {\r\n    width: 80px;\r\n    font-size: 0.65rem;\r\n  }\r\n}\r\n</style>"],"file":"js/GameCanvas-BZ9_4VV0.js"}