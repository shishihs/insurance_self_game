{"version":3,"file":"game-scenes-gl4Q2JUG.js","sources":["../../src/game/scenes/BaseScene.ts","../../src/game/scenes/PreloadScene.ts","../../src/game/scenes/MainMenuScene.ts","../../src/game/scenes/GameSceneOptimized.ts","../../src/game/scenes/GameScene.ts"],"sourcesContent":["import { Scene } from 'phaser'\r\nimport type { Card } from '@/domain/entities/Card'\r\nimport { GAME_CONSTANTS } from '../config/gameConfig'\r\n\r\n/**\r\n * すべてのシーンの基底クラス\r\n */\r\nexport abstract class BaseScene extends Scene {\r\n  protected centerX!: number\r\n  protected centerY!: number\r\n  protected gameWidth!: number\r\n  protected gameHeight!: number\r\n\r\n  create(): void {\r\n    // 画面サイズの取得\r\n    this.gameWidth = this.cameras.main.width\r\n    this.gameHeight = this.cameras.main.height\r\n    this.centerX = this.gameWidth / 2\r\n    this.centerY = this.gameHeight / 2\r\n\r\n    // 各シーンの初期化\r\n    this.initialize()\r\n  }\r\n\r\n  /**\r\n   * 各シーンで実装する初期化処理\r\n   */\r\n  protected abstract initialize(): void\r\n\r\n  /**\r\n   * 毎フレーム実行される更新処理（オプション）\r\n   */\r\n  update(time: number, delta: number): void {\r\n    // サブクラスでオーバーライド可能\r\n  }\r\n\r\n  /**\r\n   * フェードイン効果\r\n   */\r\n  protected fadeIn(duration: number = 500): void {\r\n    this.cameras.main.fadeIn(duration, 0, 0, 0)\r\n  }\r\n\r\n  /**\r\n   * フェードアウト効果\r\n   */\r\n  protected fadeOut(duration: number = 500, callback?: () => void): void {\r\n    this.cameras.main.fadeOut(duration, 0, 0, 0)\r\n    \r\n    if (callback) {\r\n      this.cameras.main.once('camerafadeoutcomplete', callback)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * テキストスタイルのデフォルト設定\r\n   */\r\n  protected getTextStyle(size: number = 24): Phaser.Types.GameObjects.Text.TextStyle {\r\n    return {\r\n      fontFamily: 'Noto Sans JP',\r\n      fontSize: `${size}px`,\r\n      color: '#333333'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ボタンを作成\r\n   */\r\n  protected createButton(\r\n    x: number,\r\n    y: number,\r\n    text: string,\r\n    onClick: () => void,\r\n    style?: Phaser.Types.GameObjects.Text.TextStyle\r\n  ): Phaser.GameObjects.Text {\r\n    const button = this.add.text(x, y, text, style || this.getTextStyle())\r\n      .setOrigin(0.5)\r\n      .setInteractive({ useHandCursor: true })\r\n      .setPadding(20, 10)\r\n      .setBackgroundColor('#4C6EF5')\r\n      .setColor('#ffffff')\r\n\r\n    // ホバー効果\r\n    button.on('pointerover', () => {\r\n      button.setBackgroundColor('#364FC7')\r\n      button.setScale(1.05)\r\n    })\r\n\r\n    button.on('pointerout', () => {\r\n      button.setBackgroundColor('#4C6EF5')\r\n      button.setScale(1)\r\n    })\r\n\r\n    button.on('pointerdown', () => {\r\n      button.setScale(0.95)\r\n    })\r\n\r\n    button.on('pointerup', () => {\r\n      button.setScale(1.05)\r\n      onClick()\r\n    })\r\n\r\n    return button\r\n  }\r\n\r\n  /**\r\n   * コンテナボタンを作成（グラフィックス背景付き）\r\n   */\r\n  protected createContainerButton(\r\n    x: number,\r\n    y: number,\r\n    text: string,\r\n    onClick: () => void,\r\n    style?: Phaser.Types.GameObjects.Text.TextStyle\r\n  ): Phaser.GameObjects.Container {\r\n    const container = this.add.container(x, y)\r\n    \r\n    // 背景\r\n    const bg = this.add.graphics()\r\n    bg.fillStyle(0x4C6EF5, 1)\r\n    bg.fillRoundedRect(-80, -20, 160, 40, 8)\r\n    \r\n    // テキスト\r\n    const buttonText = this.add.text(0, 0, text, style || this.getTextStyle())\r\n      .setOrigin(0.5)\r\n    \r\n    container.add([bg, buttonText])\r\n    container.setSize(160, 40)\r\n    container.setInteractive({ useHandCursor: true })\r\n    \r\n    // ホバー効果\r\n    container.on('pointerover', () => {\r\n      bg.clear()\r\n      bg.fillStyle(0x364FC7, 1)\r\n      bg.fillRoundedRect(-80, -20, 160, 40, 8)\r\n      container.setScale(1.05)\r\n    })\r\n    \r\n    container.on('pointerout', () => {\r\n      bg.clear()\r\n      bg.fillStyle(0x4C6EF5, 1)\r\n      bg.fillRoundedRect(-80, -20, 160, 40, 8)\r\n      container.setScale(1)\r\n    })\r\n    \r\n    container.on('pointerdown', () => {\r\n      container.setScale(0.95)\r\n    })\r\n    \r\n    container.on('pointerup', () => {\r\n      container.setScale(1.05)\r\n      onClick()\r\n    })\r\n    \r\n    return container\r\n  }\r\n\r\n  /**\r\n   * カードコンテナを作成（改善されたデザイン）\r\n   */\r\n  protected createCardContainer(card: Card, x: number, y: number): Phaser.GameObjects.Container {\r\n    const container = this.add.container(x, y)\r\n    \r\n    // カードのサイズ\r\n    const cardWidth = GAME_CONSTANTS.CARD_WIDTH\r\n    const cardHeight = GAME_CONSTANTS.CARD_HEIGHT\r\n    \r\n    // 背景グラフィックス\r\n    const cardBg = this.add.graphics()\r\n    \r\n    // 保険カードかどうかで背景を変える\r\n    const isInsuranceCard = card.cardType === 'insurance'\r\n    \r\n    if (isInsuranceCard) {\r\n      // 保険カード：グラデーション背景 + 特別なボーダー\r\n      // 外側のグロー効果\r\n      cardBg.fillStyle(0x818CF8, 0.3)\r\n      cardBg.fillRoundedRect(-cardWidth/2 - 4, -cardHeight/2 - 4, cardWidth + 8, cardHeight + 8, 14)\r\n      \r\n      // メインカード背景（グラデーション風）\r\n      const gradient = this.add.graphics()\r\n      gradient.fillStyle(0x6366F1, 1)\r\n      gradient.fillRoundedRect(-cardWidth/2, -cardHeight/2, cardWidth, cardHeight, 12)\r\n      \r\n      // 光沢効果\r\n      const gloss = this.add.graphics()\r\n      gloss.fillStyle(0xFFFFFF, 0.15)\r\n      gloss.fillRoundedRect(-cardWidth/2, -cardHeight/2, cardWidth, cardHeight/2, 12)\r\n      \r\n      // 装飾的なパターン\r\n      const pattern = this.add.graphics()\r\n      pattern.lineStyle(1, 0xFFFFFF, 0.1)\r\n      for (let i = 0; i < 5; i++) {\r\n        pattern.beginPath()\r\n        pattern.arc(-cardWidth/2 + 20 + i * 30, -cardHeight/2 + 20, 15, 0, Math.PI * 2)\r\n        pattern.strokePath()\r\n      }\r\n      \r\n      container.add([cardBg, gradient, gloss, pattern])\r\n    } else {\r\n      // 通常カード：シンプルな背景\r\n      cardBg.fillStyle(0xFFFFFF, 0.95)\r\n      cardBg.fillRoundedRect(-cardWidth/2, -cardHeight/2, cardWidth, cardHeight, 12)\r\n      \r\n      // 薄いボーダー\r\n      cardBg.lineStyle(2, 0xE5E7EB, 1)\r\n      cardBg.strokeRoundedRect(-cardWidth/2, -cardHeight/2, cardWidth, cardHeight, 12)\r\n      \r\n      container.add(cardBg)\r\n    }\r\n    \r\n    // カードの種類アイコン\r\n    let typeIcon = '🎯'\r\n    let iconBgColor = 0x64748B\r\n    \r\n    switch (card.cardType) {\r\n      case 'insurance':\r\n        typeIcon = '🛡️'\r\n        iconBgColor = 0x6366F1\r\n        break\r\n      case 'lifeEvent':\r\n        typeIcon = card.power > 0 ? '✨' : '⚡'\r\n        iconBgColor = card.power > 0 ? 0x10B981 : 0xF59E0B\r\n        break\r\n      case 'chance':\r\n        typeIcon = '🎲'\r\n        iconBgColor = 0x8B5CF6\r\n        break\r\n      case 'special':\r\n        typeIcon = '⭐'\r\n        iconBgColor = 0xF59E0B\r\n        break\r\n    }\r\n    \r\n    // アイコン背景\r\n    const iconBg = this.add.graphics()\r\n    iconBg.fillStyle(iconBgColor, isInsuranceCard ? 0.3 : 0.15)\r\n    iconBg.fillCircle(-cardWidth/2 + 25, -cardHeight/2 + 25, 20)\r\n    \r\n    // カードアイコン\r\n    const icon = this.add.text(-cardWidth/2 + 25, -cardHeight/2 + 25, typeIcon, {\r\n      fontFamily: 'Arial',\r\n      fontSize: '20px'\r\n    }).setOrigin(0.5)\r\n    \r\n    // カード名\r\n    const cardName = this.add.text(0, -cardHeight/2 + 30, card.name, {\r\n      fontFamily: 'Noto Sans JP',\r\n      fontSize: '16px',\r\n      fontStyle: 'bold',\r\n      color: isInsuranceCard ? '#FFFFFF' : '#1F2937',\r\n      align: 'center',\r\n      wordWrap: { width: cardWidth - 20 }\r\n    }).setOrigin(0.5, 0)\r\n    \r\n    // カード説明\r\n    const description = this.add.text(0, -10, card.description, {\r\n      fontFamily: 'Noto Sans JP',\r\n      fontSize: '12px',\r\n      color: isInsuranceCard ? '#E0E7FF' : '#6B7280',\r\n      align: 'center',\r\n      wordWrap: { width: cardWidth - 30 },\r\n      lineSpacing: 4\r\n    }).setOrigin(0.5)\r\n    \r\n    // パワー表示（保険カード以外）\r\n    if (!isInsuranceCard && card.power !== 0) {\r\n      const powerBg = this.add.graphics()\r\n      const powerColor = card.power > 0 ? 0x10B981 : 0xEF4444\r\n      powerBg.fillStyle(powerColor, 1)\r\n      powerBg.fillCircle(cardWidth/2 - 25, cardHeight/2 - 25, 18)\r\n      \r\n      const powerText = this.add.text(\r\n        cardWidth/2 - 25,\r\n        cardHeight/2 - 25,\r\n        `${card.power > 0 ? '+' : ''}${card.power}`,\r\n        {\r\n          fontFamily: 'Arial',\r\n          fontSize: '14px',\r\n          fontStyle: 'bold',\r\n          color: '#FFFFFF'\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      container.add([powerBg, powerText])\r\n    }\r\n    \r\n    // 保険カードの追加情報\r\n    if (isInsuranceCard) {\r\n      // 保険の種類ラベル\r\n      const insuranceType = card.insuranceType === 'whole_life' ? '終身保険' : '定期保険'\r\n      const typeBg = this.add.graphics()\r\n      typeBg.fillStyle(0xFFFFFF, 0.2)\r\n      typeBg.fillRoundedRect(-50, cardHeight/2 - 35, 100, 20, 10)\r\n      \r\n      const typeText = this.add.text(0, cardHeight/2 - 25, insuranceType, {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '11px',\r\n        fontStyle: 'bold',\r\n        color: '#FFFFFF'\r\n      }).setOrigin(0.5)\r\n      \r\n      container.add([typeBg, typeText])\r\n    }\r\n    \r\n    container.add([iconBg, icon, cardName, description])\r\n    \r\n    // インタラクティブ設定\r\n    container.setSize(cardWidth, cardHeight)\r\n    container.setInteractive({ useHandCursor: true })\r\n    container.setData('card', card)\r\n    container.setData('originalX', x)\r\n    container.setData('originalY', y)\r\n    \r\n    // ホバー効果\r\n    container.on('pointerover', () => {\r\n      this.tweens.add({\r\n        targets: container,\r\n        scaleX: 1.05,\r\n        scaleY: 1.05,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n      \r\n      // 保険カードは特別な輝き効果\r\n      if (isInsuranceCard) {\r\n        const glow = this.add.graphics()\r\n        glow.lineStyle(4, 0x818CF8, 0.6)\r\n        glow.strokeRoundedRect(-cardWidth/2 - 2, -cardHeight/2 - 2, cardWidth + 4, cardHeight + 4, 12)\r\n        container.add(glow)\r\n        container.setData('glowEffect', glow)\r\n        \r\n        this.tweens.add({\r\n          targets: glow,\r\n          alpha: 0.3,\r\n          duration: 500,\r\n          yoyo: true,\r\n          repeat: -1\r\n        })\r\n      }\r\n    })\r\n    \r\n    container.on('pointerout', () => {\r\n      this.tweens.add({\r\n        targets: container,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n      \r\n      // グロー効果を削除\r\n      const glow = container.getData('glowEffect')\r\n      if (glow) {\r\n        glow.destroy()\r\n        container.setData('glowEffect', null)\r\n      }\r\n    })\r\n    \r\n    return container\r\n  }\r\n}","import { BaseScene } from './BaseScene'\r\n\r\n/**\r\n * アセットをロードするシーン\r\n */\r\nexport class PreloadScene extends BaseScene {\r\n  constructor() {\r\n    super({ key: 'PreloadScene' })\r\n  }\r\n\r\n  preload(): void {\r\n    // ローディングバーの作成\r\n    const progressBar = this.add.graphics()\r\n    const progressBox = this.add.graphics()\r\n    progressBox.fillStyle(0x222222, 0.8)\r\n    progressBox.fillRect(240, 270, 320, 50)\r\n\r\n    const loadingText = this.add.text(\r\n      this.cameras.main.centerX,\r\n      this.cameras.main.centerY - 50,\r\n      'Loading...',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const percentText = this.add.text(\r\n      this.cameras.main.centerX,\r\n      this.cameras.main.centerY - 5,\r\n      '0%',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // ローディング進捗の更新\r\n    this.load.on('progress', (value: number) => {\r\n      percentText.setText(`${Math.round(value * 100)}%`)\r\n      progressBar.clear()\r\n      progressBar.fillStyle(0xffffff, 1)\r\n      progressBar.fillRect(250, 280, 300 * value, 30)\r\n    })\r\n\r\n    // ローディング完了\r\n    this.load.on('complete', () => {\r\n      progressBar.destroy()\r\n      progressBox.destroy()\r\n      loadingText.destroy()\r\n      percentText.destroy()\r\n    })\r\n\r\n    // アセットのロード\r\n    this.loadAssets()\r\n  }\r\n\r\n  /**\r\n   * アセットをロード\r\n   */\r\n  private loadAssets(): void {\r\n    // カード裏面\r\n    this.createCardBack()\r\n    \r\n    // カード表面（仮の画像を生成）\r\n    this.createCardFaces()\r\n    \r\n    // UI要素\r\n    this.createUIAssets()\r\n  }\r\n\r\n  /**\r\n   * カード裏面を動的に生成\r\n   */\r\n  private createCardBack(): void {\r\n    const graphics = this.add.graphics()\r\n    \r\n    // カード背景\r\n    graphics.fillStyle(0x2C3E50, 1)\r\n    graphics.fillRoundedRect(0, 0, 120, 180, 8)\r\n    \r\n    // パターン\r\n    graphics.lineStyle(2, 0x34495E)\r\n    for (let i = 10; i < 110; i += 20) {\r\n      for (let j = 10; j < 170; j += 20) {\r\n        graphics.strokeCircle(i, j, 8)\r\n      }\r\n    }\r\n    \r\n    // テクスチャとして保存\r\n    graphics.generateTexture('card-back', 120, 180)\r\n    graphics.destroy()\r\n  }\r\n\r\n  /**\r\n   * カード表面を動的に生成\r\n   */\r\n  private createCardFaces(): void {\r\n    // 人生カード\r\n    this.createCardFace('life-card-template', 0x4C6EF5)\r\n    \r\n    // 保険カード\r\n    this.createCardFace('insurance-card-template', 0x51CF66)\r\n    \r\n    // 落とし穴カード\r\n    this.createCardFace('pitfall-card-template', 0xFF6B6B)\r\n  }\r\n\r\n  /**\r\n   * カードテンプレートを作成\r\n   */\r\n  private createCardFace(key: string, color: number): void {\r\n    const graphics = this.add.graphics()\r\n    \r\n    // カード背景\r\n    graphics.fillStyle(color, 1)\r\n    graphics.fillRoundedRect(0, 0, 120, 180, 8)\r\n    \r\n    // 白い内側の枠\r\n    graphics.fillStyle(0xFFFFFF, 1)\r\n    graphics.fillRoundedRect(5, 5, 110, 170, 6)\r\n    \r\n    // 上部のカラーバー\r\n    graphics.fillStyle(color, 1)\r\n    graphics.fillRect(5, 5, 110, 30)\r\n    \r\n    // テクスチャとして保存\r\n    graphics.generateTexture(key, 120, 180)\r\n    graphics.destroy()\r\n  }\r\n\r\n  /**\r\n   * UI要素を作成\r\n   */\r\n  private createUIAssets(): void {\r\n    // ボタン背景\r\n    const buttonGraphics = this.add.graphics()\r\n    buttonGraphics.fillStyle(0x4C6EF5, 1)\r\n    buttonGraphics.fillRoundedRect(0, 0, 200, 50, 25)\r\n    buttonGraphics.generateTexture('button-bg', 200, 50)\r\n    buttonGraphics.destroy()\r\n    \r\n    // ハイライト\r\n    const highlightGraphics = this.add.graphics()\r\n    highlightGraphics.lineStyle(4, 0xFFD43B, 1)\r\n    highlightGraphics.strokeRoundedRect(0, 0, 130, 190, 8)\r\n    highlightGraphics.generateTexture('card-highlight', 130, 190)\r\n    highlightGraphics.destroy()\r\n  }\r\n\r\n  protected initialize(): void {\r\n    // プリロード完了後、メインメニューへ遷移\r\n    this.scene.start('MainMenuScene')\r\n  }\r\n}","import { BaseScene } from './BaseScene'\r\n\r\n/**\r\n * メインメニューシーン\r\n */\r\nexport class MainMenuScene extends BaseScene {\r\n  constructor() {\r\n    super({ key: 'MainMenuScene' })\r\n  }\r\n\r\n  protected initialize(): void {\r\n    // フェードイン\r\n    this.fadeIn()\r\n\r\n    // タイトル\r\n    this.add.text(\r\n      this.centerX,\r\n      100,\r\n      '人生充実ゲーム',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '48px',\r\n        color: '#333333',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // サブタイトル\r\n    this.add.text(\r\n      this.centerX,\r\n      160,\r\n      'Life Fulfillment - 生命保険を「人生の味方」として描く',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#666666'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // メニューボタン\r\n    this.createMenuButtons()\r\n\r\n    // バージョン情報\r\n    this.add.text(\r\n      10,\r\n      this.gameHeight - 30,\r\n      'v0.0.1 - Phase 1 Development',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#999999'\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * メニューボタンを作成\r\n   */\r\n  private createMenuButtons(): void {\r\n    const buttonY = 300\r\n    const buttonSpacing = 80\r\n\r\n    // ゲーム開始ボタン\r\n    this.createButton(\r\n      this.centerX,\r\n      buttonY,\r\n      'ゲームを始める',\r\n      () => this.startGame(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    // チュートリアルボタン\r\n    this.createButton(\r\n      this.centerX,\r\n      buttonY + buttonSpacing,\r\n      'チュートリアル',\r\n      () => this.startTutorial(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    // 設定ボタン\r\n    this.createButton(\r\n      this.centerX,\r\n      buttonY + buttonSpacing * 2,\r\n      '設定',\r\n      () => this.openSettings(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    // クレジットボタン\r\n    this.createButton(\r\n      this.centerX,\r\n      buttonY + buttonSpacing * 3,\r\n      'クレジット',\r\n      () => this.showCredits(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * ゲーム開始\r\n   */\r\n  private startGame(): void {\r\n    this.fadeOut(500, () => {\r\n      this.scene.start('GameScene')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チュートリアル開始\r\n   */\r\n  private startTutorial(): void {\r\n    this.fadeOut(500, () => {\r\n      // GameSceneを開始してすぐにチュートリアルを実行\r\n      this.scene.start('GameScene', { startTutorial: true })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 設定画面を開く\r\n   */\r\n  private openSettings(): void {\r\n    // 設定機能は将来のリリースで実装予定\r\n    // - 音量設定\r\n    // - グラフィック品質設定\r\n    // - キーボードショートカット設定\r\n    this.showNotification('設定機能は開発中です', 'info')\r\n  }\r\n\r\n  /**\r\n   * クレジット表示\r\n   */\r\n  private showCredits(): void {\r\n    // クレジットオーバーレイを作成\r\n    const overlay = this.add.graphics()\r\n    overlay.fillStyle(0x000000, 0.8)\r\n    overlay.fillRect(0, 0, this.gameWidth, this.gameHeight)\r\n\r\n    const creditContainer = this.add.container(this.centerX, this.centerY)\r\n\r\n    // クレジットテキスト\r\n    const creditText = this.add.text(\r\n      0,\r\n      -100,\r\n      '人生充実ゲーム\\n\\n開発: Claude Code & You\\n\\nPhase 1 - プロトタイプ開発中\\n\\nご期待ください！',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff',\r\n        align: 'center',\r\n        lineSpacing: 10\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 閉じるボタン\r\n    const closeButton = this.createButton(\r\n      0,\r\n      100,\r\n      '閉じる',\r\n      () => {\r\n        creditContainer.destroy()\r\n        overlay.destroy()\r\n      },\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    creditContainer.add([creditText, closeButton])\r\n\r\n    // フェードイン効果\r\n    creditContainer.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: creditContainer,\r\n      alpha: 1,\r\n      duration: 300\r\n    })\r\n  }\r\n}","import { BaseScene } from './BaseScene'\r\n\r\n/**\r\n * パフォーマンス最適化されたゲームシーン用のmixin\r\n */\r\nexport const GameSceneOptimizationMixin = {\r\n  /**\r\n   * パフォーマンス最適化: 更新処理のスロットリング\r\n   */\r\n  setupPerformanceOptimizations(this: any): void {\r\n    // フレームスキップの設定\r\n    this.frameSkipCounter = 0\r\n    this.frameSkipThreshold = 2 // 2フレームに1回更新\r\n    \r\n    // オブジェクトプーリング\r\n    this.objectPools = {\r\n      effects: [],\r\n      texts: [],\r\n      graphics: []\r\n    }\r\n    \r\n    // レンダリング最適化\r\n    this.cameras.main.setRoundPixels(true)\r\n    \r\n    // バッチ処理の有効化\r\n    this.game.renderer.setMaxTextures(16)\r\n  },\r\n\r\n  /**\r\n   * スロットル付きUI更新\r\n   */\r\n  throttledUIUpdate(this: any, deltaTime: number): void {\r\n    // フレームスキップ\r\n    this.frameSkipCounter++\r\n    if (this.frameSkipCounter < this.frameSkipThreshold) {\r\n      return\r\n    }\r\n    this.frameSkipCounter = 0\r\n    \r\n    // ダーティフラグに基づく選択的更新\r\n    if (this.dirtyFlags.vitality && this.updateThrottleTimers.vitality <= 0) {\r\n      this.updateVitalityBar()\r\n      this.updateThrottleTimers.vitality = 100 // 100ms間隔\r\n      this.dirtyFlags.vitality = false\r\n    }\r\n    \r\n    if (this.dirtyFlags.insurance && this.updateThrottleTimers.insurance <= 0) {\r\n      this.updateInsuranceList()\r\n      this.updateThrottleTimers.insurance = 200 // 200ms間隔\r\n      this.dirtyFlags.insurance = false\r\n    }\r\n    \r\n    if (this.dirtyFlags.burden && this.updateThrottleTimers.burden <= 0) {\r\n      this.updateBurdenIndicator()\r\n      this.updateThrottleTimers.burden = 150 // 150ms間隔\r\n      this.dirtyFlags.burden = false\r\n    }\r\n    \r\n    // タイマーを減らす\r\n    Object.keys(this.updateThrottleTimers).forEach(key => {\r\n      if (this.updateThrottleTimers[key] > 0) {\r\n        this.updateThrottleTimers[key] -= deltaTime\r\n      }\r\n    })\r\n  },\r\n\r\n  /**\r\n   * オブジェクトプールからの取得\r\n   */\r\n  getFromPool(this: any, type: string): any {\r\n    const pool = this.objectPools[type]\r\n    if (pool && pool.length > 0) {\r\n      return pool.pop()\r\n    }\r\n    return null\r\n  },\r\n\r\n  /**\r\n   * オブジェクトプールへの返却\r\n   */\r\n  returnToPool(this: any, type: string, object: any): void {\r\n    const pool = this.objectPools[type]\r\n    if (pool && pool.length < 50) { // プールサイズ制限\r\n      object.setVisible(false)\r\n      object.setActive(false)\r\n      pool.push(object)\r\n    } else {\r\n      object.destroy()\r\n    }\r\n  },\r\n\r\n  /**\r\n   * 最適化されたエフェクト生成\r\n   */\r\n  createOptimizedEffect(this: any, x: number, y: number, type: string): void {\r\n    let effect = this.getFromPool('effects')\r\n    \r\n    if (!effect) {\r\n      effect = this.add.graphics()\r\n    } else {\r\n      effect.clear()\r\n      effect.setVisible(true)\r\n      effect.setActive(true)\r\n    }\r\n    \r\n    effect.setPosition(x, y)\r\n    effect.setAlpha(1)\r\n    effect.setScale(1)\r\n    \r\n    // エフェクトの描画（typeに応じて）\r\n    switch (type) {\r\n      case 'success':\r\n        effect.fillStyle(0x4ADE80, 0.6)\r\n        effect.fillCircle(0, 0, 20)\r\n        break\r\n      case 'failure':\r\n        effect.lineStyle(4, 0xEF4444, 0.8)\r\n        effect.beginPath()\r\n        effect.moveTo(-15, -15)\r\n        effect.lineTo(15, 15)\r\n        effect.moveTo(15, -15)\r\n        effect.lineTo(-15, 15)\r\n        effect.strokePath()\r\n        break\r\n    }\r\n    \r\n    // アニメーション（完了後プールに返却）\r\n    this.tweens.add({\r\n      targets: effect,\r\n      alpha: 0,\r\n      scale: type === 'success' ? 3 : 1,\r\n      duration: 500,\r\n      ease: 'Power2.out',\r\n      onComplete: () => {\r\n        this.returnToPool('effects', effect)\r\n      }\r\n    })\r\n  },\r\n\r\n  /**\r\n   * バッチ処理による手札の更新\r\n   */\r\n  batchUpdateHandCards(this: any): void {\r\n    // 一度にすべてのカードを更新\r\n    const updates: Array<{card: any, x: number, y: number}> = []\r\n    \r\n    this.handCards.forEach((cardContainer: any, index: number) => {\r\n      const targetX = this.centerX - ((this.handCards.length - 1) * 60) / 2 + index * 60\r\n      const targetY = this.cameras.main.height - 120\r\n      \r\n      updates.push({\r\n        card: cardContainer,\r\n        x: targetX,\r\n        y: targetY\r\n      })\r\n    })\r\n    \r\n    // バッチでTween実行\r\n    if (updates.length > 0) {\r\n      this.tweens.add({\r\n        targets: updates.map(u => u.card),\r\n        duration: 300,\r\n        ease: 'Power2.out',\r\n        onUpdate: (tween: any) => {\r\n          const progress = tween.progress\r\n          updates.forEach((update, i) => {\r\n            const target = tween.targets[i]\r\n            if (target) {\r\n              target.x = Phaser.Math.Linear(target.x, update.x, progress)\r\n              target.y = Phaser.Math.Linear(target.y, update.y, progress)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  },\r\n\r\n  /**\r\n   * テクスチャアトラスの使用\r\n   */\r\n  preloadOptimizedAssets(this: any): void {\r\n    // 複数の画像を1つのアトラスにまとめる\r\n    this.load.atlas('game-atlas', 'assets/game-atlas.png', 'assets/game-atlas.json')\r\n  },\r\n\r\n  /**\r\n   * カメラカリングの最適化\r\n   */\r\n  setupCameraCulling(this: any): void {\r\n    // カメラの可視範囲外のオブジェクトを自動的に非表示\r\n    this.cameras.main.setBackgroundColor(0x1a1a1a)\r\n    this.cameras.main.useBounds = true\r\n    \r\n    // カリングの有効化\r\n    this.children.list.forEach((child: any) => {\r\n      if (child.setScrollFactor) {\r\n        child.setScrollFactor(1)\r\n      }\r\n    })\r\n  },\r\n\r\n  /**\r\n   * メモリ最適化: 未使用リソースの解放\r\n   */\r\n  cleanupUnusedResources(this: any): void {\r\n    // 使用されていないテクスチャの解放\r\n    const textureKeys = this.textures.getTextureKeys()\r\n    const usedTextures = new Set<string>()\r\n    \r\n    // 使用中のテクスチャを収集\r\n    this.children.list.forEach((child: any) => {\r\n      if (child.texture?.key) {\r\n        usedTextures.add(child.texture.key)\r\n      }\r\n    })\r\n    \r\n    // 未使用のテクスチャを削除\r\n    textureKeys.forEach(key => {\r\n      if (!usedTextures.has(key) && !['__DEFAULT', '__MISSING', '__WHITE'].includes(key)) {\r\n        try {\r\n          this.textures.remove(key)\r\n        } catch (e) {\r\n          // エラーは無視\r\n        }\r\n      }\r\n    })\r\n  },\r\n\r\n  /**\r\n   * 描画呼び出しの最小化\r\n   */\r\n  minimizeDrawCalls(this: any): void {\r\n    // 同じテクスチャを使用するオブジェクトをグループ化\r\n    const textureGroups = new Map<string, any[]>()\r\n    \r\n    this.children.list.forEach((child: any) => {\r\n      if (child.texture?.key) {\r\n        const key = child.texture.key\r\n        if (!textureGroups.has(key)) {\r\n          textureGroups.set(key, [])\r\n        }\r\n        textureGroups.get(key)!.push(child)\r\n      }\r\n    })\r\n    \r\n    // グループごとに深度を調整してバッチ処理を促進\r\n    let depth = 0\r\n    textureGroups.forEach((group) => {\r\n      group.forEach(child => {\r\n        child.setDepth(depth)\r\n      })\r\n      depth++\r\n    })\r\n  }\r\n}","import { BaseScene } from './BaseScene'\r\nimport { Game } from '@/domain/entities/Game'\r\nimport type { Card } from '@/domain/entities/Card'\r\nimport { CardFactory } from '@/domain/services/CardFactory'\r\nimport { GAME_CONSTANTS } from '../config/gameConfig'\r\nimport type { CardType } from '@/domain/types/card.types'\r\nimport type { ChallengeResult } from '@/domain/types/game.types'\r\nimport { AGE_PARAMETERS } from '@/domain/types/game.types'\r\nimport { TutorialManager } from '../systems/TutorialManager'\r\nimport { TutorialOverlay } from '../ui/TutorialOverlay'\r\nimport type { TutorialConfig, TutorialStep } from '@/domain/types/tutorial.types'\r\nimport { setupGlobalTutorialTests } from '../tutorial/TutorialTestHelper'\r\nimport { INTERACTIVE_GAME_TUTORIAL } from '../tutorial/InteractiveTutorialConfig'\r\nimport { DropZoneIntegration } from '../systems/DropZoneIntegration'\r\nimport { KeyboardController } from '../systems/KeyboardController'\r\nimport { SoundManager } from '../systems/SoundManager'\r\nimport { GameSceneOptimizationMixin } from './GameSceneOptimized'\r\nimport { EventCleanupManager } from '../systems/EventCleanupManager'\r\nimport { ResponsiveGameSceneMixin } from './ResponsiveGameScene'\r\nimport { getUnifiedAnimationManager } from '../systems/UnifiedAnimationManager'\r\nimport type { UnifiedAnimationManager } from '../systems/UnifiedAnimationManager'\r\nimport { MobilePerformanceManager } from '../systems/MobilePerformanceManager'\r\n\r\n/**\r\n * メインゲームシーン\r\n */\r\nexport class GameScene extends BaseScene {\r\n  private gameInstance!: Game\r\n  private handCards: Phaser.GameObjects.Container[] = []\r\n  private selectedCards: Set<string> = new Set()\r\n  private cardSelectionUI?: Phaser.GameObjects.Container\r\n  private insuranceTypeSelectionUI?: Phaser.GameObjects.Container\r\n  private selectedInsuranceType?: 'whole_life' | 'term'\r\n  private vitalityBarContainer?: Phaser.GameObjects.Container\r\n  private vitalityBar?: Phaser.GameObjects.Rectangle\r\n  private vitalityBarMaxWidth: number = 300\r\n  private insuranceListContainer?: Phaser.GameObjects.Container\r\n  private burdenIndicatorContainer?: Phaser.GameObjects.Container\r\n  private insuranceRenewalDialogUI?: Phaser.GameObjects.Container\r\n  \r\n  // ダーティフラグによるUI最適化\r\n  private dirtyFlags = {\r\n    vitality: false,\r\n    insurance: false,\r\n    burden: false,\r\n    hand: false,\r\n    actionButtons: false,\r\n    challenge: false,\r\n    stage: false,\r\n    deck: false\r\n  }\r\n  \r\n  // パフォーマンス最適化用のスロットリング\r\n  private updateThrottleTimers = {\r\n    vitality: 0,\r\n    insurance: 0,\r\n    burden: 0\r\n  }\r\n  \r\n  // パフォーマンス最適化用\r\n  private frameSkipCounter: number = 0\r\n  private frameSkipThreshold: number = 2\r\n  private objectPools: Record<string, any[]> = {\r\n    effects: [],\r\n    texts: [],\r\n    graphics: []\r\n  }\r\n  \r\n  // ドラッグ&ドロップ関連（新システム）\r\n  private dropZoneIntegration?: DropZoneIntegration\r\n  \r\n  // キーボード操作関連\r\n  private keyboardController?: KeyboardController\r\n  \r\n  // サウンド関連\r\n  private soundManager?: SoundManager\r\n  \r\n  // メモリリーク防止用\r\n  private eventCleanupManager: EventCleanupManager = new EventCleanupManager()\r\n  \r\n  // チュートリアル関連\r\n  private tutorialManager?: TutorialManager\r\n  private tutorialOverlay?: TutorialOverlay\r\n  private isTutorialMode: boolean = false\r\n  private tutorialStepElements: Map<string, Phaser.GameObjects.GameObject> = new Map()\r\n  private shouldStartTutorial: boolean = false\r\n  \r\n  // アニメーション関連\r\n  private animationManager: UnifiedAnimationManager\r\n\r\n  constructor() {\r\n    super({ key: 'GameScene' })\r\n    // アニメーションマネージャーの取得（シングルトン）\r\n    this.animationManager = getUnifiedAnimationManager()\r\n  }\r\n\r\n  init(data: { startTutorial?: boolean }): void {\r\n    // メニューからのチュートリアル開始要求をフラグとして保存\r\n    this.shouldStartTutorial = data.startTutorial || false\r\n  }\r\n\r\n  protected initialize(): void {\r\n    // パフォーマンス最適化のセットアップ\r\n    GameSceneOptimizationMixin.setupPerformanceOptimizations.call(this)\r\n    GameSceneOptimizationMixin.setupCameraCulling.call(this)\r\n    \r\n    // シーン破棄時のクリーンアップ設定\r\n    this.events.once('shutdown', this.cleanup, this)\r\n    this.events.once('destroy', this.cleanup, this)\r\n\r\n    // ゲームインスタンスの初期化\r\n    this.initializeGame()\r\n\r\n    // UI要素の作成\r\n    this.createUI()\r\n\r\n    // カードエリアの作成\r\n    this.createCardAreas()\r\n\r\n    // チュートリアルUIの初期化\r\n    this.initializeTutorial()\r\n\r\n    // ゲーム開始\r\n    this.startGame()\r\n    \r\n    // キーボード操作の初期化\r\n    this.initializeKeyboardControls()\r\n    \r\n    // サウンドマネージャーの初期化\r\n    this.initializeSoundManager()\r\n    \r\n    // モバイルパフォーマンス管理の初期化\r\n    this.initializePerformanceManager()\r\n\r\n    // メニューからチュートリアルが要求された場合は自動開始\r\n    if (this.shouldStartTutorial) {\r\n      this.time.delayedCall(500, () => {\r\n        this.autoStartTutorial()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ゲームを初期化\r\n   */\r\n  private initializeGame(): void {\r\n    this.gameInstance = new Game({\r\n      difficulty: 'normal',\r\n      startingVitality: 20,\r\n      startingHandSize: 5,\r\n      maxHandSize: 7,\r\n      dreamCardCount: 2\r\n    })\r\n\r\n    // 初期デッキを作成\r\n    const starterCards = CardFactory.createStarterLifeCards()\r\n    this.gameInstance.playerDeck.addCards(starterCards)\r\n    this.gameInstance.playerDeck.shuffle()\r\n\r\n    // チャレンジデッキを作成\r\n    const challengeCards = CardFactory.createChallengeCards(this.gameInstance.stage)\r\n    this.gameInstance.challengeDeck.addCards(challengeCards)\r\n    this.gameInstance.challengeDeck.shuffle()\r\n  }\r\n\r\n  /**\r\n   * UI要素を作成\r\n   */\r\n  private createUI(): void {\r\n    // 背景 - ダークでモダンな背景\r\n    this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x1F2937)\r\n      .setOrigin(0, 0)\r\n\r\n    // ヘッダー - グラデーション風の見た目\r\n    const header = this.add.rectangle(0, 0, this.gameWidth, 80, 0x4C1D95)\r\n      .setOrigin(0, 0)\r\n    header.setAlpha(0.9)\r\n\r\n    // ステージ表示\r\n    const stageText = this.add.text(\r\n      20,\r\n      40,\r\n      this.getStageDisplayText(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#F9FAFB',\r\n        fontStyle: 'bold'\r\n      }\r\n    )\r\n    stageText.setOrigin(0, 0.5)\r\n    stageText.setName('stage-text')\r\n\r\n    // 人生段階進行インジケーター\r\n    this.createLifeStageIndicator()\r\n\r\n    // 活力バーコンテナ\r\n    this.createVitalityBar()\r\n\r\n    // 活力表示（年齢段階を含む）\r\n    const stageLabel = this.getStageDisplayText()\r\n    const vitalityText = this.add.text(\r\n      this.centerX,\r\n      40,\r\n      `活力: ${this.gameInstance.vitality} / ${this.gameInstance.maxVitality} (${stageLabel})`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#F9FAFB',\r\n        fontStyle: 'bold'\r\n      }\r\n    )\r\n    vitalityText.setOrigin(0.5)\r\n    vitalityText.setShadow(2, 2, '#000000', 0.5, true, true)\r\n    vitalityText.setName('vitality-text')\r\n\r\n    // ターン表示\r\n    const turnText = this.add.text(\r\n      this.gameWidth - 20,\r\n      40,\r\n      `ターン: ${this.gameInstance.turn}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#E5E7EB'\r\n      }\r\n    )\r\n    turnText.setOrigin(1, 0.5)\r\n    turnText.setName('turn-text')\r\n\r\n    // アクションボタン\r\n    this.createActionButtons()\r\n\r\n    // Phase 3-3: 保険料負担インジケーター\r\n    this.createBurdenIndicator()\r\n\r\n    // Phase 3-3: 保険カード一覧\r\n    this.createInsuranceListDisplay()\r\n  }\r\n\r\n  /**\r\n   * Phase 3-3: 保険料負担インジケーターを作成\r\n   */\r\n  private createBurdenIndicator(): void {\r\n    this.burdenIndicatorContainer = this.add.container(this.gameWidth - 200, 120)\r\n    this.burdenIndicatorContainer.setName('burden-indicator')\r\n\r\n    // 背景 - ガラスモルフィズム風\r\n    const bg = this.add.rectangle(0, 0, 180, 50, 0x111827, 0.8)\r\n    bg.setStrokeStyle(1, 0x818CF8, 0.5)\r\n\r\n    // ラベル\r\n    const label = this.add.text(\r\n      -80, 0,\r\n      '保険料負担:',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#E5E7EB'\r\n      }\r\n    ).setOrigin(0, 0.5)\r\n\r\n    // 負担値\r\n    const burden = this.gameInstance.insuranceBurden\r\n    const burdenText = this.add.text(\r\n      40, 0,\r\n      burden === 0 ? '負担なし' : `${burden}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: burden === 0 ? '#10B981' : '#EF4444',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n    burdenText.setShadow(1, 1, '#000000', 0.3, true, true)\r\n    burdenText.setName('burden-value')\r\n\r\n    this.burdenIndicatorContainer.add([bg, label, burdenText])\r\n  }\r\n\r\n  /**\r\n   * Phase 3-3: 保険カード一覧表示を作成\r\n   */\r\n  private createInsuranceListDisplay(): void {\r\n    this.insuranceListContainer = this.add.container(this.gameWidth - 150, 250)\r\n    this.insuranceListContainer.setName('insurance-list')\r\n\r\n    // タイトル\r\n    const title = this.add.text(\r\n      0, 0,\r\n      '有効な保険',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#F9FAFB',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n    title.setShadow(1, 1, '#000000', 0.3, true, true)\r\n\r\n    this.insuranceListContainer.add(title)\r\n\r\n    // 保険カードリストを更新\r\n    this.updateInsuranceList()\r\n  }\r\n\r\n  /**\r\n   * 人生段階インジケーターを作成\r\n   */\r\n  private createLifeStageIndicator(): void {\r\n    const indicatorContainer = this.add.container(20, 70)\r\n    indicatorContainer.setName('life-stage-indicator')\r\n\r\n    const stages = ['youth', 'middle', 'fulfillment'] as const\r\n    const stageLabels = ['青年期', '中年期', '充実期']\r\n    const stageColors = [0x10B981, 0xF59E0B, 0xA78BFA]\r\n    const currentStageIndex = stages.indexOf(this.gameInstance.stage as 'youth' | 'middle' | 'fulfillment')\r\n\r\n    stages.forEach((stage, index) => {\r\n      const isActive = index <= currentStageIndex\r\n      const isCurrent = index === currentStageIndex\r\n      \r\n      // ステージドット\r\n      const dot = this.add.circle(\r\n        index * 50, 0,\r\n        isCurrent ? 8 : 6,\r\n        isActive ? stageColors[index] : 0x4B5563,\r\n        isActive ? 1 : 0.5\r\n      )\r\n      \r\n      // ステージラベル\r\n      const label = this.add.text(\r\n        index * 50, 15,\r\n        stageLabels[index],\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '10px',\r\n          color: isActive ? '#F9FAFB' : '#6B7280',\r\n          fontStyle: isCurrent ? 'bold' : 'normal'\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      // 最大活力表示\r\n      const maxVitalityForStage = index === 0 ? 35 : index === 1 ? 30 : 27\r\n      const maxVitalityLabel = this.add.text(\r\n        index * 50, 25,\r\n        `最大${maxVitalityForStage}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '8px',\r\n          color: isActive ? '#9CA3AF' : '#4B5563'\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      indicatorContainer.add([dot, label, maxVitalityLabel])\r\n      \r\n      // 現在のステージにパルス効果\r\n      if (isCurrent) {\r\n        this.tweens.add({\r\n          targets: dot,\r\n          scale: 1.2,\r\n          duration: 1500,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n      }\r\n      \r\n      // 接続線（最後のステージ以外）\r\n      if (index < stages.length - 1) {\r\n        const line = this.add.rectangle(\r\n          index * 50 + 25, 0,\r\n          20, 2,\r\n          isActive && index < currentStageIndex ? stageColors[index] : 0x4B5563,\r\n          isActive && index < currentStageIndex ? 1 : 0.3\r\n        )\r\n        indicatorContainer.add(line)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 人生段階インジケーターを更新\r\n   */\r\n  private updateLifeStageIndicator(): void {\r\n    const indicatorContainer = this.children.getByName('life-stage-indicator') as Phaser.GameObjects.Container\r\n    if (!indicatorContainer) return\r\n\r\n    indicatorContainer.destroy()\r\n    this.createLifeStageIndicator()\r\n  }\r\n\r\n  /**\r\n   * 活力バーを作成\r\n   */\r\n  private createVitalityBar(): void {\r\n    this.vitalityBarContainer = this.add.container(this.centerX, 65)\r\n    this.vitalityBarContainer.setName('vitality-bar-container')\r\n\r\n    // 活力バーの背景 - よりモダンなスタイル\r\n    const barBg = this.add.rectangle(\r\n      0, 0,\r\n      this.vitalityBarMaxWidth + 4,\r\n      24,\r\n      0x111827\r\n    )\r\n    barBg.setStrokeStyle(2, 0x818CF8)\r\n    barBg.setAlpha(0.8)\r\n\r\n    // 活力バー本体\r\n    const vitalityPercentage = this.gameInstance.vitality / this.gameInstance.maxVitality\r\n    const barWidth = Math.max(0, this.vitalityBarMaxWidth * vitalityPercentage)\r\n    \r\n    this.vitalityBar = this.add.rectangle(\r\n      -this.vitalityBarMaxWidth / 2, 0,\r\n      barWidth,\r\n      20,\r\n      this.getVitalityBarColor(vitalityPercentage)\r\n    )\r\n    this.vitalityBar.setOrigin(0, 0.5)\r\n\r\n    // 最大値マーカー（現在のステージの最大値を示す）\r\n    const maxMarker = this.add.rectangle(\r\n      -this.vitalityBarMaxWidth / 2 + this.vitalityBarMaxWidth, 0,\r\n      2,\r\n      24,\r\n      0x818CF8\r\n    )\r\n    maxMarker.setOrigin(0.5)\r\n\r\n    this.vitalityBarContainer.add([barBg, this.vitalityBar, maxMarker])\r\n  }\r\n\r\n  /**\r\n   * 活力バーの色を取得\r\n   */\r\n  private getVitalityBarColor(percentage: number): number {\r\n    if (percentage > 0.6) return 0x10B981 // 緑 - 高活力\r\n    if (percentage > 0.3) return 0xF59E0B // オレンジ - 中活力\r\n    return 0xEF4444 // 赤 - 低活力\r\n  }\r\n\r\n  /**\r\n   * カードエリアを作成\r\n   */\r\n  private createCardAreas(): void {\r\n    // デッキエリア\r\n    const deckArea = this.add.container(\r\n      GAME_CONSTANTS.DECK_X_POSITION,\r\n      GAME_CONSTANTS.DECK_Y_POSITION\r\n    )\r\n    \r\n    const deckBack = this.add.image(0, 0, 'card-back')\r\n    const deckCount = this.add.text(\r\n      0,\r\n      70,\r\n      `${this.gameInstance.playerDeck.size()}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#333333'\r\n      }\r\n    )\r\n    deckCount.setOrigin(0.5)\r\n    deckCount.setName('deck-count')\r\n\r\n    deckArea.add([deckBack, deckCount])\r\n    deckArea.setName('deck-area')\r\n\r\n    // 捨て札エリア\r\n    const discardArea = this.add.container(\r\n      GAME_CONSTANTS.DISCARD_X_POSITION,\r\n      GAME_CONSTANTS.DISCARD_Y_POSITION\r\n    )\r\n\r\n    const discardPlaceholder = this.add.rectangle(\r\n      0,\r\n      0,\r\n      GAME_CONSTANTS.CARD_WIDTH,\r\n      GAME_CONSTANTS.CARD_HEIGHT,\r\n      0xCCCCCC,\r\n      0.3\r\n    )\r\n    discardPlaceholder.setStrokeStyle(2, 0x999999)\r\n\r\n    const discardLabel = this.add.text(\r\n      0,\r\n      70,\r\n      '捨て札',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#666666'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    discardArea.add([discardPlaceholder, discardLabel])\r\n    discardArea.setName('discard-area')\r\n\r\n    // チャレンジエリア\r\n    const challengeArea = this.add.container(\r\n      this.centerX,\r\n      GAME_CONSTANTS.CHALLENGE_Y_POSITION\r\n    )\r\n\r\n    const challengePlaceholder = this.add.rectangle(\r\n      0,\r\n      0,\r\n      GAME_CONSTANTS.CARD_WIDTH,\r\n      GAME_CONSTANTS.CARD_HEIGHT,\r\n      0xFFD43B,\r\n      0.3\r\n    )\r\n    challengePlaceholder.setStrokeStyle(2, 0xFAB005)\r\n\r\n    const challengeLabel = this.add.text(\r\n      0,\r\n      -100,\r\n      'チャレンジ',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#333333'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    challengeArea.add([challengePlaceholder, challengeLabel])\r\n    challengeArea.setName('challenge-area')\r\n    \r\n    // ドロップゾーンの初期化\r\n    this.initializeDropZones()\r\n    \r\n    // 新しいドロップゾーンシステムの初期化\r\n    this.initializeNewDropZoneSystem()\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンを初期化\r\n   */\r\n  private initializeDropZones(): void {\r\n    // チャレンジエリアのドロップゾーンを登録\r\n    const challengeArea = this.children.getByName('challenge-area') as Phaser.GameObjects.Container\r\n    if (challengeArea) {\r\n      // challengeAreaは新システムで管理\r\n      // ハイライトは新システムで管理\r\n    }\r\n    \r\n    // 捨て札エリアのドロップゾーンを登録\r\n    const discardArea = this.children.getByName('discard-area') as Phaser.GameObjects.Container\r\n    if (discardArea) {\r\n      // discardAreaは新システムで管理\r\n      // ハイライトは新システムで管理\r\n    }\r\n    \r\n    // ドラッグエフェクトは新システムで管理\r\n  }\r\n\r\n  /**\r\n   * 新しいドロップゾーンシステムを初期化\r\n   */\r\n  private initializeNewDropZoneSystem(): void {\r\n    // DropZoneIntegrationを初期化（デフォルトゾーンは自動的に設定される）\r\n    this.dropZoneIntegration = new DropZoneIntegration(this, this.gameInstance)\r\n    \r\n    // カード選択イベントのハンドリングを設定\r\n    this.data.events.on('cardSelected', (cardContainer: Phaser.GameObjects.Container) => {\r\n      this.toggleCardSelection(cardContainer)\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * ドロップゾーンハイライトを表示\r\n   */\r\n  private showDropZoneHighlights(draggedCard?: Phaser.GameObjects.Container): void {\r\n    this.dropZoneHighlights.forEach((highlight, zoneName) => {\r\n      const isValid = this.isValidDropZone(zoneName, draggedCard)\r\n      const color = isValid ? GAME_CONSTANTS.COLORS.DROP_ZONE_VALID : GAME_CONSTANTS.COLORS.DROP_ZONE_INVALID\r\n      const alpha = isValid ? 0.3 : 0.15\r\n      \r\n      // ハイライトの描画をクリア\r\n      highlight.clear()\r\n      \r\n      // 円形のハイライトを描画\r\n      const radius = (GAME_CONSTANTS.CARD_WIDTH + 40) / 2\r\n      highlight.fillStyle(color, alpha)\r\n      highlight.fillCircle(0, 0, radius)\r\n      \r\n      // 境界線を描画\r\n      highlight.lineStyle(3, color, 0.8)\r\n      highlight.strokeCircle(0, 0, radius)\r\n      \r\n      // パルス効果のアニメーション\r\n      this.tweens.add({\r\n        targets: highlight,\r\n        alpha: alpha * 1.5,\r\n        scaleX: 1.1,\r\n        scaleY: 1.1,\r\n        duration: GAME_CONSTANTS.DRAG_DROP.GLOW_PULSE_DURATION / 2,\r\n        ease: 'Sine.easeInOut',\r\n        yoyo: true,\r\n        repeat: -1\r\n      })\r\n      \r\n      // フェードイン\r\n      this.tweens.add({\r\n        targets: highlight,\r\n        alpha,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンハイライトを隠す\r\n   */\r\n  private hideDropZoneHighlights(): void {\r\n    this.dropZoneHighlights.forEach((highlight) => {\r\n      // アニメーション停止\r\n      this.tweens.killTweensOf(highlight)\r\n      \r\n      // フェードアウト\r\n      this.tweens.add({\r\n        targets: highlight,\r\n        alpha: 0,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        duration: 200,\r\n        ease: 'Power2',\r\n        onComplete: () => {\r\n          highlight.clear()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンが有効かどうかを判定\r\n   */\r\n  private isValidDropZone(zoneName: string, draggedCard?: Phaser.GameObjects.Container): boolean {\r\n    if (!draggedCard) return true\r\n    \r\n    switch (zoneName) {\r\n      case 'challenge':\r\n        // チャレンジエリアは、チャレンジが開始されている、かつ現在チャレンジカードがない場合に有効\r\n        return this.gameInstance.currentChallenge !== null && !this.gameInstance.currentChallenge.isCardPlaced\r\n      case 'discard':\r\n        // 捨て札エリアは常に有効\r\n        return true\r\n      default:\r\n        return false\r\n    }\r\n  }\r\n  /**\r\n   * アクションボタンを作成\r\n   */\r\n  private createActionButtons(): void {\r\n    const buttonContainer = this.add.container(this.gameWidth - 150, 150)\r\n    buttonContainer.setName('action-buttons')\r\n\r\n    // ドローボタン\r\n    const drawButton = this.createContainerButton(\r\n      0,\r\n      0,\r\n      'カードを引く',\r\n      () => this.drawCards(1),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    drawButton.setName('draw-button')\r\n\r\n    // チャレンジボタン\r\n    const challengeButton = this.createContainerButton(\r\n      0,\r\n      60,\r\n      'チャレンジ',\r\n      () => this.startChallenge(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    challengeButton.setName('challenge-button')\r\n\r\n    // ターン終了ボタン\r\n    const endTurnButton = this.createContainerButton(\r\n      0,\r\n      120,\r\n      'ターン終了',\r\n      () => this.endTurn(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    endTurnButton.setName('end-turn-button')\r\n\r\n    buttonContainer.add([drawButton, challengeButton, endTurnButton])\r\n    \r\n    // 初期状態でボタンの有効/無効を設定\r\n    this.updateActionButtons()\r\n  }\r\n\r\n  /**\r\n   * キーボード操作の初期化\r\n   */\r\n  private initializeKeyboardControls(): void {\r\n    // キーボードコントローラーを作成\r\n    this.keyboardController = new KeyboardController(this)\r\n    \r\n    // アクションのコールバックを登録\r\n    this.keyboardController.registerActionCallback('draw', () => {\r\n      if (this.gameInstance.phase === 'draw' && this.gameInstance.isInProgress()) {\r\n        this.drawCards(1)\r\n      }\r\n    })\r\n    \r\n    this.keyboardController.registerActionCallback('challenge', () => {\r\n      if (this.gameInstance.phase === 'draw' && !this.gameInstance.currentChallenge && this.gameInstance.isInProgress()) {\r\n        this.startChallenge()\r\n      }\r\n    })\r\n    \r\n    this.keyboardController.registerActionCallback('endTurn', () => {\r\n      const phase = this.gameInstance.phase\r\n      if ((phase === 'draw' || phase === 'resolution') && this.gameInstance.isInProgress()) {\r\n        this.endTurn()\r\n      }\r\n    })\r\n    \r\n    // 数字キーでカード選択\r\n    for (let i = 1; i <= 7; i++) {\r\n      this.keyboardController.registerActionCallback(`card${i}`, () => {\r\n        if (i <= this.handCards.length) {\r\n          const card = this.handCards[i - 1]\r\n          const cardData = card.getData('card') as Card\r\n          if (cardData) {\r\n            this.toggleCardSelection(card)\r\n          }\r\n        }\r\n      })\r\n    }\r\n    \r\n    // キャンセルアクション（選択解除）\r\n    this.keyboardController.registerActionCallback('cancel', () => {\r\n      this.clearCardSelection()\r\n    })\r\n    \r\n    // アクションボタンを登録\r\n    this.time.delayedCall(100, () => {\r\n      this.registerFocusableElements()\r\n    })\r\n    \r\n    // キーボード操作を有効化\r\n    this.keyboardController.enable()\r\n  }\r\n  \r\n  /**\r\n   * フォーカス可能な要素を登録\r\n   */\r\n  private registerFocusableElements(): void {\r\n    if (!this.keyboardController) return\r\n    \r\n    // アクションボタンを登録\r\n    const actionButtons = this.children.getByName('action-buttons') as Phaser.GameObjects.Container\r\n    if (actionButtons) {\r\n      const drawButton = actionButtons.getByName('draw-button') as Phaser.GameObjects.Container\r\n      const challengeButton = actionButtons.getByName('challenge-button') as Phaser.GameObjects.Container\r\n      const endTurnButton = actionButtons.getByName('end-turn-button') as Phaser.GameObjects.Container\r\n      \r\n      if (drawButton) {\r\n        this.keyboardController.registerFocusableElement(drawButton, () => {\r\n          if (this.gameInstance.phase === 'draw' && this.gameInstance.isInProgress()) {\r\n            this.drawCards(1)\r\n          }\r\n        })\r\n      }\r\n      \r\n      if (challengeButton) {\r\n        this.keyboardController.registerFocusableElement(challengeButton, () => {\r\n          if (this.gameInstance.phase === 'draw' && !this.gameInstance.currentChallenge && this.gameInstance.isInProgress()) {\r\n            this.startChallenge()\r\n          }\r\n        })\r\n      }\r\n      \r\n      if (endTurnButton) {\r\n        this.keyboardController.registerFocusableElement(endTurnButton, () => {\r\n          const phase = this.gameInstance.phase\r\n          if ((phase === 'draw' || phase === 'resolution') && this.gameInstance.isInProgress()) {\r\n            this.endTurn()\r\n          }\r\n        })\r\n      }\r\n    }\r\n    \r\n    // 手札のカードを登録\r\n    this.registerHandCardsFocus()\r\n  }\r\n  \r\n  /**\r\n   * 手札のカードをフォーカス可能要素として登録\r\n   */\r\n  private registerHandCardsFocus(): void {\r\n    if (!this.keyboardController) return\r\n    \r\n    // 既存の手札登録を解除\r\n    this.handCards.forEach((cardContainer) => {\r\n      this.keyboardController!.unregisterFocusableElement(cardContainer)\r\n    })\r\n    \r\n    // 新しく登録\r\n    this.handCards.forEach((cardContainer) => {\r\n      this.keyboardController!.registerFocusableElement(cardContainer, () => {\r\n        const cardData = cardContainer.getData('card') as Card\r\n        if (cardData) {\r\n          this.toggleCardSelection(cardContainer)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ゲーム開始\r\n   */\r\n  private startGame(): void {\r\n    this.gameInstance.start()\r\n    \r\n    // 初期手札を引く\r\n    this.drawCards(GAME_CONSTANTS.INITIAL_DRAW)\r\n    \r\n    // ボタン状態を初期化\r\n    this.time.delayedCall(100, () => {\r\n      this.updateActionButtons()\r\n    })\r\n\r\n    // ゲーム状態を公開（チュートリアル用）\r\n    this.updateGameStateForTutorial()\r\n  }\r\n\r\n  /**\r\n   * カードを引く\r\n   */\r\n  private drawCards(count: number): void {\r\n    const drawnCards = this.gameInstance.drawCards(count)\r\n    \r\n    drawnCards.forEach((card, index) => {\r\n      this.time.delayedCall(index * 100, () => {\r\n        this.createHandCard(card)\r\n        // カードドロー音を再生\r\n        this.soundManager?.play('cardDraw')\r\n      })\r\n    })\r\n\r\n    // 手札を再配置\r\n    this.time.delayedCall(count * 100 + 100, () => {\r\n      this.arrangeHand()\r\n      // チュートリアル用にゲーム状態を更新\r\n      this.updateGameStateForTutorial()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 手札にカードを作成\r\n   */\r\n  private createHandCard(card: Card): void {\r\n    const cardContainer = this.add.container(\r\n      GAME_CONSTANTS.DECK_X_POSITION,\r\n      GAME_CONSTANTS.DECK_Y_POSITION\r\n    )\r\n\r\n    // カード背景 - グラデーションと角丸\r\n    const graphics = this.add.graphics()\r\n    const cardColor = this.getCardColor(card.type)\r\n    \r\n    // グラデーション背景\r\n    graphics.fillGradientStyle(cardColor.top, cardColor.top, cardColor.bottom, cardColor.bottom, 1)\r\n    graphics.fillRoundedRect(-60, -80, 120, 160, 12)\r\n    \r\n    // ガラスモルフィズム効果\r\n    const glassBg = this.add.rectangle(0, 0, 116, 156, 0xffffff, 0.1)\r\n    glassBg.setStrokeStyle(1, 0xffffff, 0.3)\r\n    \r\n    // カードをインタラクティブに\r\n    const hitArea = new Phaser.Geom.Rectangle(-60, -80, 120, 160)\r\n    cardContainer.setInteractive(hitArea, Phaser.Geom.Rectangle.Contains)\r\n    \r\n    // カードクリックイベント（チャレンジ中の選択用）\r\n    cardContainer.on('pointerdown', () => {\r\n      // チャレンジ中なら選択トグル\r\n      if (this.gameInstance.currentChallenge && !cardContainer.getData('isDragging')) {\r\n        this.toggleCardSelection(cardContainer)\r\n      }\r\n    })\r\n\r\n    // カード名\r\n    const cardName = this.add.text(\r\n      0,\r\n      -60,\r\n      card.name,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#F9FAFB',\r\n        fontStyle: 'bold',\r\n        wordWrap: { width: 100 }\r\n      }\r\n    ).setOrigin(0.5)\r\n    cardName.setShadow(1, 1, '#000000', 0.5, true, true)\r\n\r\n    // パワー表示\r\n    const powerBg = this.add.circle(-40, 60, 20, 0x111827, 0.8)\r\n    const powerText = this.add.text(\r\n      -40,\r\n      60,\r\n      `${card.power}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#10B981',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // コスト表示\r\n    const costBg = this.add.circle(40, 60, 18, 0x111827, 0.8)\r\n    const costText = this.add.text(\r\n      40,\r\n      60,\r\n      `${card.cost}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#F59E0B',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 年齢ボーナス表示（保険カードの場合）\r\n    let ageBonusIndicator: Phaser.GameObjects.Container | null = null\r\n    if (card.type === 'insurance' && card.ageBonus !== undefined && card.ageBonus > 0) {\r\n      const stage = this.gameInstance.stage\r\n      let currentBonus = 0\r\n      if (stage === 'middle') currentBonus = 0.5\r\n      else if (stage === 'fulfillment') currentBonus = 1.0\r\n      \r\n      if (currentBonus > 0) {\r\n        // 年齢ボーナス背景\r\n        const bonusBg = this.add.circle(0, -60, 12, 0x6366F1, 0.9)\r\n        \r\n        // 年齢ボーナステキスト\r\n        const bonusText = this.add.text(\r\n          0, -60,\r\n          `+${currentBonus}`,\r\n          {\r\n            fontFamily: 'Noto Sans JP',\r\n            fontSize: '12px',\r\n            color: '#FFFFFF',\r\n            fontStyle: 'bold'\r\n          }\r\n        ).setOrigin(0.5)\r\n        \r\n        ageBonusIndicator = this.add.container(0, 0, [bonusBg, bonusText])\r\n        ageBonusIndicator.setAlpha(0.8)\r\n        \r\n        // パルス効果\r\n        this.tweens.add({\r\n          targets: ageBonusIndicator,\r\n          alpha: 1,\r\n          scale: 1.1,\r\n          duration: 1000,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n      }\r\n    }\r\n\r\n    // 効果的パワー表示（年齢ボーナス適用後）\r\n    let effectivePower = card.power\r\n    if (card.type === 'insurance' && card.ageBonus !== undefined) {\r\n      const stage = this.gameInstance.stage\r\n      let multiplier = 1\r\n      if (stage === 'middle') multiplier = 1.5\r\n      else if (stage === 'fulfillment') multiplier = 2.0\r\n      effectivePower = Math.floor(card.power * multiplier)\r\n    }\r\n\r\n    // パワー表示を効果的パワーに更新\r\n    if (effectivePower !== card.power) {\r\n      powerText.setText(`${effectivePower}`)\r\n      powerText.setColor('#A78BFA') // 紫色で年齢ボーナスを表示\r\n      \r\n      // 基本パワーを小さく表示\r\n      const basePowerText = this.add.text(\r\n        -40, 45,\r\n        `(${card.power})`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '12px',\r\n          color: '#9CA3AF',\r\n          fontStyle: 'normal'\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      const cardElements = [graphics, glassBg, cardName, powerBg, powerText, basePowerText, costBg, costText]\r\n      if (ageBonusIndicator) cardElements.push(ageBonusIndicator)\r\n      cardContainer.add(cardElements)\r\n    } else {\r\n      const cardElements = [graphics, glassBg, cardName, powerBg, powerText, costBg, costText]\r\n      if (ageBonusIndicator) cardElements.push(ageBonusIndicator)\r\n      cardContainer.add(cardElements)\r\n    }\r\n    \r\n    cardContainer.setData('card', card)\r\n    cardContainer.setData('selected', false)\r\n    \r\n    // ホバーエフェクト用のグロウ\r\n    const glow = this.add.rectangle(0, 0, 130, 170, 0x818CF8, 0)\r\n    glow.setAlpha(0)\r\n    cardContainer.add(glow)\r\n    cardContainer.sendToBack(glow)\r\n    cardContainer.setData('glow', glow)\r\n    \r\n    // インタラクション設定\r\n    this.setupCardInteraction(cardContainer)\r\n    \r\n    // 新しいドラッグ&ドロップシステムの設定\r\n    if (this.dropZoneIntegration) {\r\n      this.dropZoneIntegration.setupCardDragAndDrop(cardContainer)\r\n    }\r\n    \r\n    this.handCards.push(cardContainer)\r\n  }\r\n\r\n  /**\r\n   * カードテンプレートを取得\r\n   */\r\n  private getCardTemplate(type: CardType): string {\r\n    switch (type) {\r\n      case 'life':\r\n        return 'life-card-template'\r\n      case 'insurance':\r\n        return 'insurance-card-template'\r\n      case 'pitfall':\r\n        return 'pitfall-card-template'\r\n      default:\r\n        return 'life-card-template'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードの色を取得\r\n   */\r\n  private getCardColor(type: CardType): { top: number; bottom: number } {\r\n    switch (type) {\r\n      case 'life':\r\n        return { top: 0x667eea, bottom: 0x764ba2 }  // 紫グラデーション\r\n      case 'insurance':\r\n        return { top: 0x10B981, bottom: 0x059669 }  // 緑グラデーション\r\n      case 'pitfall':\r\n        return { top: 0xEF4444, bottom: 0xDC2626 }  // 赤グラデーション\r\n      case 'dream':\r\n        return { top: 0xFCD34D, bottom: 0xF59E0B }  // 金色グラデーション\r\n      default:\r\n        return { top: 0x6B7280, bottom: 0x4B5563 }  // グレーグラデーション\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カードのインタラクションを設定\r\n   */\r\n  private setupCardInteraction(cardContainer: Phaser.GameObjects.Container): void {\r\n    // ドラッグ用の初期位置を保存\r\n    cardContainer.setData('originalX', cardContainer.x)\r\n    cardContainer.setData('originalY', cardContainer.y)\r\n    cardContainer.setData('isDragging', false)\r\n    \r\n    const glow = cardContainer.getData('glow')\r\n\r\n    // ドラッグ可能に設定\r\n    this.input.setDraggable(cardContainer)\r\n\r\n    // ホバー効果\r\n    cardContainer.on('pointerover', () => {\r\n      if (!cardContainer.getData('selected') && !cardContainer.getData('isDragging')) {\r\n        // スケールアップアニメーション\r\n        this.tweens.add({\r\n          targets: cardContainer,\r\n          scaleX: GAME_CONSTANTS.CARD_HOVER_SCALE,\r\n          scaleY: GAME_CONSTANTS.CARD_HOVER_SCALE,\r\n          duration: 200,\r\n          ease: 'Power2'\r\n        })\r\n        \r\n        // グロウエフェクト\r\n        if (glow) {\r\n          this.tweens.add({\r\n            targets: glow,\r\n            alpha: 0.3,\r\n            duration: 200,\r\n            ease: 'Power2'\r\n          })\r\n        }\r\n      }\r\n    })\r\n\r\n    cardContainer.on('pointerout', () => {\r\n      if (!cardContainer.getData('selected') && !cardContainer.getData('isDragging')) {\r\n        // スケールダウンアニメーション\r\n        this.tweens.add({\r\n          targets: cardContainer,\r\n          scaleX: 1,\r\n          scaleY: 1,\r\n          duration: 200,\r\n          ease: 'Power2'\r\n        })\r\n        \r\n        // グロウエフェクト消去\r\n        if (glow) {\r\n          this.tweens.add({\r\n            targets: glow,\r\n            alpha: 0,\r\n            duration: 200,\r\n            ease: 'Power2'\r\n          })\r\n        }\r\n      }\r\n    })\r\n\r\n    // クリック（選択）\r\n    cardContainer.on('pointerdown', (pointer: Phaser.Input.Pointer) => {\r\n      // 右クリックでドラッグ開始を防ぐ\r\n      if (pointer.rightButtonDown()) return\r\n      \r\n      cardContainer.setData('dragStartTime', this.time.now)\r\n      cardContainer.setDepth(1000) // 最前面に表示\r\n    })\r\n\r\n    cardContainer.on('pointerup', () => {\r\n      const dragStartTime = cardContainer.getData('dragStartTime')\r\n      const isDragging = cardContainer.getData('isDragging')\r\n      \r\n      // クリック判定（ドラッグしていない場合）\r\n      if (!isDragging && dragStartTime && this.time.now - dragStartTime < 200) {\r\n        this.toggleCardSelection(cardContainer)\r\n      }\r\n      \r\n      cardContainer.setData('isDragging', false)\r\n    })\r\n\r\n    // ドラッグ開始\r\n    cardContainer.on('dragstart', () => {\r\n      cardContainer.setData('isDragging', true)\r\n      this.isDragInProgress = true\r\n      \r\n      // 新しいビジュアル効果\r\n      cardContainer.setScale(GAME_CONSTANTS.DRAG_DROP.DRAG_SCALE)\r\n      cardContainer.setAlpha(GAME_CONSTANTS.DRAG_DROP.DRAG_ALPHA)\r\n      \r\n      \r\n      // ドラッグ中は選択を解除\r\n      if (cardContainer.getData('selected')) {\r\n        this.toggleCardSelection(cardContainer)\r\n      }\r\n    })\r\n\r\n    // ドラッグ中\r\n    cardContainer.on('drag', (pointer: Phaser.Input.Pointer, dragX: number, dragY: number) => {\r\n      // モバイル端末でのタッチオフセット調整\r\n      const isMobile = this.scale.orientation === Phaser.Scale.LANDSCAPE || this.scale.orientation === Phaser.Scale.PORTRAIT\r\n      const offsetY = isMobile ? -GAME_CONSTANTS.DRAG_DROP.MOBILE_TOUCH_OFFSET : 0\r\n      \r\n      cardContainer.x = dragX\r\n      cardContainer.y = dragY + offsetY\r\n      \r\n    })\r\n\r\n    // ドラッグ終了\r\n    cardContainer.on('dragend', () => {\r\n      // ビジュアル効果をリセット\r\n      cardContainer.setScale(1)\r\n      cardContainer.setAlpha(1)\r\n      \r\n      // ドロップ先の判定\r\n      const dropZone = this.getDropZone(cardContainer.x, cardContainer.y)\r\n      \r\n      if (dropZone && this.isValidDropZone(dropZone, cardContainer)) {\r\n        // 有効なドロップゾーンにドロップ\r\n        this.handleValidDrop(dropZone, cardContainer)\r\n      } else {\r\n        // 無効なドロップ - 元の位置に戻す（振動効果付き）\r\n        this.handleInvalidDrop(cardContainer)\r\n      }\r\n      \r\n      cardContainer.setDepth(0) // 通常の深度に戻す\r\n    })\r\n  }\r\n\r\n  /**\r\n   * カードの選択状態を切り替え\r\n   */\r\n  private toggleCardSelection(cardContainer: Phaser.GameObjects.Container): void {\r\n    // チャレンジ中でない場合は選択できない\r\n    if (!this.gameInstance.currentChallenge) {\r\n      return\r\n    }\r\n    \r\n    const card = cardContainer.getData('card') as Card\r\n    const isSelected = cardContainer.getData('selected')\r\n    \r\n    if (isSelected) {\r\n      // ゲームインスタンスのカード選択を更新\r\n      this.gameInstance.toggleCardSelection(card)\r\n      this.selectedCards.delete(card.id)\r\n      cardContainer.setData('selected', false)\r\n      cardContainer.setScale(1)\r\n      \r\n      // カード選択解除音を再生\r\n      this.soundManager?.play('cardDeselect')\r\n      \r\n      // ハイライト削除\r\n      const highlight = cardContainer.getByName('highlight')\r\n      if (highlight) {\r\n        highlight.destroy()\r\n      }\r\n      \r\n      // 選択解除時のアニメーション\r\n      this.tweens.add({\r\n        targets: cardContainer,\r\n        scale: 1,\r\n        duration: 200,\r\n        ease: 'Back.easeOut'\r\n      })\r\n    } else {\r\n      // ゲームインスタンスのカード選択を更新\r\n      this.gameInstance.toggleCardSelection(card)\r\n      this.selectedCards.add(card.id)\r\n      cardContainer.setData('selected', true)\r\n      \r\n      // カード選択音を再生\r\n      this.soundManager?.play('cardSelect')\r\n      \r\n      // 選択時のアニメーション\r\n      this.tweens.add({\r\n        targets: cardContainer,\r\n        scale: 1.1,\r\n        duration: 200,\r\n        ease: 'Back.easeOut'\r\n      })\r\n      \r\n      // ハイライト追加\r\n      const graphics = this.add.graphics()\r\n      graphics.lineStyle(4, 0x00ff00, 1)\r\n      graphics.strokeRoundedRect(-62, -82, 124, 164, 12)\r\n      graphics.setName('highlight')\r\n      cardContainer.addAt(graphics, 0)\r\n      \r\n      // グロウ効果\r\n      this.tweens.add({\r\n        targets: graphics,\r\n        alpha: 0.5,\r\n        duration: 500,\r\n        yoyo: true,\r\n        repeat: -1,\r\n        ease: 'Sine.easeInOut'\r\n      })\r\n    }\r\n\r\n    // チャレンジ中ならパワー表示を更新\r\n    if (this.gameInstance.currentChallenge) {\r\n      this.updatePowerDisplay()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手札を整列\r\n   */\r\n  private arrangeHand(): void {\r\n    const cardCount = this.handCards.length\r\n    const totalWidth = (cardCount - 1) * (GAME_CONSTANTS.CARD_WIDTH + GAME_CONSTANTS.CARD_SPACING)\r\n    const startX = this.centerX - totalWidth / 2\r\n\r\n    this.handCards.forEach((card, index) => {\r\n      const targetX = startX + index * (GAME_CONSTANTS.CARD_WIDTH + GAME_CONSTANTS.CARD_SPACING)\r\n      \r\n      // ドラッグ用の元の位置を更新\r\n      card.setData('originalX', targetX)\r\n      card.setData('originalY', GAME_CONSTANTS.HAND_Y_POSITION)\r\n      \r\n      this.tweens.add({\r\n        targets: card,\r\n        x: targetX,\r\n        y: GAME_CONSTANTS.HAND_Y_POSITION,\r\n        duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n    \r\n    // キーボード操作用にフォーカス可能要素を再登録\r\n    this.registerHandCardsFocus()\r\n  }\r\n\r\n  /**\r\n   * チャレンジ開始\r\n   */\r\n  private startChallenge(): void {\r\n    if (this.gameInstance.currentChallenge) {\r\n      // すでにチャレンジが進行中\r\n      return\r\n    }\r\n\r\n    // チャレンジカードを引く\r\n    const challengeCard = this.gameInstance.challengeDeck.drawCard()\r\n    if (!challengeCard) {\r\n      // チャレンジカードがありません\r\n      return\r\n    }\r\n\r\n    // チャレンジ開始\r\n    this.gameInstance.startChallenge(challengeCard)\r\n    \r\n    // チャレンジ開始音を再生\r\n    this.soundManager?.play('challengeStart')\r\n    \r\n    // チャレンジカードを表示\r\n    this.displayChallengeCard(challengeCard)\r\n    \r\n    // UIを更新\r\n    this.updateChallengeUI()\r\n    this.updateActionButtons()\r\n    \r\n    // 手札のカードを選択可能にする\r\n    this.enableHandCardSelection()\r\n  }\r\n\r\n  /**\r\n   * 手札のカードを選択可能にする\r\n   */\r\n  private enableHandCardSelection(): void {\r\n    this.handCards.forEach(cardContainer => {\r\n      // チャレンジ中であることを明示\r\n      cardContainer.setData('challengeActive', true)\r\n      \r\n      // DropZoneIntegrationのsetupCardDragAndDropを使用\r\n      if (this.dropZoneIntegration) {\r\n        // ドラッグ可能に設定\r\n        this.input.setDraggable(cardContainer, true)\r\n        \r\n        // 既存のドラッグイベントハンドラーをクリア\r\n        cardContainer.off('dragstart')\r\n        cardContainer.off('drag')\r\n        cardContainer.off('dragend')\r\n        \r\n        // DropZoneIntegrationのドラッグハンドラーを設定\r\n        this.dropZoneIntegration.setupCardDragAndDrop(cardContainer)\r\n      } else {\r\n        // フォールバック: 基本的なドラッグ機能\r\n        this.input.setDraggable(cardContainer, true)\r\n        \r\n        cardContainer.on('dragstart', (pointer: Phaser.Input.Pointer) => {\r\n          cardContainer.setData('isDragging', true)\r\n          cardContainer.setDepth(1000)\r\n        })\r\n        \r\n        cardContainer.on('drag', (pointer: Phaser.Input.Pointer, dragX: number, dragY: number) => {\r\n          cardContainer.x = dragX\r\n          cardContainer.y = dragY\r\n        })\r\n        \r\n        cardContainer.on('dragend', (pointer: Phaser.Input.Pointer) => {\r\n          cardContainer.setData('isDragging', false)\r\n          cardContainer.setDepth(10)\r\n          \r\n          // 元の位置に戻す\r\n          const originalX = cardContainer.getData('originalX') || cardContainer.x\r\n          const originalY = cardContainer.getData('originalY') || cardContainer.y\r\n          \r\n          this.tweens.add({\r\n            targets: cardContainer,\r\n            x: originalX,\r\n            y: originalY,\r\n            duration: 300,\r\n            ease: 'Back.easeOut'\r\n          })\r\n        })\r\n      }\r\n      \r\n      // 視覚的にドラッグ可能であることを示す\r\n      const glowEffect = cardContainer.getData('glow')\r\n      if (glowEffect) {\r\n        glowEffect.setVisible(true)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ターン終了\r\n   */\r\n  private endTurn(): void {\r\n    if (!this.gameInstance.isInProgress()) return\r\n    \r\n    // フェーズをチェックして適切に処理\r\n    if (this.gameInstance.phase === 'resolution' || this.gameInstance.phase === 'draw') {\r\n      // ターン遷移アニメーション用のオーバーレイ\r\n      const transitionOverlay = this.add.rectangle(\r\n        this.centerX,\r\n        this.centerY,\r\n        this.gameWidth,\r\n        this.gameHeight,\r\n        0x000000,\r\n        0\r\n      )\r\n      transitionOverlay.setDepth(1999)\r\n      \r\n      // フェードイン\r\n      this.tweens.add({\r\n        targets: transitionOverlay,\r\n        alpha: 0.5,\r\n        duration: 200,\r\n        ease: 'Power2',\r\n        onComplete: () => {\r\n          // ステージ進行チェック\r\n          this.checkStageProgress()\r\n          \r\n          // 次のターンへ\r\n          this.gameInstance.nextTurn()\r\n          \r\n          // 簡素化版：保険は永続効果のため、期限切れ処理は不要\r\n          \r\n          // UI更新（ダーティフラグを設定）\r\n          this.dirtyFlags.vitality = true\r\n          this.dirtyFlags.stage = true  \r\n          this.dirtyFlags.actionButtons = true\r\n          this.updateUI()\r\n          \r\n          // チュートリアル用にゲーム状態を更新\r\n          this.updateGameStateForTutorial()\r\n          \r\n          // フェードアウト\r\n          this.tweens.add({\r\n            targets: transitionOverlay,\r\n            alpha: 0,\r\n            duration: 200,\r\n            ease: 'Power2',\r\n            onComplete: () => {\r\n              transitionOverlay.destroy()\r\n              // ゲーム終了判定\r\n              this.checkGameEnd()\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 3-3: 保険カードリストを更新\r\n   */\r\n  private updateInsuranceList(): void {\r\n    if (!this.insuranceListContainer) return\r\n\r\n    // 既存のカードアイテムを削除（タイトル以外）\r\n    const itemsToRemove = this.insuranceListContainer.list.filter((item, index) => index > 0)\r\n    itemsToRemove.forEach(item => item.destroy())\r\n\r\n    const activeInsurances = this.gameInstance.getActiveInsurances()\r\n    \r\n    if (activeInsurances.length === 0) {\r\n      const noInsuranceText = this.add.text(\r\n        0, 30,\r\n        'なし',\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#999999'\r\n        }\r\n      ).setOrigin(0.5)\r\n      this.insuranceListContainer.add(noInsuranceText)\r\n      return\r\n    }\r\n\r\n    // 保険カードをリスト表示\r\n    activeInsurances.forEach((insurance, index) => {\r\n      const yPos = 30 + index * 35\r\n\r\n      // カードコンテナ\r\n      const cardItem = this.add.container(0, yPos)\r\n\r\n      // Phase 5-2: 期限切れ間近の警告表示\r\n      const isExpiringSoon = insurance.durationType === 'term' && \r\n                             insurance.remainingTurns !== undefined && \r\n                             insurance.remainingTurns <= 2\r\n      const isExpiringSoonTwoTurns = isExpiringSoon && insurance.remainingTurns === 2\r\n      const isExpiringSoonOneTurn = isExpiringSoon && insurance.remainingTurns === 1\r\n\r\n      // カード背景色の決定\r\n      let bgColor = insurance.durationType === 'whole_life' ? 0xFFD700 : 0xC0C0C0\r\n      let strokeColor = bgColor\r\n      \r\n      if (isExpiringSoonTwoTurns) {\r\n        bgColor = 0xFFA500  // オレンジ色（警告）\r\n        strokeColor = 0xFFA500\r\n      } else if (isExpiringSoonOneTurn) {\r\n        bgColor = 0xFF4444  // 赤色（危険）\r\n        strokeColor = 0xFF4444\r\n      }\r\n\r\n      // カード背景\r\n      const itemBg = this.add.rectangle(\r\n        0, 0, 240, 30,\r\n        bgColor,\r\n        0.2\r\n      )\r\n      itemBg.setStrokeStyle(2, strokeColor)\r\n\r\n      // Phase 5-2: 期限切れ間近の点滅アニメーション\r\n      if (isExpiringSoon) {\r\n        const animationDuration = isExpiringSoonOneTurn ? 300 : 500  // 1ターン残りは速い点滅\r\n        this.tweens.add({\r\n          targets: itemBg,\r\n          alpha: 0.3,\r\n          duration: animationDuration,\r\n          yoyo: true,\r\n          repeat: -1,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n        itemBg.setFillStyle(bgColor, 0.3)\r\n      }\r\n\r\n      // Phase 5-2: 保険種別バッジ（警告状況に応じて色変更）\r\n      let badgeColor = insurance.durationType === 'whole_life' ? 0xFFD700 : 0xC0C0C0\r\n      let textColor = insurance.durationType === 'whole_life' ? '#000000' : '#ffffff'\r\n      \r\n      if (isExpiringSoonTwoTurns) {\r\n        badgeColor = 0xFFA500  // オレンジ色（警告）\r\n        textColor = '#000000'\r\n      } else if (isExpiringSoonOneTurn) {\r\n        badgeColor = 0xFF4444  // 赤色（危険）\r\n        textColor = '#ffffff'\r\n      }\r\n\r\n      const typeBadge = this.add.rectangle(\r\n        -100, 0, 40, 20,\r\n        badgeColor\r\n      )\r\n      typeBadge.setStrokeStyle(1, 0xffffff)\r\n\r\n      const typeText = this.add.text(\r\n        -100, 0,\r\n        insurance.durationType === 'whole_life' ? '終身' : '定期',\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '10px',\r\n          color: textColor,\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n\r\n      // カード名\r\n      const nameText = this.add.text(\r\n        -50, 0,\r\n        insurance.name.length > 8 ? `${insurance.name.substring(0, 8)  }...` : insurance.name,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '12px',\r\n          color: '#ffffff'\r\n        }\r\n      ).setOrigin(0, 0.5)\r\n\r\n      // Phase 5-2: 年齢ボーナス表示（終身保険のみ）\r\n      if (insurance.durationType === 'whole_life') {\r\n        const stage = this.gameInstance.stage\r\n        let bonus = 0\r\n        if (stage === 'middle') bonus = 0.5\r\n        else if (stage === 'fulfillment') bonus = 1.0\r\n        \r\n        if (bonus > 0) {\r\n          const bonusText = this.add.text(\r\n            50, 0,\r\n            `+${bonus}`,\r\n            {\r\n              fontFamily: 'Noto Sans JP',\r\n              fontSize: '12px',\r\n              color: '#4ade80',\r\n              fontStyle: 'bold'\r\n            }\r\n          ).setOrigin(0.5)\r\n          cardItem.add(bonusText)\r\n        }\r\n      }\r\n\r\n      // 残りターン数（定期保険の場合）\r\n      if (insurance.durationType === 'term' && insurance.remainingTurns !== undefined) {\r\n        // 残りターン数に応じた色分け\r\n        let turnsTextColor = '#ffffff'\r\n        if (insurance.remainingTurns === 2) {\r\n          turnsTextColor = '#FFA500'  // オレンジ色（警告）\r\n        } else if (insurance.remainingTurns === 1) {\r\n          turnsTextColor = '#FF4444'  // 赤色（危険）\r\n        }\r\n\r\n        const turnsText = this.add.text(\r\n          100, 0,\r\n          `残り${insurance.remainingTurns}T`,\r\n          {\r\n            fontFamily: 'Noto Sans JP',\r\n            fontSize: '12px',\r\n            color: turnsTextColor,\r\n            fontStyle: insurance.remainingTurns <= 2 ? 'bold' : 'normal'\r\n          }\r\n        ).setOrigin(1, 0.5)\r\n        \r\n        // Phase 5-2: 期限切れ間近の警告アイコン（色分け対応）\r\n        if (insurance.remainingTurns <= 2) {\r\n          const warningIconColor = insurance.remainingTurns === 1 ? '#FF4444' : '#FFA500'\r\n          const warningIcon = this.add.text(\r\n            115, 0,\r\n            insurance.remainingTurns === 1 ? '🚨' : '⚠',\r\n            {\r\n              fontFamily: 'Noto Sans JP',\r\n              fontSize: '14px',\r\n              color: warningIconColor\r\n            }\r\n          ).setOrigin(0.5)\r\n          cardItem.add(warningIcon)\r\n        }\r\n        \r\n        cardItem.add(turnsText)\r\n      }\r\n\r\n      cardItem.add([itemBg, typeBadge, typeText, nameText])\r\n      this.insuranceListContainer.add(cardItem)\r\n\r\n      // 3枚ごとに区切り線\r\n      if ((index + 1) % 3 === 0 && index < activeInsurances.length - 1) {\r\n        const divider = this.add.rectangle(\r\n          0, yPos + 20, 200, 2,\r\n          0xff4444, 0.5\r\n        )\r\n        this.insuranceListContainer.add(divider)\r\n      }\r\n    })\r\n\r\n    // 負担発生の警告\r\n    if (activeInsurances.length >= 3) {\r\n      const warningText = this.add.text(\r\n        0, 30 + activeInsurances.length * 35 + 10,\r\n        `⚠ ${Math.floor(activeInsurances.length / 3)}ポイント負担中`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#ff4444',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n      this.insuranceListContainer.add(warningText)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 3-3: 保険料負担インジケーターを更新\r\n   */\r\n  private updateBurdenIndicator(): void {\r\n    if (!this.burdenIndicatorContainer) return\r\n\r\n    const burdenText = this.burdenIndicatorContainer.getByName('burden-value') as Phaser.GameObjects.Text\r\n    if (!burdenText) return\r\n\r\n    const burden = this.gameInstance.insuranceBurden\r\n    const previousBurden = parseInt(burdenText.text === '負担なし' ? '0' : burdenText.text)\r\n\r\n    // 負担値を更新\r\n    burdenText.setText(burden === 0 ? '負担なし' : `${burden}`)\r\n    burdenText.setColor(burden === 0 ? '#00ff00' : '#ff4444')\r\n\r\n    // 負担が増えた場合は警告アニメーション\r\n    if (burden < previousBurden) { // 負の値なので逆\r\n      this.tweens.add({\r\n        targets: this.burdenIndicatorContainer,\r\n        scaleX: 1.2,\r\n        scaleY: 1.2,\r\n        duration: 200,\r\n        yoyo: true,\r\n        ease: 'Power2',\r\n        onComplete: () => {\r\n          // 赤く点滅\r\n          const bg = this.burdenIndicatorContainer?.list[0] as Phaser.GameObjects.Rectangle\r\n          if (bg) {\r\n            bg.setFillStyle(0xff0000, 0.8)\r\n            this.time.delayedCall(300, () => {\r\n              bg.setFillStyle(0x000000, 0.7)\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * UI更新（最適化版）\r\n   */\r\n  private updateUI(): void {\r\n    // ダーティフラグをチェックして必要な部分のみ更新\r\n    if (this.dirtyFlags.vitality) {\r\n      this.updateVitalityDisplay()\r\n      this.dirtyFlags.vitality = false\r\n    }\r\n\r\n    if (this.dirtyFlags.stage) {\r\n      this.updateStageDisplay() \r\n      this.dirtyFlags.stage = false\r\n    }\r\n\r\n    if (this.dirtyFlags.deck) {\r\n      this.updateDeckDisplay()\r\n      this.dirtyFlags.deck = false\r\n    }\r\n\r\n    if (this.dirtyFlags.insurance) {\r\n      this.updateInsuranceList()\r\n      this.dirtyFlags.insurance = false\r\n    }\r\n\r\n    if (this.dirtyFlags.burden) {\r\n      this.updateBurdenIndicator()\r\n      this.dirtyFlags.burden = false\r\n    }\r\n\r\n    if (this.dirtyFlags.hand) {\r\n      this.arrangeHand()\r\n      this.dirtyFlags.hand = false\r\n    }\r\n\r\n    if (this.dirtyFlags.actionButtons) {\r\n      this.updateActionButtons()\r\n      this.dirtyFlags.actionButtons = false\r\n    }\r\n\r\n    if (this.dirtyFlags.challenge) {\r\n      this.updateChallengeUI()\r\n      this.dirtyFlags.challenge = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 活力表示を更新\r\n   */\r\n  private updateVitalityDisplay(): void {\r\n    const currentTime = this.time.now\r\n    \r\n    // スロットリング: 100ms以内の更新は無視\r\n    if (currentTime - this.updateThrottleTimers.vitality < 100) {\r\n      return\r\n    }\r\n    this.updateThrottleTimers.vitality = currentTime\r\n\r\n    const vitalityText = this.children.getByName('vitality-text') as Phaser.GameObjects.Text\r\n    if (vitalityText) {\r\n      const stageLabel = this.getStageDisplayText()\r\n      vitalityText.setText(`活力: ${this.gameInstance.vitality} / ${this.gameInstance.maxVitality} (${stageLabel})`)\r\n    }\r\n\r\n    this.updateVitalityBar()\r\n  }\r\n\r\n  /**\r\n   * ステージ表示を更新  \r\n   */\r\n  private updateStageDisplay(): void {\r\n    const turnText = this.children.getByName('turn-text') as Phaser.GameObjects.Text\r\n    if (turnText) {\r\n      turnText.setText(`ターン: ${this.gameInstance.turn}`)\r\n    }\r\n    \r\n    const stageText = this.children.getByName('stage-text') as Phaser.GameObjects.Text\r\n    if (stageText) {\r\n      stageText.setText(this.getStageDisplayText())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * デッキ表示を更新\r\n   */\r\n  private updateDeckDisplay(): void {\r\n    const deckCount = this.children.getByName('deck-count') as Phaser.GameObjects.Text\r\n    if (deckCount) {\r\n      deckCount.setText(`${this.gameInstance.playerDeck.size()}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 活力バーを更新\r\n   */\r\n  private updateVitalityBar(): void {\r\n    if (!this.vitalityBar || !this.vitalityBarContainer) return\r\n\r\n    const oldVitality = this.vitalityBar.getData('currentVitality') || this.gameInstance.vitality\r\n    const newVitality = this.gameInstance.vitality\r\n    const vitalityPercentage = newVitality / this.gameInstance.maxVitality\r\n    const targetWidth = Math.max(0, this.vitalityBarMaxWidth * vitalityPercentage)\r\n    const newColor = this.getVitalityBarColor(vitalityPercentage)\r\n\r\n    // 数値カウントアップアニメーション\r\n    const counter = { value: oldVitality }\r\n    this.tweens.add({\r\n      targets: counter,\r\n      value: newVitality,\r\n      duration: 800,\r\n      ease: 'Cubic.out',\r\n      onUpdate: () => {\r\n        const vitalityText = this.children.getByName('vitality-text') as Phaser.GameObjects.Text\r\n        if (vitalityText) {\r\n          const stageLabel = this.getStageDisplayText()\r\n          vitalityText.setText(`活力: ${Math.floor(counter.value)} / ${this.gameInstance.maxVitality} (${stageLabel})`)\r\n        }\r\n      }\r\n    })\r\n\r\n    // バーのアニメーション（より滑らか）\r\n    this.tweens.add({\r\n      targets: this.vitalityBar,\r\n      width: targetWidth,\r\n      duration: 800,\r\n      ease: 'Cubic.out',\r\n      onUpdate: () => {\r\n        // 現在の割合に基づいて色を動的に更新\r\n        const currentPercentage = this.vitalityBar!.width / this.vitalityBarMaxWidth\r\n        const currentColor = this.getVitalityBarColor(currentPercentage)\r\n        this.vitalityBar?.setFillStyle(currentColor)\r\n      },\r\n      onComplete: () => {\r\n        // 最終的な色を設定\r\n        this.vitalityBar?.setFillStyle(newColor)\r\n      }\r\n    })\r\n\r\n    // バイタリティが減った場合のパルスエフェクト\r\n    if (newVitality < oldVitality) {\r\n      this.tweens.add({\r\n        targets: this.vitalityBarContainer,\r\n        scaleX: 1.05,\r\n        scaleY: 1.05,\r\n        duration: 150,\r\n        ease: 'Power2',\r\n        yoyo: true,\r\n        repeat: 1\r\n      })\r\n    }\r\n    \r\n    // バイタリティが増えた場合のグローエフェクト\r\n    if (newVitality > oldVitality) {\r\n      const glow = this.add.rectangle(0, 0, this.vitalityBarMaxWidth + 20, 30, 0x10B981, 0.5)\r\n      glow.setAlpha(0)\r\n      this.vitalityBarContainer.add(glow)\r\n      \r\n      this.tweens.add({\r\n        targets: glow,\r\n        alpha: 0.6,\r\n        duration: 200,\r\n        ease: 'Power2',\r\n        yoyo: true,\r\n        repeat: 1,\r\n        onComplete: () => glow.destroy()\r\n      })\r\n    }\r\n\r\n    // 現在値を保存\r\n    this.vitalityBar.setData('currentVitality', newVitality)\r\n  }\r\n\r\n  /**\r\n   * パワー表示を更新\r\n   */\r\n  private updatePowerDisplay(): void {\r\n    const powerDisplay = this.children.getByName('power-display') as Phaser.GameObjects.Container\r\n    if (!powerDisplay) return\r\n\r\n    // Phase 3-3: 詳細なパワー計算\r\n    const selectedCardsArray = this.handCards\r\n      .filter(cardContainer => this.selectedCards.has(cardContainer.getData('card').id))\r\n      .map(cardContainer => cardContainer.getData('card') as Card)\r\n    \r\n    const powerBreakdown = this.gameInstance.calculateTotalPower(selectedCardsArray)\r\n    \r\n    // 既存のテキストを削除\r\n    const textsToRemove = powerDisplay.list.filter(item => \r\n      item instanceof Phaser.GameObjects.Text && item.name !== 'power-text' && item.name !== 'count-text'\r\n    )\r\n    textsToRemove.forEach(text => text.destroy())\r\n    \r\n    const powerText = powerDisplay.getByName('power-text') as Phaser.GameObjects.Text\r\n    const countText = powerDisplay.getByName('count-text') as Phaser.GameObjects.Text\r\n    \r\n    if (powerText) {\r\n      powerText.setText(`合計パワー: ${powerBreakdown.total}`)\r\n      powerText.setColor(powerBreakdown.total > 0 ? '#00ff00' : '#ff4444')\r\n    }\r\n    if (countText) {\r\n      countText.setText(`選択カード: ${this.selectedCards.size}枚`)\r\n    }\r\n\r\n    // Phase 3-3: パワーの内訳を表示\r\n    let yOffset = 40\r\n    \r\n    // 基本パワー\r\n    if (powerBreakdown.base > 0) {\r\n      const baseText = this.add.text(\r\n        0, yOffset,\r\n        `基本: +${powerBreakdown.base}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#ffffff'\r\n        }\r\n      ).setOrigin(0.5)\r\n      powerDisplay.add(baseText)\r\n      yOffset += 20\r\n    }\r\n\r\n    // 保険ボーナス\r\n    if (powerBreakdown.insurance > 0) {\r\n      const insuranceText = this.add.text(\r\n        0, yOffset,\r\n        `保険: +${powerBreakdown.insurance}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#4ade80'\r\n        }\r\n      ).setOrigin(0.5)\r\n      powerDisplay.add(insuranceText)\r\n      yOffset += 20\r\n    }\r\n\r\n    // 保険料負担\r\n    if (powerBreakdown.burden < 0) {\r\n      const burdenText = this.add.text(\r\n        0, yOffset,\r\n        `負担: ${powerBreakdown.burden}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#ff4444',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n      powerDisplay.add(burdenText)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドロップゾーンを判定\r\n   */\r\n  private getDropZone(x: number, y: number): string | null {\r\n    // チャレンジエリアの判定\r\n    const challengeX = this.centerX\r\n    const challengeY = GAME_CONSTANTS.CHALLENGE_Y_POSITION\r\n    const distance = Phaser.Math.Distance.Between(x, y, challengeX, challengeY)\r\n    \r\n    if (distance < 100) {\r\n      return 'challenge'\r\n    }\r\n    \r\n    // 新しいDropZoneシステムで捕て札ゾーンは実装済み\r\n    \r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 有効なドロップ処理\r\n   */\r\n  private handleValidDrop(zoneName: string, cardContainer: Phaser.GameObjects.Container): void {\r\n    const zone = this.dropZones.get(zoneName)\r\n    if (!zone) return\r\n    \r\n    // バウンス効果付きでドロップゾーンに移動\r\n    this.tweens.add({\r\n      targets: cardContainer,\r\n      x: zone.x,\r\n      y: zone.y,\r\n      scaleX: GAME_CONSTANTS.DRAG_DROP.DROP_ZONE_SCALE,\r\n      scaleY: GAME_CONSTANTS.DRAG_DROP.DROP_ZONE_SCALE,\r\n      duration: GAME_CONSTANTS.DRAG_DROP.BOUNCE_DURATION / 2,\r\n      ease: 'Back.out',\r\n      onComplete: () => {\r\n        // スケールを元に戻す\r\n        this.tweens.add({\r\n          targets: cardContainer,\r\n          scaleX: 1,\r\n          scaleY: 1,\r\n          duration: GAME_CONSTANTS.DRAG_DROP.BOUNCE_DURATION / 2,\r\n          ease: 'Elastic.out'\r\n        })\r\n      }\r\n    })\r\n    \r\n    // 成功エフェクト\r\n    this.showDropSuccessEffect(zone.x, zone.y)\r\n    \r\n    // ゾーン別の処理\r\n    switch (zoneName) {\r\n      case 'challenge':\r\n        this.handleCardDropToChallenge(cardContainer)\r\n        break\r\n      case 'discard':\r\n        this.handleCardDropToDiscard(cardContainer)\r\n        break\r\n      default:\r\n        console.warn(`Unknown drop zone: ${zoneName}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 無効なドロップ処理\r\n   */\r\n  private handleInvalidDrop(cardContainer: Phaser.GameObjects.Container): void {\r\n    // 振動効果\r\n    const originalX = cardContainer.getData('originalX')\r\n    const originalY = cardContainer.getData('originalY')\r\n    \r\n    // まず振動\r\n    this.tweens.add({\r\n      targets: cardContainer,\r\n      x: cardContainer.x + 10,\r\n      duration: GAME_CONSTANTS.DRAG_DROP.VIBRATION_DURATION / 6,\r\n      ease: 'Power2',\r\n      yoyo: true,\r\n      repeat: 5,\r\n      onComplete: () => {\r\n        // 振動後、元の位置に戻る\r\n        this.tweens.add({\r\n          targets: cardContainer,\r\n          x: originalX,\r\n          y: originalY,\r\n          duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\r\n          ease: 'Back.out'\r\n        })\r\n      }\r\n    })\r\n    \r\n    // 失敗エフェクト\r\n    this.showDropFailureEffect(cardContainer.x, cardContainer.y)\r\n  }\r\n\r\n  /**\r\n   * ドロップ成功エフェクト\r\n   */\r\n  private showDropSuccessEffect(x: number, y: number): void {\r\n    // 成功時のパーティクル効果（緑色の輝き）\r\n    const effect = this.add.graphics()\r\n    effect.setPosition(x, y)\r\n    effect.setDepth(1100)\r\n    \r\n    // 円形の輝きを描画\r\n    effect.fillStyle(GAME_CONSTANTS.COLORS.DROP_ZONE_VALID, 0.8)\r\n    effect.fillCircle(0, 0, 20)\r\n    \r\n    // 拡大しながらフェードアウト\r\n    this.tweens.add({\r\n      targets: effect,\r\n      scaleX: 3,\r\n      scaleY: 3,\r\n      alpha: 0,\r\n      duration: 500,\r\n      ease: 'Power2.out',\r\n      onComplete: () => {\r\n        effect.destroy()\r\n      }\r\n    })\r\n    \r\n    // 複数の小さな輝きを散らす\r\n    for (let i = 0; i < 6; i++) {\r\n      const spark = this.add.graphics()\r\n      spark.setPosition(x, y)\r\n      spark.setDepth(1100)\r\n      spark.fillStyle(GAME_CONSTANTS.COLORS.DROP_ZONE_VALID, 0.6)\r\n      spark.fillCircle(0, 0, 5)\r\n      \r\n      const angle = (i / 6) * Math.PI * 2\r\n      const distance = 50\r\n      \r\n      this.tweens.add({\r\n        targets: spark,\r\n        x: x + Math.cos(angle) * distance,\r\n        y: y + Math.sin(angle) * distance,\r\n        alpha: 0,\r\n        duration: 600,\r\n        ease: 'Power2.out',\r\n        onComplete: () => {\r\n          spark.destroy()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ドロップ失敗エフェクト\r\n   */\r\n  private showDropFailureEffect(x: number, y: number): void {\r\n    // 失敗時のX印エフェクト\r\n    const effect = this.add.graphics()\r\n    effect.setPosition(x, y)\r\n    effect.setDepth(1100)\r\n    \r\n    // X印を描画\r\n    effect.lineStyle(4, GAME_CONSTANTS.COLORS.DROP_ZONE_INVALID, 0.8)\r\n    effect.beginPath()\r\n    effect.moveTo(-15, -15)\r\n    effect.lineTo(15, 15)\r\n    effect.moveTo(15, -15)\r\n    effect.lineTo(-15, 15)\r\n    effect.strokePath()\r\n    \r\n    // 振動しながらフェードアウト\r\n    this.tweens.add({\r\n      targets: effect,\r\n      x: x + 5,\r\n      duration: 100,\r\n      ease: 'Power2',\r\n      yoyo: true,\r\n      repeat: 3,\r\n    })\r\n    \r\n    this.tweens.add({\r\n      targets: effect,\r\n      alpha: 0,\r\n      duration: 800,\r\n      ease: 'Power2.out',\r\n      onComplete: () => {\r\n        effect.destroy()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 捨て札エリアへのドロップ処理\r\n   */\r\n  private handleCardDropToDiscard(cardContainer: Phaser.GameObjects.Container): void {\r\n    const card = cardContainer.getData('card') as Card\r\n    \r\n    // カードを捨て札に移動\r\n    this.gameInstance.discardCard(card.id)\r\n    \r\n    // 手札からカードを削除\r\n    const cardIndex = this.handCards.indexOf(cardContainer)\r\n    if (cardIndex > -1) {\r\n      this.handCards.splice(cardIndex, 1)\r\n      cardContainer.destroy()\r\n    }\r\n    \r\n    // 手札を再配置\r\n    this.arrangeHand()\r\n    \r\n    // UI更新（ダーティフラグを設定）\r\n    this.dirtyFlags.vitality = true\r\n    this.dirtyFlags.insurance = true\r\n    this.dirtyFlags.burden = true\r\n    this.updateUI()\r\n  }\r\n\r\n  /**\r\n   * カードをチャレンジエリアにドロップした時の処理\r\n   */\r\n  private handleCardDropToChallenge(cardContainer: Phaser.GameObjects.Container): void {\r\n    const card = cardContainer.getData('card') as Card\r\n    \r\n    // すでにチャレンジカードがある場合は戻す\r\n    if (this.gameInstance.currentChallenge) {\r\n      this.tweens.add({\r\n        targets: cardContainer,\r\n        x: cardContainer.getData('originalX'),\r\n        y: cardContainer.getData('originalY'),\r\n        duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\r\n        ease: 'Power2'\r\n      })\r\n      return\r\n    }\r\n    \r\n    // チャレンジエリアに配置\r\n    this.tweens.add({\r\n      targets: cardContainer,\r\n      x: this.centerX,\r\n      y: GAME_CONSTANTS.CHALLENGE_Y_POSITION,\r\n      duration: GAME_CONSTANTS.CARD_MOVE_DURATION,\r\n      ease: 'Power2',\r\n      onComplete: () => {\r\n        // 手札から削除\r\n        const index = this.handCards.indexOf(cardContainer)\r\n        if (index !== -1) {\r\n          this.handCards.splice(index, 1)\r\n        }\r\n        \r\n        // チャレンジ開始\r\n        this.gameInstance.startChallenge(card)\r\n        \r\n        // 手札を再配置\r\n        this.arrangeHand()\r\n        \r\n        // チャレンジUI表示\r\n        this.showChallengeUI(card)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チャレンジUIを表示\r\n   */\r\n  private showChallengeUI(challengeCard: Card): void {\r\n    // チャレンジ情報を表示\r\n    const challengeInfo = this.add.container(this.centerX, GAME_CONSTANTS.CHALLENGE_Y_POSITION - 150)\r\n    \r\n    const bg = this.add.rectangle(0, 0, 300, 60, 0x000000, 0.8)\r\n    const text = this.add.text(\r\n      0,\r\n      0,\r\n      `チャレンジ: ${challengeCard.name}\\nパワー: ${challengeCard.power}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff',\r\n        align: 'center'\r\n      }\r\n    ).setOrigin(0.5)\r\n    \r\n    challengeInfo.add([bg, text])\r\n    challengeInfo.setName('challenge-info')\r\n    \r\n    // フェードイン\r\n    challengeInfo.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: challengeInfo,\r\n      alpha: 1,\r\n      duration: 300\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チャレンジカードを表示\r\n   */\r\n  private displayChallengeCard(challengeCard: Card): void {\r\n    const challengeContainer = this.add.container(\r\n      this.centerX,\r\n      GAME_CONSTANTS.CHALLENGE_Y_POSITION\r\n    )\r\n\r\n    // カード背景\r\n    const cardBg = this.add.image(0, 0, this.getCardTemplate('life'))\r\n    cardBg.setTint(0xFFD43B)\r\n\r\n    // カード名\r\n    const cardName = this.add.text(\r\n      0,\r\n      -60,\r\n      challengeCard.name,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#333333',\r\n        fontStyle: 'bold',\r\n        wordWrap: { width: 100 }\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // パワー表示\r\n    const powerText = this.add.text(\r\n      0,\r\n      20,\r\n      `${challengeCard.power}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '36px',\r\n        color: '#FF0000',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 説明文\r\n    const descText = this.add.text(\r\n      0,\r\n      60,\r\n      challengeCard.description,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '12px',\r\n        color: '#666666',\r\n        wordWrap: { width: 100 }\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    challengeContainer.add([cardBg, cardName, powerText, descText])\r\n    challengeContainer.setName('challenge-card')\r\n    challengeContainer.setScale(0)\r\n    \r\n    // アニメーション\r\n    this.tweens.add({\r\n      targets: challengeContainer,\r\n      scale: 1.2,\r\n      duration: 500,\r\n      ease: 'Back.easeOut'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チャレンジUI更新\r\n   */\r\n  private updateChallengeUI(): void {\r\n    // 既存のチャレンジボタンを削除\r\n    const existingButton = this.children.getByName('resolve-challenge-button')\r\n    if (existingButton) {\r\n      existingButton.destroy()\r\n    }\r\n\r\n    // プレイヤーパワー表示\r\n    const powerDisplay = this.add.container(this.gameWidth - 150, 300)\r\n    powerDisplay.setName('power-display')\r\n\r\n    const bg = this.add.rectangle(0, 0, 200, 140, 0x000000, 0.8)\r\n    \r\n    const selectedPower = this.calculateSelectedPower()\r\n    const text = this.add.text(\r\n      0,\r\n      -50,\r\n      `選択パワー: ${selectedPower}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#00FF00'\r\n      }\r\n    )\r\n    text.setOrigin(0.5)\r\n    text.setName('power-text')\r\n\r\n    const subText = this.add.text(\r\n      0,\r\n      -20,\r\n      `選択カード: ${this.selectedCards.size}枚`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    subText.setOrigin(0.5)\r\n    subText.setName('count-text')\r\n\r\n    powerDisplay.add([bg, text, subText])\r\n\r\n    // 初回表示時にパワーの内訳を更新\r\n    this.updatePowerDisplay()\r\n\r\n    // チャレンジ解決ボタン\r\n    const resolveButton = this.createButton(\r\n      this.gameWidth - 150,\r\n      400,\r\n      'チャレンジに挑む',\r\n      () => this.resolveChallenge(),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    resolveButton.setName('resolve-challenge-button')\r\n  }\r\n\r\n  /**\r\n   * 選択したカードの合計パワーを計算\r\n   */\r\n  private calculateSelectedPower(): number {\r\n    let totalPower = 0\r\n    this.handCards.forEach(cardContainer => {\r\n      const card = cardContainer.getData('card') as Card\r\n      if (this.selectedCards.has(card.id)) {\r\n        totalPower += card.power\r\n      }\r\n    })\r\n    return totalPower\r\n  }\r\n\r\n  /**\r\n   * チャレンジを解決\r\n   */\r\n  private resolveChallenge(): void {\r\n    if (!this.gameInstance.currentChallenge) {\r\n      return\r\n    }\r\n\r\n    // 注: カードの選択状態は既にtoggleCardSelectionで管理されているので、\r\n    // ここでは何もする必要がない\r\n\r\n    // チャレンジ解決\r\n    const result = this.gameInstance.resolveChallenge()\r\n    \r\n    // チュートリアル用にゲーム状態を更新\r\n    const gameState = (window as Window & { __gameState?: Record<string, unknown> }).__gameState || {}\r\n    gameState.lastChallengeResult = result\r\n    this.updateGameStateForTutorial()\r\n    \r\n    // 結果に応じたサウンドを再生\r\n    if (result.success) {\r\n      this.soundManager?.play('challengeSuccess')\r\n    } else {\r\n      this.soundManager?.play('challengeFail')\r\n    }\r\n    \r\n    // 結果表示\r\n    this.showChallengeResult(result)\r\n    \r\n    // カード選択フェーズかチェック\r\n    if (result.success && result.cardChoices) {\r\n      // Phase 2: 保険種別選択UIを先に表示\r\n      this.time.delayedCall(2000, () => {\r\n        this.showInsuranceTypeSelection()\r\n      })\r\n    } else {\r\n      // 失敗時または選択肢がない場合は、UIをクリーンアップして通常フローに戻す\r\n      this.time.delayedCall(2000, () => {\r\n        this.cleanupChallengeUI()\r\n        this.updateActionButtons()\r\n      })\r\n    }\r\n    \r\n    // 使用したカードを削除\r\n    this.handCards = this.handCards.filter(cardContainer => {\r\n      const card = cardContainer.getData('card') as Card\r\n      if (this.selectedCards.has(card.id)) {\r\n        cardContainer.destroy()\r\n        return false\r\n      }\r\n      return true\r\n    })\r\n    \r\n    // 選択をクリア\r\n    this.selectedCards.clear()\r\n    \r\n    // チャレンジカードを削除\r\n    const challengeCard = this.children.getByName('challenge-card')\r\n    if (challengeCard) {\r\n      this.tweens.add({\r\n        targets: challengeCard,\r\n        scale: 0,\r\n        duration: 300,\r\n        onComplete: () => challengeCard.destroy()\r\n      })\r\n    }\r\n    \r\n    // 手札の選択状態をクリア\r\n    this.clearHandSelection()\r\n\r\n    // UI更新（ダーティフラグを設定）\r\n    this.dirtyFlags.vitality = true\r\n    this.dirtyFlags.insurance = true\r\n    this.dirtyFlags.burden = true\r\n    this.dirtyFlags.hand = true\r\n    this.dirtyFlags.actionButtons = true\r\n    this.updateUI()\r\n  }\r\n\r\n  /**\r\n   * チャレンジ結果を表示\r\n   */\r\n  private showChallengeResult(result: ChallengeResult): void {\r\n    const resultContainer = this.add.container(this.centerX, this.centerY)\r\n    \r\n    const bg = this.add.rectangle(0, 0, 500, 300, 0x000000, 0.9)\r\n    \r\n    const titleText = this.add.text(\r\n      0,\r\n      -100,\r\n      result.success ? 'チャレンジ成功！' : 'チャレンジ失敗...',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '28px',\r\n        color: result.success ? '#00FF00' : '#FF0000',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n    \r\n    // Phase 3-3: パワー計算の内訳を表示\r\n    let detailContent = `チャレンジパワー: ${result.challengePower}\\n\\n`\r\n    \r\n    if (result.powerBreakdown) {\r\n      detailContent += 'あなたのパワー内訳:\\n'\r\n      if (result.powerBreakdown.base > 0) {\r\n        detailContent += `  基本パワー: +${result.powerBreakdown.base}\\n`\r\n      }\r\n      if (result.powerBreakdown.insurance > 0) {\r\n        detailContent += `  保険ボーナス: +${result.powerBreakdown.insurance}\\n`\r\n      }\r\n      if (result.powerBreakdown.burden < 0) {\r\n        detailContent += `  保険料負担: ${result.powerBreakdown.burden}\\n`\r\n      }\r\n      detailContent += `  合計: ${result.powerBreakdown.total}\\n\\n`\r\n    } else {\r\n      detailContent += `あなたのパワー: ${result.playerPower}\\n\\n`\r\n    }\r\n    \r\n    detailContent += `活力変化: ${result.vitalityChange > 0 ? '+' : ''}${result.vitalityChange}`\r\n    \r\n    const detailText = this.add.text(\r\n      0,\r\n      -20,\r\n      detailContent,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#ffffff',\r\n        align: 'center',\r\n        lineSpacing: 5\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // Phase 3-3: 保険料負担が勝敗に影響した場合の特別メッセージ\r\n    if (!result.success && result.powerBreakdown && result.powerBreakdown.burden < 0) {\r\n      const withoutBurden = result.powerBreakdown.base + result.powerBreakdown.insurance\r\n      if (withoutBurden >= result.challengePower) {\r\n        const burdenImpactText = this.add.text(\r\n          0,\r\n          90,\r\n          '⚠ 保険料負担により敗北しました',\r\n          {\r\n            fontFamily: 'Noto Sans JP',\r\n            fontSize: '14px',\r\n            color: '#ff9999',\r\n            fontStyle: 'bold'\r\n          }\r\n        ).setOrigin(0.5)\r\n        resultContainer.add(burdenImpactText)\r\n      }\r\n    }\r\n    \r\n    const closeButton = this.createButton(\r\n      0,\r\n      120,\r\n      '閉じる',\r\n      () => {\r\n        this.tweens.add({\r\n          targets: resultContainer,\r\n          scale: 0,\r\n          duration: 300,\r\n          onComplete: () => resultContainer.destroy()\r\n        })\r\n      },\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    \r\n    resultContainer.add([bg, titleText, detailText, closeButton])\r\n    resultContainer.setScale(0)\r\n    \r\n    // アニメーション\r\n    this.tweens.add({\r\n      targets: resultContainer,\r\n      scale: 1,\r\n      duration: 500,\r\n      ease: 'Back.easeOut'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ステージ表示テキストを取得\r\n   */\r\n  private getStageDisplayText(): string {\r\n    const currentStage = this.gameInstance.stage\r\n    const stageName = AGE_PARAMETERS[currentStage].label\r\n    \r\n    const turnsInStage = this.getTurnsInCurrentStage()\r\n    const maxTurns = GAME_CONSTANTS.STAGE_TURNS[currentStage]\r\n    \r\n    return `${stageName} (${turnsInStage}/${maxTurns})`\r\n  }\r\n\r\n  /**\r\n   * 現在のステージでのターン数を取得\r\n   */\r\n  private getTurnsInCurrentStage(): number {\r\n    const turn = this.gameInstance.turn\r\n    \r\n    if (this.gameInstance.stage === 'youth') {\r\n      return turn\r\n    } else if (this.gameInstance.stage === 'middle') {\r\n      return turn - GAME_CONSTANTS.STAGE_TURNS.youth\r\n    } else {\r\n      return turn - GAME_CONSTANTS.STAGE_TURNS.youth - GAME_CONSTANTS.STAGE_TURNS.middle\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ステージ進行をチェック\r\n   */\r\n  private checkStageProgress(): void {\r\n    const turn = this.gameInstance.turn\r\n    const stage = this.gameInstance.stage\r\n    \r\n    if (stage === 'youth' && turn >= GAME_CONSTANTS.STAGE_TURNS.youth) {\r\n      const previousMaxVitality = this.gameInstance.maxVitality\r\n      this.gameInstance.advanceStage()\r\n      this.showStageTransition('中年期', previousMaxVitality, this.gameInstance.maxVitality)\r\n      this.updateChallengeDeck()\r\n    } else if (stage === 'middle' && \r\n               turn >= GAME_CONSTANTS.STAGE_TURNS.youth + GAME_CONSTANTS.STAGE_TURNS.middle) {\r\n      const previousMaxVitality = this.gameInstance.maxVitality\r\n      this.gameInstance.advanceStage()\r\n      this.showStageTransition('充実期', previousMaxVitality, this.gameInstance.maxVitality)\r\n      this.updateChallengeDeck()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チャレンジデッキを更新\r\n   */\r\n  private updateChallengeDeck(): void {\r\n    // 古いチャレンジカードをクリア\r\n    this.gameInstance.challengeDeck.clear()\r\n    \r\n    // 新しいステージのチャレンジカードを追加\r\n    const newChallenges = CardFactory.createChallengeCards(this.gameInstance.stage)\r\n    this.gameInstance.challengeDeck.addCards(newChallenges)\r\n    this.gameInstance.challengeDeck.shuffle()\r\n  }\r\n\r\n  /**\r\n   * ステージ遷移演出を表示\r\n   */\r\n  private showStageTransition(stageName: string, previousMaxVitality: number, newMaxVitality: number): void {\r\n    const transitionContainer = this.add.container(this.centerX, this.centerY)\r\n    transitionContainer.setDepth(2000)\r\n    \r\n    const bg = this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x000000, 0.8)\r\n    \r\n    const text = this.add.text(\r\n      0,\r\n      -80,\r\n      `${stageName}へ突入！`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '48px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n    \r\n    // DOM要素としてアニメーションを適用\r\n    const textElement = text.canvas as HTMLCanvasElement\r\n    if (textElement && textElement.parentElement) {\r\n      this.animationManager.animate(textElement.parentElement, 'scaleIn', {\r\n        duration: 600,\r\n        intensity: 'high'\r\n      })\r\n    }\r\n    \r\n    // 体力減少メッセージ\r\n    const vitalityChangeText = this.add.text(\r\n      0,\r\n      -20,\r\n      `体力が衰えました (最大値: ${previousMaxVitality} → ${newMaxVitality})`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ff9999'\r\n      }\r\n    ).setOrigin(0.5)\r\n    \r\n    // Phase 5-1: 保険見直し推奨メッセージ\r\n    const reviewRecommendation = this.getInsuranceReviewRecommendation(stageName)\r\n    const reviewText = this.add.text(\r\n      0,\r\n      40,\r\n      reviewRecommendation,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#00ff00',\r\n        align: 'center'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // Phase 5-1: 保険見直しボタン\r\n    const reviewButton = this.createButton(\r\n      0,\r\n      100,\r\n      '保険を見直す',\r\n      () => {\r\n        this.showInsuranceReviewDialog()\r\n        transitionContainer.destroy()\r\n      },\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    const skipButton = this.createButton(\r\n      0,\r\n      150,\r\n      'あとで見直す',\r\n      () => {\r\n        this.tweens.add({\r\n          targets: transitionContainer,\r\n          alpha: 0,\r\n          duration: 500,\r\n          onComplete: () => transitionContainer.destroy()\r\n        })\r\n      },\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#cccccc'\r\n      }\r\n    )\r\n    \r\n    transitionContainer.add([bg, text, vitalityChangeText, reviewText, reviewButton, skipButton])\r\n    transitionContainer.setAlpha(0)\r\n    \r\n    // フェードインと同時にテキストアニメーション\r\n    this.tweens.add({\r\n      targets: transitionContainer,\r\n      alpha: 1,\r\n      duration: 500\r\n    })\r\n    \r\n    // タイトルテキストにスケールアニメーション\r\n    text.setScale(0)\r\n    this.tweens.add({\r\n      targets: text,\r\n      scale: 1,\r\n      duration: 800,\r\n      delay: 200,\r\n      ease: 'Back.easeOut'\r\n    })\r\n    \r\n    // 活力変化テキストにフェードイン\r\n    vitalityChangeText.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: vitalityChangeText,\r\n      alpha: 1,\r\n      duration: 600,\r\n      delay: 500\r\n    })\r\n    \r\n    // パーティクルエフェクト（星とか光の粒子）\r\n    for (let i = 0; i < 20; i++) {\r\n      const particle = this.add.circle(\r\n        Phaser.Math.Between(-200, 200),\r\n        Phaser.Math.Between(-150, 150),\r\n        Phaser.Math.Between(2, 6),\r\n        0xFFD700,\r\n        0.8\r\n      )\r\n      transitionContainer.add(particle)\r\n      \r\n      // パーティクルのアニメーション\r\n      this.tweens.add({\r\n        targets: particle,\r\n        alpha: 0,\r\n        scale: 1.5,\r\n        duration: 2000,\r\n        delay: Phaser.Math.Between(0, 1000),\r\n        ease: 'Power2'\r\n      })\r\n    }\r\n    \r\n    // ステージ表示を更新\r\n    const stageText = this.children.getByName('stage-text') as Phaser.GameObjects.Text\r\n    if (stageText) {\r\n      stageText.setText(this.getStageDisplayText())\r\n    }\r\n    \r\n    // 人生段階インジケーターを更新\r\n    this.updateLifeStageIndicator()\r\n    \r\n    // 活力バーの最大値変更をアニメーション\r\n    this.animateMaxVitalityChange()\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 保険見直し推奨メッセージを取得\r\n   */\r\n  private getInsuranceReviewRecommendation(stageName: string): string {\r\n    if (stageName === '中年期') {\r\n      return '📌 保険見直しの機会\\n定期保険から終身保険への変更を検討しましょう'\r\n    } else if (stageName === '充実期') {\r\n      return '📌 総合的な保険見直し\\n終身保険の価値が大幅に上昇します！'\r\n    }\r\n    return ''\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 保険見直しダイアログを表示\r\n   */\r\n  private showInsuranceReviewDialog(): void {\r\n    // 保険見直し機能は将来のリリースで実装予定\r\n    this.showNotification('保険見直し機能は開発中です', 'info')\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 期限切れ間近の保険をチェック\r\n   * DISABLED: 保険更新システムが削除されたため無効化\r\n   */\r\n  private checkExpiringInsurances(): void {\r\n    // 保険更新システムが削除されたため、この機能は無効化\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 期限切れ間近の保険警告を表示\r\n   */\r\n  private showExpiringInsuranceWarning(insurance: Card): void {\r\n    const warningContainer = this.add.container(this.centerX, 300)\r\n    warningContainer.setDepth(2000)\r\n\r\n    const bg = this.add.rectangle(0, 0, 400, 120, 0xff4444, 0.95)\r\n    bg.setStrokeStyle(3, 0xffffff)\r\n\r\n    const iconText = this.add.text(\r\n      -170, 0,\r\n      '⚠',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '48px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const messageText = this.add.text(\r\n      20, -20,\r\n      `${insurance.name}が\\nあと${insurance.remainingTurns}ターンで期限切れです！`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const actionText = this.add.text(\r\n      20, 20,\r\n      '更新または終身保険への切り替えを検討しましょう',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#ffcccc'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    warningContainer.add([bg, iconText, messageText, actionText])\r\n    warningContainer.setScale(0)\r\n    warningContainer.setAlpha(0)\r\n\r\n    // 警告アニメーション\r\n    this.tweens.add({\r\n      targets: warningContainer,\r\n      scale: 1.1,\r\n      alpha: 1,\r\n      duration: 300,\r\n      ease: 'Back.easeOut',\r\n      onComplete: () => {\r\n        // パルスエフェクト\r\n        this.tweens.add({\r\n          targets: warningContainer,\r\n          scale: 1,\r\n          duration: 800,\r\n          yoyo: true,\r\n          repeat: 2,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n\r\n        // 自動で消える\r\n        this.time.delayedCall(5000, () => {\r\n          this.tweens.add({\r\n            targets: warningContainer,\r\n            scale: 0.8,\r\n            alpha: 0,\r\n            duration: 500,\r\n            ease: 'Power2',\r\n            onComplete: () => warningContainer.destroy()\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 保険期限切れ警告システム - 改良版\r\n   * getPendingRenewalInsurances()と連携し、残り1-2ターンの保険に対応\r\n   */\r\n  private showInsuranceExpirationWarning(renewal: InsuranceRenewalOption): void {\r\n    const remainingTurns = renewal.remainingTurns\r\n    // renewalOptionから保険情報を取得（cardNameを使用）\r\n    const insuranceName = renewal.cardName\r\n    \r\n    // 警告レベルに応じた色とメッセージを決定\r\n    let warningColor = 0xFFA500  // デフォルト：オレンジ（警告）\r\n    let iconEmoji = '⚠'\r\n    let urgencyText = ''\r\n    \r\n    if (remainingTurns === 1) {\r\n      warningColor = 0xFF4444  // 赤色（危険）\r\n      iconEmoji = '🚨'\r\n      urgencyText = '緊急！'\r\n    } else if (remainingTurns === 2) {\r\n      warningColor = 0xFFA500  // オレンジ色（警告）\r\n      iconEmoji = '⚠'\r\n      urgencyText = '警告：'\r\n    }\r\n\r\n    const warningContainer = this.add.container(this.centerX, 350)\r\n    warningContainer.setDepth(2000)\r\n\r\n    const bg = this.add.rectangle(0, 0, 450, 130, warningColor, 0.95)\r\n    bg.setStrokeStyle(3, 0xffffff)\r\n\r\n    const iconText = this.add.text(\r\n      -190, 0,\r\n      iconEmoji,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '48px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const messageText = this.add.text(\r\n      20, -25,\r\n      `${urgencyText} ${insuranceName}が\\n残り${remainingTurns}ターンで期限切れです`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold',\r\n        align: 'center'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const actionText = this.add.text(\r\n      20, 25,\r\n      '更新手続きまたは終身保険への切り替えをご検討ください',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#ffcccc'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    warningContainer.add([bg, iconText, messageText, actionText])\r\n    warningContainer.setScale(0)\r\n    warningContainer.setAlpha(0)\r\n\r\n    // 警告アニメーション（緊急度に応じた速度）\r\n    const animationDuration = remainingTurns === 1 ? 200 : 300\r\n    this.tweens.add({\r\n      targets: warningContainer,\r\n      scale: 1.1,\r\n      alpha: 1,\r\n      duration: animationDuration,\r\n      ease: 'Back.easeOut',\r\n      onComplete: () => {\r\n        // パルスエフェクト（緊急度に応じた回数）\r\n        const pulseRepeats = remainingTurns === 1 ? 4 : 2\r\n        this.tweens.add({\r\n          targets: warningContainer,\r\n          scale: 1,\r\n          duration: remainingTurns === 1 ? 400 : 600,\r\n          yoyo: true,\r\n          repeat: pulseRepeats,\r\n          ease: 'Sine.easeInOut'\r\n        })\r\n\r\n        // 自動で消える（緊急度に応じた表示時間）\r\n        const displayTime = remainingTurns === 1 ? 7000 : 5000\r\n        this.time.delayedCall(displayTime, () => {\r\n          this.tweens.add({\r\n            targets: warningContainer,\r\n            scale: 0.8,\r\n            alpha: 0,\r\n            duration: 500,\r\n            ease: 'Power2',\r\n            onComplete: () => warningContainer.destroy()\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 最大活力変更時のアニメーション\r\n   */\r\n  private animateMaxVitalityChange(): void {\r\n    if (!this.vitalityBarContainer) return\r\n\r\n    // 最大値マーカーを点滅させる\r\n    const maxMarker = this.vitalityBarContainer.list[2] as Phaser.GameObjects.Rectangle\r\n    if (maxMarker) {\r\n      this.tweens.add({\r\n        targets: maxMarker,\r\n        alpha: 0.3,\r\n        duration: 300,\r\n        yoyo: true,\r\n        repeat: 3,\r\n        ease: 'Power2'\r\n      })\r\n    }\r\n\r\n    // 活力バーコンテナを揺らす\r\n    this.tweens.add({\r\n      targets: this.vitalityBarContainer,\r\n      y: this.vitalityBarContainer.y - 5,\r\n      duration: 100,\r\n      yoyo: true,\r\n      repeat: 2,\r\n      ease: 'Power2'\r\n    })\r\n\r\n    // UI を更新（ダーティフラグを設定）\r\n    this.dirtyFlags.vitality = true\r\n    this.dirtyFlags.insurance = true\r\n    this.dirtyFlags.burden = true\r\n    this.updateUI()\r\n  }\r\n\r\n  /**\r\n   * ゲーム終了をチェック\r\n   */\r\n  private checkGameEnd(): void {\r\n    if (this.gameInstance.isCompleted()) {\r\n      if (this.gameInstance.status === 'victory') {\r\n        this.showGameEnd(true)\r\n      } else if (this.gameInstance.status === 'game_over') {\r\n        this.showGameEnd(false)\r\n      }\r\n    } else if (this.gameInstance.stage === 'fulfillment' && \r\n               this.gameInstance.vitality >= GAME_CONSTANTS.VICTORY_VITALITY) {\r\n      // 充実期で活力が一定以上なら勝利\r\n      this.gameInstance.status = 'victory'\r\n      this.showGameEnd(true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 保険種別選択UIを表示（Phase 2）\r\n   */\r\n  private showInsuranceTypeSelection(): void {\r\n    // 既存の保険種別選択UIがあれば削除\r\n    if (this.insuranceTypeSelectionUI) {\r\n      this.insuranceTypeSelectionUI.destroy()\r\n    }\r\n\r\n    // 保険種別選択コンテナを作成\r\n    this.insuranceTypeSelectionUI = this.add.container(this.centerX, this.centerY)\r\n    this.insuranceTypeSelectionUI.setDepth(2000)\r\n\r\n    // 背景オーバーレイ\r\n    const overlay = this.add.rectangle(\r\n      0, 0,\r\n      this.gameWidth, this.gameHeight,\r\n      0x000000, 0.8\r\n    )\r\n    overlay.setOrigin(0.5)\r\n\r\n    // タイトル\r\n    const titleText = this.add.text(\r\n      0, -200,\r\n      '保険種別を選択してください',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '36px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 年齢に応じた推奨テキスト\r\n    const recommendationText = this.getInsuranceRecommendation()\r\n    const recommendText = this.add.text(\r\n      0, -140,\r\n      recommendationText,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#00ff00'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    this.insuranceTypeSelectionUI.add([overlay, titleText, recommendText])\r\n\r\n    // 終身保険選択ボタン\r\n    this.createInsuranceTypeButton(\r\n      -180, 0,\r\n      '終身保険',\r\n      '一生涯の保障\\n高コスト・高効果',\r\n      0xFFD700, // 金色\r\n      'whole_life'\r\n    )\r\n\r\n    // 定期保険選択ボタン\r\n    this.createInsuranceTypeButton(\r\n      180, 0,\r\n      '定期保険',\r\n      '10ターンの保障\\n低コスト・標準効果',\r\n      0xC0C0C0, // 銀色\r\n      'term'\r\n    )\r\n\r\n    // ボタンのスタガーアニメーション設定\r\n    const buttons = this.insuranceTypeSelectionUI.list.filter(child => \r\n      child instanceof Phaser.GameObjects.Container && child !== overlay\r\n    )\r\n    \r\n    buttons.forEach((button) => {\r\n      if (button instanceof Phaser.GameObjects.Container) {\r\n        button.setScale(0)\r\n        button.setAlpha(0)\r\n      }\r\n    })\r\n\r\n    // フェードイン\r\n    this.insuranceTypeSelectionUI.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: this.insuranceTypeSelectionUI,\r\n      alpha: 1,\r\n      duration: 500,\r\n      ease: 'Power2',\r\n      onComplete: () => {\r\n        // ボタンを順番に表示\r\n        buttons.forEach((button, index) => {\r\n          if (button instanceof Phaser.GameObjects.Container) {\r\n            this.time.delayedCall(index * 200, () => {\r\n              this.tweens.add({\r\n                targets: button,\r\n                scale: 1,\r\n                alpha: 1,\r\n                duration: 500,\r\n                ease: 'Back.easeOut'\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 保険種別選択ボタンを作成\r\n   */\r\n  private createInsuranceTypeButton(\r\n    x: number,\r\n    y: number,\r\n    title: string,\r\n    description: string,\r\n    color: number,\r\n    insuranceType: 'whole_life' | 'term'\r\n  ): void {\r\n    if (!this.insuranceTypeSelectionUI) return\r\n\r\n    const buttonContainer = this.add.container(x, y)\r\n\r\n    // カード風の背景\r\n    const cardBg = this.add.rectangle(0, 0, 300, 400, 0x2C3E50)\r\n    cardBg.setStrokeStyle(4, color)\r\n    cardBg.setInteractive()\r\n    \r\n    // 光彩エフェクト（終身保険のみ）\r\n    if (insuranceType === 'whole_life') {\r\n      const glow = this.add.rectangle(0, 0, 310, 410, color, 0.2)\r\n      glow.setAlpha(0.5)\r\n      buttonContainer.addAt(glow, 0)\r\n      \r\n      // パルスエフェクト\r\n      this.tweens.add({\r\n        targets: glow,\r\n        alpha: 0.2,\r\n        scale: 1.05,\r\n        duration: 2000,\r\n        yoyo: true,\r\n        repeat: -1,\r\n        ease: 'Sine.easeInOut'\r\n      })\r\n    }\r\n\r\n    // タイトル背景\r\n    const titleBg = this.add.rectangle(0, -150, 280, 60, color)\r\n\r\n    // タイトルテキスト\r\n    const titleText = this.add.text(\r\n      0, -150,\r\n      title,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '28px',\r\n        color: '#000000',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 説明テキスト\r\n    const descText = this.add.text(\r\n      0, -50,\r\n      description,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff',\r\n        align: 'center',\r\n        lineSpacing: 10\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 特徴アイコンと説明\r\n    const features = insuranceType === 'whole_life' \r\n      ? ['永続的な保障', 'パワー +2', 'コスト +2']\r\n      : ['期間限定保障', '標準パワー', '標準コスト']\r\n\r\n    features.forEach((feature, index) => {\r\n      const featureText = this.add.text(\r\n        0, 50 + index * 30,\r\n        `• ${feature}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '16px',\r\n          color: '#cccccc'\r\n        }\r\n      ).setOrigin(0.5)\r\n      buttonContainer.add(featureText)\r\n    })\r\n\r\n    // Phase 5-1: 詳細な推奨理由を追加\r\n    const detailBg = this.add.rectangle(0, 280, 280, 80, 0x000000, 0.5)\r\n    detailBg.setStrokeStyle(1, 0x666666)\r\n    \r\n    const detailText = this.add.text(\r\n      0, 280,\r\n      this.getDetailedInsuranceRecommendation(insuranceType),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '12px',\r\n        color: '#aaaaaa',\r\n        align: 'center',\r\n        lineSpacing: 5,\r\n        wordWrap: { width: 260 }\r\n      }\r\n    ).setOrigin(0.5)\r\n    \r\n    buttonContainer.add([detailBg, detailText])\r\n\r\n    // 選択ボタン\r\n    const selectButton = this.createButton(\r\n      0, 160,\r\n      '選択する',\r\n      () => this.onInsuranceTypeSelected(insuranceType),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    // ホバー効果\r\n    cardBg.on('pointerover', () => {\r\n      buttonContainer.setScale(1.05)\r\n      cardBg.setFillStyle(0x34495E)\r\n      this.tweens.add({\r\n        targets: buttonContainer,\r\n        y: y - 10,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n\r\n    cardBg.on('pointerout', () => {\r\n      buttonContainer.setScale(1)\r\n      cardBg.setFillStyle(0x2C3E50)\r\n      this.tweens.add({\r\n        targets: buttonContainer,\r\n        y,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n\r\n    // クリックで選択\r\n    cardBg.on('pointerdown', () => {\r\n      this.onInsuranceTypeSelected(insuranceType)\r\n    })\r\n\r\n    buttonContainer.add([cardBg, titleBg, titleText, descText, selectButton])\r\n    this.insuranceTypeSelectionUI.add(buttonContainer)\r\n  }\r\n\r\n  /**\r\n   * 年齢に応じた保険推奨を取得\r\n   */\r\n  private getInsuranceRecommendation(): string {\r\n    const stage = this.gameInstance.stage\r\n    \r\n    switch (stage) {\r\n      case 'youth':\r\n        return '💡 青年期は定期保険がおすすめ - コストを抑えて活力に投資'\r\n      case 'middle':\r\n        return '💡 中年期は終身保険も検討 - 将来への備えを強化'\r\n      case 'fulfillment':\r\n        return '💡 充実期は終身保険が有利 - 年齢ボーナスで効果最大化'\r\n      default:\r\n        return '保険種別を選んでください'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 年齢に応じた詳細な保険推奨理由を取得\r\n   */\r\n  private getDetailedInsuranceRecommendation(insuranceType: 'whole_life' | 'term'): string {\r\n    const stage = this.gameInstance.stage\r\n    \r\n    if (insuranceType === 'whole_life') {\r\n      switch (stage) {\r\n        case 'youth':\r\n          return '終身保険は高コストですが、結婚や学資など\\n人生の基盤となる保障には適しています。\\n長期的な視点で選択しましょう。'\r\n        case 'middle':\r\n          return '中年期の終身保険は+0.5ボーナス付き。\\n残りの人生を考えると、今が終身保険への\\n切り替えを検討する良いタイミングです。'\r\n        case 'fulfillment':\r\n          return '充実期の終身保険は+1.0ボーナス！\\n年齢による価値上昇を最大限活用できます。\\n安定した老後の基盤作りに最適です。'\r\n        default:\r\n          return '永続的な保障を提供します。'\r\n      }\r\n    } else {\r\n      switch (stage) {\r\n        case 'youth':\r\n          return '定期保険は低コストで効率的な選択です。\\n若い時期は変化も多いため、柔軟に\\n見直せる定期保険が有利です。'\r\n        case 'middle':\r\n          return '定期保険は期限があるため要注意。\\n10ターン後の更新時にはコストが上がります。\\n長期的な保障は終身への切り替えも検討を。'\r\n        case 'fulfillment':\r\n          return '充実期では終身保険のボーナスが大きいため、\\n定期保険の相対的価値は下がります。\\n一時的な保障のみに使用を推奨します。'\r\n        default:\r\n          return '10ターンの期間限定保障です。'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 年齢による難易度調整の表示を取得\r\n   */\r\n  private getAgeAdjustmentDisplay(challengeCard: Card): Phaser.GameObjects.Container | null {\r\n    // challengeCategoryが定義されていない場合は何も表示しない\r\n    if (!challengeCard.challengeCategory) return null\r\n\r\n    const stage = this.gameInstance.stage\r\n    let adjustment = 0\r\n    let color = 0xffffff\r\n    let icon = ''\r\n\r\n    // カテゴリに応じて調整値を計算\r\n    if (challengeCard.challengeCategory === 'physical') {\r\n      // 体力系: 年齢とともに難しくなる\r\n      if (stage === 'middle') {\r\n        adjustment = 3\r\n        color = 0xff9999\r\n        icon = '↑'\r\n      } else if (stage === 'fulfillment') {\r\n        adjustment = 6\r\n        color = 0xff4444\r\n        icon = '↑↑'\r\n      }\r\n    } else if (challengeCard.challengeCategory === 'knowledge') {\r\n      // 知識系: 年齢とともに簡単になる\r\n      if (stage === 'middle') {\r\n        adjustment = -2\r\n        color = 0x99ff99\r\n        icon = '↓'\r\n      } else if (stage === 'fulfillment') {\r\n        adjustment = -4\r\n        color = 0x44ff44\r\n        icon = '↓↓'\r\n      }\r\n    }\r\n\r\n    if (adjustment === 0) return null\r\n\r\n    const container = this.add.container(60, 20)\r\n\r\n    // 背景\r\n    const bg = this.add.rectangle(0, 0, 40, 25, color, 0.3)\r\n    bg.setStrokeStyle(1, color)\r\n\r\n    // アイコンと数値\r\n    const text = this.add.text(\r\n      0, 0,\r\n      `${icon}${Math.abs(adjustment)}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: `#${color.toString(16).padStart(6, '0')}`,\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    container.add([bg, text])\r\n    return container\r\n  }\r\n\r\n  /**\r\n   * Phase 5-1: 難易度ツールチップを追加\r\n   */\r\n  private addDifficultyTooltip(challengeContainer: Phaser.GameObjects.Container, challengeCard: Card): void {\r\n    const cardBg = challengeContainer.list[0] as Phaser.GameObjects.Image\r\n    if (!cardBg) return\r\n\r\n    let tooltipText = ''\r\n    const stage = this.gameInstance.stage\r\n\r\n    if (challengeCard.challengeCategory === 'physical') {\r\n      tooltipText = '体力系チャレンジ\\n'\r\n      if (stage === 'middle') {\r\n        tooltipText += '中年期: 必要パワー+3\\n体力の衰えにより難易度上昇'\r\n      } else if (stage === 'fulfillment') {\r\n        tooltipText += '充実期: 必要パワー+6\\n大幅な体力低下により高難度'\r\n      } else {\r\n        tooltipText += '青年期: 標準難易度\\n体力が充実している時期'\r\n      }\r\n    } else if (challengeCard.challengeCategory === 'knowledge') {\r\n      tooltipText = '知識系チャレンジ\\n'\r\n      if (stage === 'middle') {\r\n        tooltipText += '中年期: 必要パワー-2\\n経験の蓄積により容易化'\r\n      } else if (stage === 'fulfillment') {\r\n        tooltipText += '充実期: 必要パワー-4\\n豊富な知識で大幅に容易化'\r\n      } else {\r\n        tooltipText += '青年期: 標準難易度\\n経験はまだ浅い時期'\r\n      }\r\n    } else if (challengeCard.challengeCategory === 'balanced') {\r\n      tooltipText = '複合系チャレンジ\\n年齢による難易度変化なし\\n体力と知識のバランスが重要'\r\n    }\r\n\r\n    if (!tooltipText) return\r\n\r\n    // ツールチップコンテナ（初期は非表示）\r\n    const tooltipContainer = this.add.container(0, -120)\r\n    tooltipContainer.setVisible(false)\r\n    tooltipContainer.setDepth(1000)\r\n\r\n    const bg = this.add.rectangle(0, 0, 250, 80, 0x000000, 0.9)\r\n    bg.setStrokeStyle(2, 0xffffff)\r\n\r\n    const text = this.add.text(\r\n      0, 0,\r\n      tooltipText,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '12px',\r\n        color: '#ffffff',\r\n        align: 'center',\r\n        lineSpacing: 5\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    tooltipContainer.add([bg, text])\r\n    challengeContainer.add(tooltipContainer)\r\n\r\n    // ホバーでツールチップ表示\r\n    cardBg.setInteractive()\r\n    cardBg.on('pointerover', () => {\r\n      tooltipContainer.setVisible(true)\r\n      this.tweens.add({\r\n        targets: tooltipContainer,\r\n        alpha: 1,\r\n        duration: 200\r\n      })\r\n    })\r\n\r\n    cardBg.on('pointerout', () => {\r\n      this.tweens.add({\r\n        targets: tooltipContainer,\r\n        alpha: 0,\r\n        duration: 200,\r\n        onComplete: () => tooltipContainer.setVisible(false)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 保険種別選択時の処理\r\n   */\r\n  private onInsuranceTypeSelected(insuranceType: 'whole_life' | 'term'): void {\r\n    if (!this.insuranceTypeSelectionUI) return\r\n\r\n    this.selectedInsuranceType = insuranceType\r\n\r\n    // 選択アニメーション\r\n    const selectedTypeText = insuranceType === 'whole_life' ? '終身保険' : '定期保険'\r\n    const confirmText = this.add.text(\r\n      0, 250,\r\n      `${selectedTypeText}を選択しました`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#00ff00',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n    confirmText.setAlpha(0)\r\n    this.insuranceTypeSelectionUI.add(confirmText)\r\n    \r\n    // 選択エフェクト\r\n    this.tweens.add({\r\n      targets: confirmText,\r\n      alpha: 1,\r\n      scale: 1.2,\r\n      duration: 300,\r\n      yoyo: true,\r\n      ease: 'Power2'\r\n    })\r\n\r\n    // 選択後、カード選択画面へ遷移\r\n    this.time.delayedCall(1000, () => {\r\n      this.hideInsuranceTypeSelection(() => {\r\n        // 選択した保険種別に基づいてカードを生成\r\n        const cardChoices = this.generateInsuranceCards(insuranceType)\r\n        this.showCardSelection(cardChoices)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 保険種別選択UIを隠す\r\n   */\r\n  private hideInsuranceTypeSelection(onComplete?: () => void): void {\r\n    if (!this.insuranceTypeSelectionUI) return\r\n\r\n    this.tweens.add({\r\n      targets: this.insuranceTypeSelectionUI,\r\n      alpha: 0,\r\n      scale: 0.8,\r\n      duration: 500,\r\n      ease: 'Power2',\r\n      onComplete: () => {\r\n        this.insuranceTypeSelectionUI?.destroy()\r\n        this.insuranceTypeSelectionUI = undefined\r\n        if (onComplete) onComplete()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 選択した保険種別に基づいてカードを生成\r\n   */\r\n  private generateInsuranceCards(insuranceType: 'whole_life' | 'term'): Card[] {\r\n    // CardFactoryから拡張保険カードを取得\r\n    const allInsuranceCards = CardFactory.createExtendedInsuranceCards(this.gameInstance.stage)\r\n    \r\n    // 選択した保険種別でフィルタリング\r\n    const filteredCards = allInsuranceCards.filter(card => \r\n      card.durationType === insuranceType\r\n    )\r\n    \r\n    // ランダムに3枚選択\r\n    const shuffled = [...filteredCards].sort(() => Math.random() - 0.5)\r\n    return shuffled.slice(0, 3)\r\n  }\r\n\r\n  /**\r\n   * カード選択UIを表示\r\n   */\r\n  private showCardSelection(cardChoices: Card[]): void {\r\n    // 既存のカード選択UIがあれば削除\r\n    if (this.cardSelectionUI) {\r\n      this.cardSelectionUI.destroy()\r\n    }\r\n\r\n    // カード選択コンテナを作成\r\n    this.cardSelectionUI = this.add.container(this.centerX, this.centerY)\r\n    this.cardSelectionUI.setDepth(2000)\r\n\r\n    // 背景オーバーレイ\r\n    const overlay = this.add.rectangle(\r\n      0, 0,\r\n      this.gameWidth, this.gameHeight,\r\n      0x000000, 0.8\r\n    )\r\n    overlay.setOrigin(0.5)\r\n\r\n    // タイトル\r\n    const titleText = this.add.text(\r\n      0, -200,\r\n      '保険カードを選択してください',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '32px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 説明文\r\n    const descText = this.add.text(\r\n      0, -150,\r\n      '1枚選んでデッキに追加されます',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#cccccc'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    this.cardSelectionUI.add([overlay, titleText, descText])\r\n\r\n    // カードを表示\r\n    cardChoices.forEach((card, index) => {\r\n      this.createSelectableCard(card, index)\r\n    })\r\n\r\n    // フェードイン\r\n    this.cardSelectionUI.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: this.cardSelectionUI,\r\n      alpha: 1,\r\n      duration: 500,\r\n      ease: 'Power2'\r\n    })\r\n    \r\n    // アクションボタンを無効化\r\n    this.updateActionButtons()\r\n  }\r\n\r\n  /**\r\n   * 選択可能なカードを作成\r\n   */\r\n  private createSelectableCard(card: Card, index: number): void {\r\n    if (!this.cardSelectionUI) return\r\n\r\n    const cardSpacing = 220\r\n    const totalCards = 3 // 常に3枚のカード\r\n    const startX = -(totalCards - 1) * cardSpacing / 2\r\n    const cardX = startX + index * cardSpacing\r\n\r\n    const cardContainer = this.add.container(cardX, 0)\r\n    cardContainer.setScale(1.2) // 少し大きめに表示\r\n\r\n    // カード背景\r\n    const cardBg = this.add.image(0, 0, this.getCardTemplate(card.type))\r\n    cardBg.setInteractive()\r\n\r\n    // カード名\r\n    const cardName = this.add.text(\r\n      0, -80,\r\n      card.name,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold',\r\n        wordWrap: { width: 120 }\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 説明文\r\n    const cardDesc = this.add.text(\r\n      0, -40,\r\n      card.description,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '12px',\r\n        color: '#cccccc',\r\n        wordWrap: { width: 120 },\r\n        align: 'center'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // パワー表示\r\n    const powerText = this.add.text(\r\n      -40, 50,\r\n      `${card.power}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#333333',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // カバレッジ表示（保険カードの場合）\r\n    let coverageText: Phaser.GameObjects.Text | undefined\r\n    if (card.coverage) {\r\n      coverageText = this.add.text(\r\n        40, 50,\r\n        `保障:${card.coverage}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '14px',\r\n          color: '#0066cc',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n    }\r\n\r\n    // Phase 2: 保険期間の表示\r\n    let durationText: Phaser.GameObjects.Text | undefined\r\n    if (card.durationType) {\r\n      const durationLabel = card.durationType === 'whole_life' ? '終身' : '10ターン'\r\n      durationText = this.add.text(\r\n        0, 80,\r\n        durationLabel,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '16px',\r\n          color: card.durationType === 'whole_life' ? '#FFD700' : '#C0C0C0',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n    }\r\n\r\n    // Phase 2: カード枠線の色を保険種別に応じて変更\r\n    if (card.durationType === 'whole_life') {\r\n      // 終身保険は金色の輝きとパーティクルエフェクト\r\n      const goldGlow = this.add.rectangle(0, 0, GAME_CONSTANTS.CARD_WIDTH + 10, GAME_CONSTANTS.CARD_HEIGHT + 10, 0xFFD700, 0.3)\r\n      goldGlow.setAlpha(0.6)\r\n      cardContainer.addAt(goldGlow, 0)\r\n      \r\n      this.tweens.add({\r\n        targets: goldGlow,\r\n        alpha: 0.2,\r\n        scale: 1.1,\r\n        duration: 1500,\r\n        yoyo: true,\r\n        repeat: -1,\r\n        ease: 'Sine.easeInOut'\r\n      })\r\n    } else if (card.durationType === 'term') {\r\n      // 定期保険は銀色のシンプルな枠\r\n      cardBg.setStrokeStyle(3, 0xC0C0C0)\r\n    }\r\n\r\n    // 選択ボタン\r\n    const selectButton = this.createButton(\r\n      0, 120,\r\n      '選択',\r\n      () => this.onCardSelected(card),\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n\r\n    // ホバー効果\r\n    cardBg.on('pointerover', () => {\r\n      cardContainer.setScale(1.3)\r\n      this.tweens.add({\r\n        targets: cardContainer,\r\n        y: -20,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n\r\n    cardBg.on('pointerout', () => {\r\n      cardContainer.setScale(1.2)\r\n      this.tweens.add({\r\n        targets: cardContainer,\r\n        y: 0,\r\n        duration: 200,\r\n        ease: 'Power2'\r\n      })\r\n    })\r\n\r\n    // クリックで選択\r\n    cardBg.on('pointerdown', () => {\r\n      this.onCardSelected(card)\r\n    })\r\n\r\n    const cardElements = [cardBg, cardName, cardDesc, powerText, selectButton]\r\n    if (coverageText) cardElements.push(coverageText)\r\n    if (durationText) cardElements.push(durationText)\r\n    \r\n    cardContainer.add(cardElements)\r\n    this.cardSelectionUI.add(cardContainer)\r\n  }\r\n\r\n  /**\r\n   * カード選択時の処理\r\n   */\r\n  private onCardSelected(card: Card): void {\r\n    if (!this.cardSelectionUI) return\r\n\r\n    // Phase 5-2: 保険料負担の境界警告\r\n    const activeInsurances = this.gameInstance.getActiveInsurances()\r\n    const currentCount = activeInsurances.length\r\n    const nextCount = currentCount + 1\r\n    \r\n    // 3枚目、6枚目、9枚目の時に警告\r\n    if (nextCount % 3 === 0) {\r\n      this.showInsuranceBurdenWarning(nextCount)\r\n    }\r\n\r\n    // 選択アニメーション\r\n    const selectedContainer = this.cardSelectionUI.list.find(child => {\r\n      return child instanceof Phaser.GameObjects.Container &&\r\n             child.list.some(element => \r\n               element instanceof Phaser.GameObjects.Image && \r\n               element.input?.enabled\r\n             )\r\n    }) as Phaser.GameObjects.Container\r\n\r\n    // 選択されたカードのアニメーション\r\n    if (selectedContainer) {\r\n      this.tweens.add({\r\n        targets: selectedContainer,\r\n        scaleX: 1.1,\r\n        scaleY: 1.1,\r\n        duration: 150,\r\n        yoyo: true,\r\n        ease: 'Power2'\r\n      })\r\n    }\r\n\r\n    // カードをゲームに追加（これにより phase が 'resolution' に変わる）\r\n    this.gameInstance.selectCard(card.id)\r\n    \r\n    // 保険獲得音を再生\r\n    this.soundManager?.play('insuranceGet')\r\n\r\n    // カード獲得アニメーション\r\n    this.showCardAcquisitionAnimation(card, () => {\r\n      // アニメーション完了後にUIを閉じる\r\n      this.hideCardSelection()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Phase 5-2: 保険料負担の境界警告を表示\r\n   */\r\n  private showInsuranceBurdenWarning(insuranceCount: number): void {\r\n    const burdenAmount = Math.floor(insuranceCount / 3)\r\n    const warningContainer = this.add.container(this.centerX, 200)\r\n    warningContainer.setDepth(3500)\r\n\r\n    const bg = this.add.rectangle(0, 0, 450, 150, 0xff4444, 0.95)\r\n    bg.setStrokeStyle(3, 0xffffff)\r\n\r\n    // 警告アイコン\r\n    const iconText = this.add.text(\r\n      -180, 0,\r\n      '🚨',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '48px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 警告メッセージ\r\n    const titleText = this.add.text(\r\n      20, -30,\r\n      '保険料負担が発生します！',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const detailText = this.add.text(\r\n      20, 10,\r\n      `保険${insuranceCount}枚目で負担が${burdenAmount}ポイントに増加します`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#ffcccc'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const adviceText = this.add.text(\r\n      20, 40,\r\n      '本当に必要な保険か、もう一度考えましょう',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    warningContainer.add([bg, iconText, titleText, detailText, adviceText])\r\n    warningContainer.setScale(0)\r\n    warningContainer.setAlpha(0)\r\n\r\n    // 警告アニメーション\r\n    this.tweens.add({\r\n      targets: warningContainer,\r\n      scale: 1.2,\r\n      alpha: 1,\r\n      duration: 300,\r\n      ease: 'Back.easeOut',\r\n      onComplete: () => {\r\n        // 揺れアニメーション\r\n        this.tweens.add({\r\n          targets: warningContainer,\r\n          angle: -5,\r\n          duration: 100,\r\n          yoyo: true,\r\n          repeat: 3,\r\n          ease: 'Sine.easeInOut',\r\n          onComplete: () => {\r\n            // フェードアウト\r\n            this.time.delayedCall(3000, () => {\r\n              this.tweens.add({\r\n                targets: warningContainer,\r\n                scale: 0.8,\r\n                alpha: 0,\r\n                duration: 500,\r\n                ease: 'Power2',\r\n                onComplete: () => warningContainer.destroy()\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n\r\n    // 画面全体を一瞬赤くフラッシュ\r\n    const flashOverlay = this.add.rectangle(\r\n      this.centerX,\r\n      this.centerY,\r\n      this.gameWidth,\r\n      this.gameHeight,\r\n      0xff0000,\r\n      0.3\r\n    )\r\n    flashOverlay.setDepth(3000)\r\n    \r\n    this.tweens.add({\r\n      targets: flashOverlay,\r\n      alpha: 0,\r\n      duration: 200,\r\n      onComplete: () => flashOverlay.destroy()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * カード獲得アニメーション\r\n   */\r\n  private showCardAcquisitionAnimation(card: Card, onComplete: () => void): void {\r\n    // 選択されたカードを強調表示\r\n    const highlightContainer = this.add.container(this.centerX, this.centerY)\r\n    highlightContainer.setDepth(3000)\r\n\r\n    const cardBg = this.add.image(0, 0, this.getCardTemplate(card.type))\r\n    cardBg.setScale(2) // 大きく表示\r\n\r\n    const cardName = this.add.text(\r\n      0, -100,\r\n      card.name,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '24px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    const acquiredText = this.add.text(\r\n      0, 120,\r\n      'デッキに追加されました！',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#00ff00',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    highlightContainer.add([cardBg, cardName, acquiredText])\r\n\r\n    // パルス効果\r\n    this.tweens.add({\r\n      targets: highlightContainer,\r\n      scale: 1.1,\r\n      duration: 300,\r\n      yoyo: true,\r\n      repeat: 1,\r\n      ease: 'Power2',\r\n      onComplete: () => {\r\n        // フェードアウト\r\n        this.tweens.add({\r\n          targets: highlightContainer,\r\n          alpha: 0,\r\n          scale: 0.5,\r\n          duration: 800,\r\n          ease: 'Power2',\r\n          onComplete: () => {\r\n            highlightContainer.destroy()\r\n            onComplete()\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * カード選択UIを隠す\r\n   */\r\n  private hideCardSelection(): void {\r\n    if (!this.cardSelectionUI) return\r\n\r\n    this.tweens.add({\r\n      targets: this.cardSelectionUI,\r\n      alpha: 0,\r\n      scale: 0.8,\r\n      duration: 500,\r\n      ease: 'Power2',\r\n      onComplete: () => {\r\n        this.cardSelectionUI?.destroy()\r\n        this.cardSelectionUI = undefined\r\n        \r\n        // チャレンジUIをクリーンアップ\r\n        this.cleanupChallengeUI()\r\n        \r\n        // 通常のゲームフローに戻る（ダーティフラグを設定）\r\n        this.dirtyFlags.vitality = true\r\n        this.dirtyFlags.actionButtons = true\r\n        this.updateUI()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * ゲーム状態をチュートリアル用に公開\r\n   */\r\n  private updateGameStateForTutorial(): void {\r\n    // ゲーム状態をグローバルとSceneデータの両方に設定\r\n    const gameState = {\r\n      hand: this.gameInstance.hand,\r\n      selectedCards: [...this.gameInstance.selectedCards], // 配列のコピーを作成\r\n      phase: this.gameInstance.phase,\r\n      turn: this.gameInstance.turn,\r\n      vitality: this.gameInstance.vitality,\r\n      maxVitality: this.gameInstance.maxVitality,\r\n      insuranceCards: this.gameInstance.insuranceCards,\r\n      config: this.gameInstance.config,\r\n      lastChallengeResult: null as ChallengeResult | null\r\n    };\r\n    \r\n    (window as Window & { __gameState?: typeof gameState }).__gameState = gameState;\r\n    this.data.set('gameState', gameState);\r\n  }\r\n\r\n  /**\r\n   * アクションボタンの有効/無効を更新\r\n   */\r\n  private updateActionButtons(): void {\r\n    const actionButtons = this.children.getByName('action-buttons') as Phaser.GameObjects.Container\r\n    if (!actionButtons) return\r\n\r\n    const drawButton = actionButtons.getByName('draw-button') as Phaser.GameObjects.Container\r\n    const challengeButton = actionButtons.getByName('challenge-button') as Phaser.GameObjects.Container\r\n    const endTurnButton = actionButtons.getByName('end-turn-button') as Phaser.GameObjects.Container\r\n\r\n    const phase = this.gameInstance.phase\r\n    const isInProgress = this.gameInstance.isInProgress()\r\n\r\n    // フェーズに応じてボタンの有効/無効を切り替え\r\n    if (drawButton) {\r\n      this.setButtonEnabled(drawButton, isInProgress && phase === 'draw')\r\n    }\r\n\r\n    if (challengeButton) {\r\n      this.setButtonEnabled(challengeButton, isInProgress && phase === 'draw' && !this.gameInstance.currentChallenge)\r\n    }\r\n\r\n    if (endTurnButton) {\r\n      // ドローフェーズまたは解決フェーズでターン終了を可能に\r\n      this.setButtonEnabled(endTurnButton, isInProgress && (phase === 'draw' || phase === 'resolution'))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * コンテナベースのボタンを作成\r\n   */\r\n  private createContainerButton(\r\n    x: number,\r\n    y: number,\r\n    text: string,\r\n    onClick: () => void,\r\n    style?: Phaser.Types.GameObjects.Text.TextStyle\r\n  ): Phaser.GameObjects.Container {\r\n    const container = this.add.container(x, y)\r\n    \r\n    // ボタン背景\r\n    const bg = this.add.rectangle(0, 0, 150, 40, 0x3498DB)\r\n    bg.setInteractive({ useHandCursor: true })\r\n    \r\n    // ボタンテキスト\r\n    const textObj = this.add.text(0, 0, text, style || {\r\n      fontFamily: 'Noto Sans JP',\r\n      fontSize: '18px',\r\n      color: '#ffffff'\r\n    })\r\n    textObj.setOrigin(0.5)\r\n    \r\n    container.add([bg, textObj])\r\n    \r\n    // クリックイベント\r\n    bg.on('pointerdown', () => {\r\n      // ボタンクリック音を再生\r\n      this.soundManager?.play('buttonClick')\r\n      onClick()\r\n    })\r\n    \r\n    // ホバー効果\r\n    bg.on('pointerover', () => {\r\n      bg.setFillStyle(0x2980B9)\r\n      container.setScale(1.05)\r\n      // ボタンホバー音を再生\r\n      this.soundManager?.play('buttonHover')\r\n    })\r\n    \r\n    bg.on('pointerout', () => {\r\n      bg.setFillStyle(0x3498DB)\r\n      container.setScale(1)\r\n    })\r\n    \r\n    return container\r\n  }\r\n\r\n  /**\r\n   * ボタンの有効/無効を切り替え\r\n   */\r\n  private setButtonEnabled(button: Phaser.GameObjects.Container, enabled: boolean): void {\r\n    if (!button?.list || button.list.length < 2) {\r\n      console.warn('Invalid button structure')\r\n      return\r\n    }\r\n\r\n    const buttonBg = button.list[0] as Phaser.GameObjects.Rectangle\r\n    const buttonText = button.list[1] as Phaser.GameObjects.Text\r\n\r\n    if (!buttonBg || !buttonText) {\r\n      console.warn('Button components not found')\r\n      return\r\n    }\r\n\r\n    if (enabled) {\r\n      buttonBg.setFillStyle(0x3498DB)\r\n      buttonText.setColor('#ffffff')\r\n      buttonBg.setInteractive()\r\n    } else {\r\n      buttonBg.setFillStyle(0x95A5A6)\r\n      buttonText.setColor('#cccccc')\r\n      buttonBg.disableInteractive()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チャレンジUI要素をクリーンアップ\r\n   */\r\n  private cleanupChallengeUI(): void {\r\n    // パワー表示を削除\r\n    const powerDisplay = this.children.getByName('power-display')\r\n    if (powerDisplay) {\r\n      powerDisplay.destroy()\r\n    }\r\n\r\n    // チャレンジ解決ボタンを削除\r\n    const resolveButton = this.children.getByName('resolve-challenge-button')\r\n    if (resolveButton) {\r\n      resolveButton.destroy()\r\n    }\r\n\r\n    // チャレンジ情報を削除\r\n    const challengeInfo = this.children.getByName('challenge-info')\r\n    if (challengeInfo) {\r\n      challengeInfo.destroy()\r\n    }\r\n    \r\n    // 手札の選択状態をクリア\r\n    this.clearHandSelection()\r\n  }\r\n\r\n  /**\r\n   * 手札の選択状態をクリア\r\n   */\r\n  private clearHandSelection(): void {\r\n    this.handCards.forEach(cardContainer => {\r\n      // 選択状態をクリア\r\n      if (cardContainer.getData('selected')) {\r\n        cardContainer.setData('selected', false)\r\n        cardContainer.setScale(1)\r\n        \r\n        // ハイライト削除\r\n        const highlight = cardContainer.getByName('highlight')\r\n        if (highlight) {\r\n          highlight.destroy()\r\n        }\r\n      }\r\n    })\r\n    \r\n    // 選択カードセットをクリア\r\n    this.selectedCards.clear()\r\n  }\r\n\r\n  /**\r\n   * ゲーム終了画面を表示\r\n   */\r\n  private showGameEnd(isVictory: boolean): void {\r\n    // 統一アニメーションマネージャーで演出を再生\r\n    const gameCanvas = document.getElementById('game-container') as HTMLElement\r\n    if (gameCanvas) {\r\n      if (isVictory) {\r\n        this.animationManager.playVictoryAnimation(gameCanvas)\r\n      } else {\r\n        this.animationManager.playDefeatAnimation(gameCanvas)\r\n      }\r\n    }\r\n    \r\n    // 既存のゲーム終了画面も表示（アニメーション後に）\r\n    this.time.delayedCall(1000, () => {\r\n      const endContainer = this.add.container(this.centerX, this.centerY)\r\n      \r\n      const bg = this.add.rectangle(0, 0, this.gameWidth, this.gameHeight, 0x000000, 0.9)\r\n      \r\n      const titleText = this.add.text(\r\n        0,\r\n        -100,\r\n        isVictory ? '人生充実！' : 'ゲームオーバー',\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '48px',\r\n          color: isVictory ? '#FFD43B' : '#FF6B6B',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      const stats = this.gameInstance.stats\r\n      const statsText = this.add.text(\r\n        0,\r\n        0,\r\n        `最終活力: ${this.gameInstance.vitality}\\n` +\r\n        `総ターン数: ${stats.turnsPlayed}\\n` +\r\n        `チャレンジ成功数: ${stats.successfulChallenges}/${stats.totalChallenges}\\n` +\r\n        `最高活力: ${stats.highestVitality}`,\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '20px',\r\n          color: '#ffffff',\r\n          align: 'center',\r\n          lineSpacing: 10\r\n        }\r\n      ).setOrigin(0.5)\r\n      \r\n      const retryButton = this.createButton(\r\n        -100,\r\n        100,\r\n        'もう一度',\r\n        () => {\r\n          this.scene.restart()\r\n        },\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '20px',\r\n          color: '#ffffff'\r\n        }\r\n      )\r\n      \r\n      const menuButton = this.createButton(\r\n        100,\r\n        100,\r\n      'メニューへ',\r\n      () => {\r\n        this.scene.start('MainMenuScene')\r\n      },\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: '#ffffff'\r\n      }\r\n    )\r\n    \r\n    endContainer.add([bg, titleText, statsText, retryButton, menuButton])\r\n    endContainer.setDepth(1000)\r\n    endContainer.setAlpha(0)\r\n    \r\n      // フェードイン\r\n      this.tweens.add({\r\n        targets: endContainer,\r\n        alpha: 1,\r\n        duration: 1000\r\n      })\r\n    }) // delayedCall の閉じ括弧\r\n  }\r\n\r\n  /**\r\n   * Phase 3-3: 通知を表示\r\n   */\r\n  private showNotification(message: string, type: 'info' | 'warning' | 'success' = 'info'): void {\r\n    const notificationContainer = this.add.container(this.centerX, 200)\r\n    notificationContainer.setDepth(2500)\r\n\r\n    const colors = {\r\n      info: 0x3498db,\r\n      warning: 0xf39c12,\r\n      success: 0x2ecc71\r\n    }\r\n\r\n    const bg = this.add.rectangle(0, 0, 400, 60, colors[type], 0.9)\r\n    bg.setStrokeStyle(2, 0xffffff)\r\n\r\n    const text = this.add.text(\r\n      0, 0,\r\n      message,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    notificationContainer.add([bg, text])\r\n    notificationContainer.setScale(0)\r\n    notificationContainer.setAlpha(0)\r\n\r\n    // アニメーション\r\n    this.tweens.add({\r\n      targets: notificationContainer,\r\n      scale: 1,\r\n      alpha: 1,\r\n      duration: 300,\r\n      ease: 'Back.easeOut',\r\n      onComplete: () => {\r\n        // 3秒後にフェードアウト\r\n        this.time.delayedCall(3000, () => {\r\n          this.tweens.add({\r\n            targets: notificationContainer,\r\n            scale: 0.8,\r\n            alpha: 0,\r\n            duration: 300,\r\n            ease: 'Power2',\r\n            onComplete: () => notificationContainer.destroy()\r\n          })\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 保険更新選択ダイアログを表示\r\n   * DISABLED: 保険更新システムが削除されたため無効化\r\n   */\r\n  private showInsuranceRenewalDialog(renewalOption: unknown): void {\r\n    // 保険更新システムが削除されたため、この機能は無効化\r\n    console.warn('showInsuranceRenewalDialog: 保険更新システムが削除されました')\r\n    return;\r\n\r\n    // 保険更新選択コンテナを作成\r\n    this.insuranceRenewalDialogUI = this.add.container(this.centerX, this.centerY)\r\n    this.insuranceRenewalDialogUI.setDepth(2100)\r\n\r\n    // 背景オーバーレイ\r\n    const overlay = this.add.rectangle(\r\n      0, 0,\r\n      this.gameWidth, this.gameHeight,\r\n      0x000000, 0.8\r\n    )\r\n    overlay.setOrigin(0.5)\r\n\r\n    // カード情報の背景\r\n    const cardInfoBg = this.add.rectangle(0, -50, 600, 400, 0x2C3E50)\r\n    cardInfoBg.setStrokeStyle(4, 0xFFD700)\r\n\r\n    // タイトル\r\n    const titleText = this.add.text(\r\n      0, -220,\r\n      '保険更新の選択',\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '36px',\r\n        color: '#ffffff',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 保険名表示\r\n    const insuranceNameText = this.add.text(\r\n      0, -170,\r\n      renewalOption.cardName,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '28px',\r\n        color: '#FFD700',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // コスト情報表示\r\n    const currentVitality = this.gameInstance.vitality\r\n    const canAffordRenewal = currentVitality >= renewalOption.renewalCost\r\n    const costColor = canAffordRenewal ? '#00ff00' : '#ff4444'\r\n\r\n    const costInfoText = this.add.text(\r\n      0, -120,\r\n      `現在コスト: ${renewalOption.currentCost} → 更新コスト: ${renewalOption.renewalCost} (+${renewalOption.costIncrease})`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: costColor,\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 活力状況表示\r\n    const vitalityStatusText = this.add.text(\r\n      0, -80,\r\n      `現在の活力: ${currentVitality}`,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '18px',\r\n        color: '#ffffff'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 年齢による増加理由\r\n    const ageReason = this.getAgeIncreaseReason()\r\n    const ageReasonText = this.add.text(\r\n      0, -50,\r\n      ageReason,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '16px',\r\n        color: '#cccccc'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // 活力不足警告（必要に応じて表示）\r\n    let insufficientVitalityWarning: Phaser.GameObjects.Text | null = null\r\n    if (!canAffordRenewal) {\r\n      insufficientVitalityWarning = this.add.text(\r\n        0, -10,\r\n        '⚠ 活力不足で更新できません',\r\n        {\r\n          fontFamily: 'Noto Sans JP',\r\n          fontSize: '18px',\r\n          color: '#ff4444',\r\n          fontStyle: 'bold'\r\n        }\r\n      ).setOrigin(0.5)\r\n    }\r\n\r\n    this.insuranceRenewalDialogUI.add([\r\n      overlay, \r\n      cardInfoBg, \r\n      titleText, \r\n      insuranceNameText, \r\n      costInfoText, \r\n      vitalityStatusText, \r\n      ageReasonText\r\n    ])\r\n\r\n    if (insufficientVitalityWarning) {\r\n      this.insuranceRenewalDialogUI.add(insufficientVitalityWarning)\r\n    }\r\n\r\n    // 更新ボタン（活力不足でも表示するが、効果的には失効する）\r\n    this.createRenewalButton(\r\n      -150, 80,\r\n      '更新する',\r\n      `コスト: ${renewalOption.renewalCost}`,\r\n      canAffordRenewal ? 0x4CAF50 : 0x9E9E9E, // グリーンまたはグレー\r\n      () => this.onRenewalSelected(renewalOption, true),\r\n      canAffordRenewal\r\n    )\r\n\r\n    // 失効ボタン\r\n    this.createRenewalButton(\r\n      150, 80,\r\n      '失効させる',\r\n      'リスクを受け入れる',\r\n      0xF44336, // レッド\r\n      () => this.onRenewalSelected(renewalOption, false),\r\n      true\r\n    )\r\n\r\n    // フェードイン\r\n    this.insuranceRenewalDialogUI.setAlpha(0)\r\n    this.tweens.add({\r\n      targets: this.insuranceRenewalDialogUI,\r\n      alpha: 1,\r\n      duration: 500,\r\n      ease: 'Power2'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 更新選択ボタンを作成\r\n   */\r\n  private createRenewalButton(\r\n    x: number,\r\n    y: number,\r\n    title: string,\r\n    subtitle: string,\r\n    color: number,\r\n    callback: () => void,\r\n    enabled: boolean\r\n  ): void {\r\n    if (!this.insuranceRenewalDialogUI) return\r\n\r\n    const buttonContainer = this.add.container(x, y)\r\n    \r\n    // ボタン背景\r\n    const buttonBg = this.add.rectangle(0, 0, 250, 100, color)\r\n    buttonBg.setStrokeStyle(3, enabled ? 0xffffff : 0x666666)\r\n    \r\n    if (enabled) {\r\n      buttonBg.setInteractive()\r\n    }\r\n    \r\n    // タイトルテキスト\r\n    const titleText = this.add.text(\r\n      0, -15,\r\n      title,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '20px',\r\n        color: enabled ? '#ffffff' : '#666666',\r\n        fontStyle: 'bold'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    // サブタイトルテキスト\r\n    const subtitleText = this.add.text(\r\n      0, 15,\r\n      subtitle,\r\n      {\r\n        fontFamily: 'Noto Sans JP',\r\n        fontSize: '14px',\r\n        color: enabled ? '#ffffff' : '#666666'\r\n      }\r\n    ).setOrigin(0.5)\r\n\r\n    if (enabled) {\r\n      // ホバー効果\r\n      buttonBg.on('pointerover', () => {\r\n        buttonContainer.setScale(1.05)\r\n        buttonBg.setFillStyle(Phaser.Display.Color.ValueToColor(color).brighten(20).color)\r\n      })\r\n\r\n      buttonBg.on('pointerout', () => {\r\n        buttonContainer.setScale(1)\r\n        buttonBg.setFillStyle(color)\r\n      })\r\n\r\n      // クリック処理\r\n      buttonBg.on('pointerdown', () => {\r\n        // 即座にUI応答\r\n        buttonContainer.setScale(0.95)\r\n        \r\n        this.time.delayedCall(100, () => {\r\n          buttonContainer.setScale(1)\r\n          callback()\r\n        })\r\n      })\r\n    }\r\n\r\n    buttonContainer.add([buttonBg, titleText, subtitleText])\r\n    this.insuranceRenewalDialogUI.add(buttonContainer)\r\n  }\r\n\r\n  /**\r\n   * 更新選択時の処理\r\n   */\r\n  private onRenewalSelected(renewalOption: InsuranceRenewalOption, shouldRenew: boolean): void {\r\n    // UIを閉じる\r\n    if (this.insuranceRenewalDialogUI) {\r\n      this.tweens.add({\r\n        targets: this.insuranceRenewalDialogUI,\r\n        alpha: 0,\r\n        scale: 0.8,\r\n        duration: 300,\r\n        ease: 'Power2',\r\n        onComplete: () => {\r\n          this.insuranceRenewalDialogUI?.destroy()\r\n          this.insuranceRenewalDialogUI = undefined\r\n        }\r\n      })\r\n    }\r\n\r\n    try {\r\n      let result\r\n      if (shouldRenew) {\r\n        result = this.gameInstance.renewInsurance(renewalOption.cardId)\r\n      } else {\r\n        result = this.gameInstance.expireInsurance(renewalOption.cardId)\r\n      }\r\n\r\n      // 結果メッセージを表示\r\n      const messageType = result.action === 'renewed' ? 'success' : 'warning'\r\n      this.showNotification(result.message, messageType)\r\n\r\n      // UIを更新\r\n      this.time.delayedCall(500, () => {\r\n        this.updateInsuranceDisplay()\r\n        this.updateVitalityDisplay()\r\n        \r\n        // 他に期限切れの保険があるかチェック\r\n        this.checkForAdditionalRenewals()\r\n      })\r\n\r\n    } catch (error) {\r\n      console.error('Insurance renewal error:', error)\r\n      this.showNotification('保険処理でエラーが発生しました', 'error')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 年齢による増加理由を取得\r\n   */\r\n  private getAgeIncreaseReason(): string {\r\n    const stage = this.gameInstance.stage\r\n    \r\n    switch (stage) {\r\n      case 'youth':\r\n        return '青年期のため基本コストで更新可能'\r\n      case 'middle':\r\n        return '中年期のため更新コストが増加 (+2)'\r\n      case 'fulfillment':\r\n        return '充実期のため更新コストが大幅増加 (+4)'\r\n      default:\r\n        return '年齢に応じてコストが調整されます'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 追加の期限切れ保険をチェック\r\n   * DISABLED: 保険更新システムが削除されたため無効化\r\n   */\r\n  private checkForAdditionalRenewals(): void {\r\n    // 保険更新システムが削除されたため、この機能は無効化\r\n    return\r\n  }\r\n\r\n  // ===================\r\n  // チュートリアル関連\r\n  // ===================\r\n\r\n  /**\r\n   * チュートリアルの初期化\r\n   */\r\n  private initializeTutorial(): void {\r\n    try {\r\n      // TutorialManagerの初期化\r\n      this.tutorialManager = new TutorialManager(this, {\r\n        debugMode: false,\r\n        autoSaveProgress: true,\r\n        stepChangeDelay: 500,\r\n        defaultHighlightOptions: {\r\n          color: '#FFD700',\r\n          opacity: 0.4,\r\n          borderWidth: 3,\r\n          borderColor: '#FFA500',\r\n          glowEffect: true,\r\n          animationType: 'pulse',\r\n          duration: 1200\r\n        }\r\n      })\r\n\r\n      // TutorialOverlayの初期化\r\n      this.tutorialOverlay = new TutorialOverlay(this)\r\n      this.tutorialOverlay.setVisible(false)\r\n\r\n      // チュートリアルステップで参照される要素を登録\r\n      this.registerTutorialElements()\r\n\r\n      // イベントリスナー設定\r\n      this.setupTutorialEventListeners()\r\n\r\n      // 開発環境でのテストヘルパー設定\r\n      if (process.env.NODE_ENV === 'development') {\r\n        this.time.delayedCall(1000, () => {\r\n          setupGlobalTutorialTests(this)\r\n        })\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Tutorial initialization failed:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアル要素の登録\r\n   */\r\n  private registerTutorialElements(): void {\r\n    // 手札エリア\r\n    if (this.handCards.length > 0) {\r\n      this.tutorialStepElements.set('hand-area', this.handCards[0].parentContainer || this.handCards[0])\r\n    }\r\n\r\n    // バイタリティバー\r\n    if (this.vitalityBarContainer) {\r\n      this.tutorialStepElements.set('vitality-bar', this.vitalityBarContainer)\r\n    }\r\n\r\n    // 保険リスト\r\n    if (this.insuranceListContainer) {\r\n      this.tutorialStepElements.set('insurance-list', this.insuranceListContainer)\r\n    }\r\n\r\n    // 負担指標\r\n    if (this.burdenIndicatorContainer) {\r\n      this.tutorialStepElements.set('burden-indicator', this.burdenIndicatorContainer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルイベントリスナーの設定\r\n   */\r\n  private setupTutorialEventListeners(): void {\r\n    if (!this.tutorialManager) return\r\n\r\n    this.tutorialManager.on('tutorial:started', (data) => {\r\n      this.isTutorialMode = true\r\n      this.tutorialOverlay?.setVisible(true)\r\n      if (import.meta.env.DEV) console.log('Tutorial started:', data.tutorialId)\r\n    })\r\n\r\n    this.tutorialManager.on('tutorial:step:enter', (data) => {\r\n      this.handleTutorialStepEnter(data)\r\n    })\r\n\r\n    this.tutorialManager.on('tutorial:step:exit', () => {\r\n      this.tutorialOverlay?.clearHighlights()\r\n    })\r\n\r\n    this.tutorialManager.on('tutorial:completed', () => {\r\n      this.endTutorialMode()\r\n    })\r\n\r\n    this.tutorialManager.on('tutorial:skipped', () => {\r\n      this.endTutorialMode()\r\n    })\r\n\r\n    this.tutorialManager.on('tutorial:error', (data) => {\r\n      console.error('Tutorial error:', data.error)\r\n      this.endTutorialMode()\r\n    })\r\n\r\n    // 画面リサイズ対応\r\n    this.scale.on('resize', () => {\r\n      this.tutorialOverlay?.onResize()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * チュートリアルステップ開始時の処理\r\n   */\r\n  private handleTutorialStepEnter(_data: unknown): void {\r\n    if (!this.tutorialOverlay || !this.tutorialManager) return\r\n\r\n    const currentStep = this.tutorialManager.getCurrentStep()\r\n    if (!currentStep) return\r\n\r\n    const progress = this.tutorialManager.getProgress()\r\n    if (!progress) return\r\n\r\n    // 進捗バーの更新\r\n    const totalSteps = this.tutorialManager.getCurrentStep() ? \r\n      (this.tutorialManager as unknown as { currentConfig?: { steps: { length: number } } }).currentConfig?.steps.length || 0 : 0\r\n    this.tutorialOverlay.createProgressBar(progress, totalSteps)\r\n\r\n    // ターゲット要素の処理\r\n    let targetBounds: Phaser.Geom.Rectangle | undefined\r\n    if (currentStep.targetElement) {\r\n      const targetElement = this.tutorialStepElements.get(currentStep.targetElement) ||\r\n                          this.children.getByName(currentStep.targetElement)\r\n      \r\n      if (targetElement?.getBounds) {\r\n        targetBounds = targetElement.getBounds()\r\n        \r\n        // スポットライト効果\r\n        this.tutorialOverlay.createSpotlight(targetElement)\r\n        \r\n        // ハイライト効果\r\n        this.tutorialOverlay.highlightElement(\r\n          currentStep.targetElement, \r\n          currentStep.highlightOptions\r\n        )\r\n      }\r\n    }\r\n\r\n    // 吹き出し表示\r\n    this.tutorialOverlay.createSpeechBubble(currentStep, targetBounds)\r\n\r\n    // 制御ボタン\r\n    const canGoBack = progress.currentStepIndex > 0\r\n    const canSkip = true // 基本的にはスキップ可能\r\n\r\n    this.tutorialOverlay.createControlButtons(\r\n      canGoBack,\r\n      canSkip,\r\n      () => this.tutorialManager?.nextStep(),\r\n      canGoBack ? () => this.tutorialManager?.previousStep() : undefined,\r\n      () => this.tutorialManager?.skipTutorial()\r\n    )\r\n\r\n    // キーボード操作の有効化\r\n    this.tutorialOverlay.enableKeyboardControls(\r\n      () => this.tutorialManager?.nextStep(),\r\n      canGoBack ? () => this.tutorialManager?.previousStep() : undefined,\r\n      () => this.tutorialManager?.skipTutorial()\r\n    )\r\n\r\n    // アクション待機の場合の自動進行設定\r\n    if (currentStep.action === 'wait' && currentStep.waitTime) {\r\n      this.time.delayedCall(currentStep.waitTime, () => {\r\n        this.tutorialManager?.nextStep()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * チュートリアルモード終了\r\n   */\r\n  private endTutorialMode(): void {\r\n    this.isTutorialMode = false\r\n    \r\n    if (this.tutorialOverlay) {\r\n      this.tutorialOverlay.setVisible(false)\r\n      this.tutorialOverlay.clearHighlights()\r\n    }\r\n\r\n    // 通常のUI制限を解除\r\n    this.enableAllGameUI()\r\n    \r\n    if (import.meta.env.DEV) console.log('Tutorial mode ended')\r\n  }\r\n\r\n  /**\r\n   * チュートリアル自動開始（メニューから呼び出された場合）\r\n   */\r\n  private autoStartTutorial(): void {\r\n    if (import.meta.env.DEV) console.log('Auto-starting tutorial from menu')\r\n    \r\n    // インタラクティブチュートリアルを開始\r\n    this.startTutorial(INTERACTIVE_GAME_TUTORIAL)\r\n      .then(() => {\r\n        if (import.meta.env.DEV) console.log('Tutorial started successfully')\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to start tutorial:', error)\r\n      })\r\n  }\r\n\r\n  /**\r\n   * チュートリアル開始（外部から呼び出し用）\r\n   */\r\n  public startTutorial(config: TutorialConfig): Promise<void> {\r\n    if (!this.tutorialManager) {\r\n      return Promise.reject(new Error('Tutorial manager not initialized'))\r\n    }\r\n\r\n    // 既存のチュートリアルが完了済みかチェック\r\n    if (this.tutorialManager.isCompleted(config.id)) {\r\n      if (import.meta.env.DEV) console.log('Tutorial already completed:', config.id)\r\n      return Promise.resolve()\r\n    }\r\n\r\n    // チュートリアルモード制限を適用\r\n    this.applyTutorialModeRestrictions()\r\n\r\n    return this.tutorialManager.startTutorial(config)\r\n  }\r\n\r\n  /**\r\n   * チュートリアル中のUI制限適用\r\n   */\r\n  private applyTutorialModeRestrictions(): void {\r\n    // ドラッグ&ドロップを一時無効化\r\n    this.isDragInProgress = false\r\n    \r\n    // 通常のボタンを無効化（チュートリアルで指示されたもの以外）\r\n    this.disableNonTutorialUI()\r\n  }\r\n\r\n  /**\r\n   * 非チュートリアルUIの無効化\r\n   */\r\n  private disableNonTutorialUI(): void {\r\n    // 実装：チュートリアル中は特定のUI要素のみアクティブに\r\n    // 詳細な実装は既存のUI要素の構造に依存\r\n  }\r\n\r\n  /**\r\n   * 全ゲームUIの有効化\r\n   */\r\n  private enableAllGameUI(): void {\r\n    // 実装：すべてのUI要素を再度有効化\r\n    // ドラッグ&ドロップやボタンの制限を解除\r\n  }\r\n\r\n  /**\r\n   * チュートリアル要素の動的登録\r\n   */\r\n  public registerTutorialElement(name: string, element: Phaser.GameObjects.GameObject): void {\r\n    this.tutorialStepElements.set(name, element)\r\n  }\r\n\r\n  /**\r\n   * チュートリアル状態の確認\r\n   */\r\n  public isTutorialActive(): boolean {\r\n    return this.isTutorialMode\r\n  }\r\n\r\n  /**\r\n   * 現在のチュートリアルステップ取得\r\n   */\r\n  public getCurrentTutorialStep(): TutorialStep | null {\r\n    return this.tutorialManager?.getCurrentStep() || null\r\n  }\r\n\r\n  /**\r\n   * チュートリアル強制終了\r\n   */\r\n  public stopTutorial(): void {\r\n    if (this.tutorialManager) {\r\n      this.tutorialManager.skipTutorial()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * シーンのクリーンアップ処理\r\n   */\r\n  public destroy(): void {\r\n    // 新しいドロップゾーンシステムのクリーンアップ\r\n    if (this.dropZoneIntegration) {\r\n      this.dropZoneIntegration.destroy()\r\n      this.dropZoneIntegration = undefined\r\n    }\r\n    \r\n    // キーボードコントローラーのクリーンアップ\r\n    if (this.keyboardController) {\r\n      this.keyboardController.destroy()\r\n      this.keyboardController = undefined\r\n    }\r\n\r\n    // イベントリスナーの削除\r\n    this.data.events.off('cardSelected')\r\n\r\n    // 親クラスのクリーンアップを呼び出し\r\n    super.destroy()\r\n  }\r\n\r\n  // === GameRenderer Interface Support Methods ===\r\n\r\n  /**\r\n   * ゲーム状態を更新\r\n   */\r\n  updateGameState(game: Game): void {\r\n    this.gameInstance = game\r\n    this.updateVitalityDisplay(game.vitality, game.getMaxVitality())\r\n    this.updateProgressDisplay(game.stage, game.turn)\r\n  }\r\n\r\n  /**\r\n   * 手札カードを表示\r\n   */\r\n  displayHandCards(cards: Card[]): void {\r\n    this.clearHandDisplay()\r\n    cards.forEach((card, index) => {\r\n      this.createHandCard(card, index)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 現在のチャレンジを表示\r\n   */\r\n  displayCurrentChallenge(challenge: Card): void {\r\n    this.updateChallengeDisplay(challenge)\r\n  }\r\n\r\n  /**\r\n   * 保険表示を更新\r\n   */\r\n  updateInsuranceDisplay(insurances: Card[]): void {\r\n    this.updateInsuranceList(insurances)\r\n  }\r\n\r\n  /**\r\n   * 保険料負担表示を更新\r\n   */\r\n  updateInsuranceBurdenDisplay(burden: number): void {\r\n    this.updateBurdenIndicator(burden)\r\n  }\r\n\r\n  /**\r\n   * 進捗表示を更新\r\n   */\r\n  updateProgressDisplay(stage: string, turn: number): void {\r\n    if (this.stageText) {\r\n      this.stageText.setText(`${stage} - ターン ${turn}`)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * カード選択UIを表示\r\n   */\r\n  showCardSelectionUI(\r\n    cards: Card[],\r\n    minSelection: number,\r\n    maxSelection: number,\r\n    message: string,\r\n    callback: (selectedCards: Card[]) => void\r\n  ): void {\r\n    this.createCardSelectionInterface(cards, minSelection, maxSelection, message, callback)\r\n  }\r\n\r\n  /**\r\n   * チャレンジアクションUIを表示\r\n   */\r\n  showChallengeActionUI(\r\n    challenge: Card,\r\n    callback: (action: 'start' | 'skip') => void\r\n  ): void {\r\n    this.createChallengeActionInterface(challenge, callback)\r\n  }\r\n\r\n  /**\r\n   * 保険選択UIを表示\r\n   */\r\n  showInsuranceSelectionUI(\r\n    cards: Card[],\r\n    message: string,\r\n    callback: (selectedInsurance: Card) => void\r\n  ): void {\r\n    this.createInsuranceSelectionInterface(cards, message, callback)\r\n  }\r\n\r\n  /**\r\n   * 確認UIを表示\r\n   */\r\n  showConfirmationUI(\r\n    message: string,\r\n    defaultChoice: 'yes' | 'no',\r\n    callback: (choice: 'yes' | 'no') => void\r\n  ): void {\r\n    this.createConfirmationDialog(message, defaultChoice, callback)\r\n  }\r\n\r\n  /**\r\n   * チャレンジ結果を表示\r\n   */\r\n  displayChallengeResult(result: ChallengeResult): void {\r\n    this.showChallengeResultScreen(result)\r\n  }\r\n\r\n  /**\r\n   * メッセージを表示\r\n   */\r\n  showMessage(message: string, level: 'info' | 'success' | 'warning' = 'info'): void {\r\n    const color = level === 'success' ? '#4CAF50' : level === 'warning' ? '#FF9800' : '#2196F3'\r\n    this.createTemporaryMessage(message, color)\r\n  }\r\n\r\n  /**\r\n   * エラーメッセージを表示\r\n   */\r\n  showError(error: string): void {\r\n    this.createTemporaryMessage(error, '#F44336')\r\n  }\r\n\r\n  /**\r\n   * ゲームオーバー画面を表示\r\n   */\r\n  showGameOverScreen(stats: PlayerStats): void {\r\n    this.createGameOverScreen(stats)\r\n  }\r\n\r\n  /**\r\n   * 勝利画面を表示\r\n   */\r\n  showVictoryScreen(stats: PlayerStats): void {\r\n    this.createVictoryScreen(stats)\r\n  }\r\n\r\n  /**\r\n   * ステージクリア画面を表示\r\n   */\r\n  showStageClearScreen(stage: string, stats: PlayerStats): void {\r\n    this.createStageClearScreen(stage, stats)\r\n  }\r\n\r\n  /**\r\n   * 画面をクリア\r\n   */\r\n  clearDisplay(): void {\r\n    this.clearAllUI()\r\n  }\r\n\r\n  // === Helper Methods for UI Creation ===\r\n\r\n  private createCardSelectionInterface(\r\n    cards: Card[],\r\n    minSelection: number,\r\n    maxSelection: number,\r\n    message: string,\r\n    callback: (selectedCards: Card[]) => void\r\n  ): void {\r\n    // カード選択インターフェースの実装（簡略化版）\r\n    callback(cards.slice(0, Math.min(maxSelection, cards.length)))\r\n  }\r\n\r\n  private createChallengeActionInterface(\r\n    challenge: Card,\r\n    callback: (action: 'start' | 'skip') => void\r\n  ): void {\r\n    // チャレンジアクション選択の実装（簡略化版：自動でstartを選択）\r\n    callback('start')\r\n  }\r\n\r\n  private createInsuranceSelectionInterface(\r\n    cards: Card[],\r\n    message: string,\r\n    callback: (selectedInsurance: Card) => void\r\n  ): void {\r\n    // 保険選択インターフェースの実装（簡略化版：最初のカードを選択）\r\n    if (cards.length > 0) {\r\n      callback(cards[0])\r\n    }\r\n  }\r\n\r\n  private createConfirmationDialog(\r\n    message: string,\r\n    defaultChoice: 'yes' | 'no',\r\n    callback: (choice: 'yes' | 'no') => void\r\n  ): void {\r\n    // 確認ダイアログの実装（簡略化版：デフォルト選択を返す）\r\n    callback(defaultChoice)\r\n  }\r\n\r\n  private showChallengeResultScreen(result: ChallengeResult): void {\r\n    // チャレンジ結果画面の実装\r\n    console.log('Challenge result:', result)\r\n  }\r\n\r\n  private createTemporaryMessage(message: string, color: string): void {\r\n    // 一時的なメッセージ表示\r\n    const messageText = this.add.text(\r\n      this.cameras.main.centerX,\r\n      this.cameras.main.centerY - 100,\r\n      message,\r\n      {\r\n        fontSize: '24px',\r\n        color,\r\n        stroke: '#000000',\r\n        strokeThickness: 2\r\n      }\r\n    )\r\n    messageText.setOrigin(0.5)\r\n    messageText.setDepth(1000)\r\n\r\n    // 3秒後に削除\r\n    this.time.delayedCall(3000, () => {\r\n      messageText.destroy()\r\n    })\r\n  }\r\n\r\n  private createGameOverScreen(stats: PlayerStats): void {\r\n    // ゲームオーバー画面の実装\r\n    console.log('Game Over:', stats)\r\n  }\r\n\r\n  private createVictoryScreen(stats: PlayerStats): void {\r\n    // 勝利画面の実装\r\n    console.log('Victory:', stats)\r\n  }\r\n\r\n  private createStageClearScreen(stage: string, stats: PlayerStats): void {\r\n    // ステージクリア画面の実装\r\n    console.log('Stage Clear:', stage, stats)\r\n  }\r\n\r\n  private clearAllUI(): void {\r\n    // すべてのUI要素をクリア\r\n    this.clearHandDisplay()\r\n    this.clearSelectionUI()\r\n  }\r\n\r\n  private clearHandDisplay(): void {\r\n    // キーボード操作から登録解除\r\n    if (this.keyboardController) {\r\n      this.handCards.forEach((cardContainer) => {\r\n        this.keyboardController!.unregisterFocusableElement(cardContainer)\r\n      })\r\n    }\r\n    \r\n    // 手札表示をクリア\r\n    this.handCards.forEach(card => card.destroy())\r\n    this.handCards = []\r\n  }\r\n\r\n  private clearSelectionUI(): void {\r\n    // 選択UI要素をクリア\r\n    if (this.cardSelectionUI) {\r\n      this.cardSelectionUI.destroy()\r\n      this.cardSelectionUI = undefined\r\n    }\r\n    if (this.insuranceTypeSelectionUI) {\r\n      this.insuranceTypeSelectionUI.destroy()\r\n      this.insuranceTypeSelectionUI = undefined\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * サウンドマネージャーを初期化\r\n   */\r\n  private initializeSoundManager(): void {\r\n    this.soundManager = new SoundManager(this)\r\n    \r\n    // サウンドの有効/無効切り替えキー（M キー）\r\n    this.input.keyboard?.on('keydown-M', () => {\r\n      if (this.soundManager) {\r\n        const enabled = !this.soundManager.isEnabled()\r\n        this.soundManager.setEnabled(enabled)\r\n        this.soundManager.saveSettings()\r\n        this.showMessage(enabled ? 'サウンド ON' : 'サウンド OFF', 'info')\r\n      }\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * パフォーマンス管理を初期化\r\n   */\r\n  private initializePerformanceManager(): void {\r\n    const isMobile = this.registry.get('isMobile')\r\n    \r\n    if (isMobile) {\r\n      // モバイルデバイスでのみパフォーマンス管理を有効化\r\n      this.performanceManager = new MobilePerformanceManager(this, {\r\n        minFPS: 30,\r\n        maxMemoryUsage: 75,\r\n        maxRenderTime: 33.33, // 30fps target for mobile\r\n        maxDrawCalls: 80\r\n      })\r\n      \r\n      // パフォーマンスレベル変更のリスナー\r\n      this.events.on('optimizationLevelChanged', (level: 'low' | 'medium' | 'high') => {\r\n        this.handleOptimizationLevelChange(level)\r\n      })\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * 最適化レベル変更時の処理\r\n   */\r\n  private handleOptimizationLevelChange(level: 'low' | 'medium' | 'high'): void {\r\n    switch (level) {\r\n      case 'low':\r\n        // 低品質設定\r\n        this.frameSkipThreshold = 3\r\n        this.tweens.timeScale = 0.8 // アニメーション速度を下げる\r\n        break\r\n      case 'medium':\r\n        // 中品質設定\r\n        this.frameSkipThreshold = 2\r\n        this.tweens.timeScale = 1.0\r\n        break\r\n      case 'high':\r\n        // 高品質設定\r\n        this.frameSkipThreshold = 1\r\n        this.tweens.timeScale = 1.0\r\n        break\r\n    }\r\n    \r\n    // 最適化レベルの変更を通知\r\n    if (import.meta.env.DEV) {\r\n      console.log(`Performance optimization level changed to: ${level}`)\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * ボタンを作成（サウンド付き）\r\n   */\r\n  protected createButton(\r\n    x: number,\r\n    y: number,\r\n    text: string,\r\n    onClick: () => void,\r\n    style?: Phaser.Types.GameObjects.Text.TextStyle\r\n  ): Phaser.GameObjects.Text {\r\n    const button = super.createButton(x, y, text, onClick, style)\r\n    \r\n    // サウンド付きのイベントハンドラを追加\r\n    button.removeAllListeners()\r\n    \r\n    button.on('pointerover', () => {\r\n      button.setBackgroundColor('#364FC7')\r\n      button.setScale(1.05)\r\n      this.soundManager?.play('buttonHover')\r\n    })\r\n\r\n    button.on('pointerout', () => {\r\n      button.setBackgroundColor('#4C6EF5')\r\n      button.setScale(1)\r\n    })\r\n\r\n    button.on('pointerdown', () => {\r\n      button.setScale(0.95)\r\n      this.soundManager?.play('buttonClick')\r\n    })\r\n\r\n    button.on('pointerup', () => {\r\n      button.setScale(1.05)\r\n      onClick()\r\n    })\r\n    \r\n    return button\r\n  }\r\n\r\n  /**\r\n   * 毎フレーム実行される更新処理（パフォーマンス最適化）\r\n   */\r\n  override update(time: number, delta: number): void {\r\n    // スロットル付きUI更新\r\n    GameSceneOptimizationMixin.throttledUIUpdate.call(this, delta)\r\n    \r\n    // 定期的なメモリクリーンアップ（10秒ごと）\r\n    if (time % 10000 < delta) {\r\n      GameSceneOptimizationMixin.cleanupUnusedResources.call(this)\r\n    }\r\n    \r\n    // バッチ処理の描画呼び出し最小化（5秒ごと）\r\n    if (time % 5000 < delta) {\r\n      GameSceneOptimizationMixin.minimizeDrawCalls.call(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 最適化されたエフェクト表示\r\n   */\r\n  private showOptimizedDropEffect(x: number, y: number, success: boolean): void {\r\n    GameSceneOptimizationMixin.createOptimizedEffect.call(\r\n      this, \r\n      x, \r\n      y, \r\n      success ? 'success' : 'failure'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 最適化された手札配置\r\n   */\r\n  private arrangeHandOptimized(): void {\r\n    GameSceneOptimizationMixin.batchUpdateHandCards.call(this)\r\n  }\r\n\r\n  /**\r\n   * シーンのクリーンアップ処理\r\n   */\r\n  private cleanup(): void {\r\n    // すべてのイベントリスナーを削除\r\n    this.eventCleanupManager.removeAll()\r\n    \r\n    // Tweenをすべて停止\r\n    this.tweens.killAll()\r\n    \r\n    // タイマーをすべて削除\r\n    this.time.removeAllEvents()\r\n    \r\n    // サウンドを停止\r\n    if (this.soundManager) {\r\n      this.soundManager.stopAll()\r\n    }\r\n    \r\n    // パフォーマンス管理の破棄\r\n    if (this.performanceManager) {\r\n      this.performanceManager.destroy()\r\n    }\r\n    \r\n    // ドロップゾーンの破棄\r\n    if (this.dropZoneIntegration) {\r\n      this.dropZoneIntegration.destroy()\r\n    }\r\n    \r\n    // キーボードコントローラーの破棄\r\n    if (this.keyboardController) {\r\n      this.keyboardController.destroy()\r\n    }\r\n    \r\n    // チュートリアルマネージャーの破棄\r\n    if (this.tutorialManager) {\r\n      this.tutorialManager.destroy()\r\n    }\r\n    \r\n    // UIコンテナの破棄\r\n    const containers = [\r\n      this.cardSelectionUI,\r\n      this.insuranceTypeSelectionUI,\r\n      this.vitalityBarContainer,\r\n      this.insuranceListContainer,\r\n      this.burdenIndicatorContainer,\r\n      this.insuranceRenewalDialogUI,\r\n      this.tutorialOverlay\r\n    ]\r\n    \r\n    containers.forEach(container => {\r\n      if (container) {\r\n        container.destroy()\r\n      }\r\n    })\r\n    \r\n    // 手札カードの破棄\r\n    this.handCards.forEach(card => {\r\n      card.destroy()\r\n    })\r\n    this.handCards = []\r\n    \r\n    // オブジェクトプールのクリア\r\n    if (this.objectPools) {\r\n      Object.values(this.objectPools).forEach(pool => {\r\n        pool.forEach((obj: any) => {\r\n          if (obj?.destroy) {\r\n            obj.destroy()\r\n          }\r\n        })\r\n      })\r\n    }\r\n    \r\n    // デバッグ出力\r\n    if (import.meta.env.DEV) {\r\n      console.log('GameScene cleanup completed')\r\n      this.eventCleanupManager.debugPrint()\r\n    }\r\n  }\r\n}"],"names":["BaseScene","Scene","__publicField","time","delta","duration","callback","size","x","y","text","onClick","style","button","container","bg","buttonText","card","cardWidth","GAME_CONSTANTS","cardHeight","cardBg","isInsuranceCard","gradient","gloss","pattern","i","typeIcon","iconBgColor","iconBg","icon","cardName","description","powerBg","powerColor","powerText","insuranceType","typeBg","typeText","glow","PreloadScene","progressBar","progressBox","loadingText","percentText","value","graphics","j","key","color","buttonGraphics","highlightGraphics","MainMenuScene","overlay","creditContainer","creditText","closeButton","GameSceneOptimizationMixin","deltaTime","type","pool","object","effect","updates","cardContainer","index","targetX","targetY","u","tween","progress","update","target","child","textureKeys","usedTextures","_a","textureGroups","depth","group","GameScene","EventCleanupManager","getUnifiedAnimationManager","data","Game","starterCards","CardFactory","challengeCards","stageText","stageLabel","vitalityText","turnText","label","burden","burdenText","title","indicatorContainer","stages","stageLabels","stageColors","currentStageIndex","stage","isActive","isCurrent","dot","maxVitalityForStage","maxVitalityLabel","line","barBg","vitalityPercentage","barWidth","maxMarker","percentage","deckArea","deckBack","deckCount","discardArea","discardPlaceholder","discardLabel","challengeArea","challengePlaceholder","challengeLabel","DropZoneIntegration","draggedCard","highlight","zoneName","isValid","alpha","radius","buttonContainer","drawButton","challengeButton","endTurnButton","KeyboardController","phase","actionButtons","count","cardColor","glassBg","hitArea","costBg","costText","ageBonusIndicator","currentBonus","bonusBg","bonusText","effectivePower","multiplier","basePowerText","cardElements","pointer","dragStartTime","dragX","dragY","offsetY","dropZone","_b","totalWidth","startX","challengeCard","originalX","originalY","glowEffect","transitionOverlay","item","activeInsurances","noInsuranceText","insurance","yPos","cardItem","isExpiringSoon","isExpiringSoonTwoTurns","isExpiringSoonOneTurn","bgColor","strokeColor","itemBg","animationDuration","badgeColor","textColor","typeBadge","nameText","bonus","turnsTextColor","turnsText","warningIconColor","warningIcon","divider","warningText","previousBurden","currentTime","oldVitality","newVitality","targetWidth","newColor","counter","currentPercentage","currentColor","powerDisplay","selectedCardsArray","powerBreakdown","countText","yOffset","baseText","insuranceText","challengeX","challengeY","zone","spark","angle","distance","cardIndex","challengeInfo","challengeContainer","descText","existingButton","selectedPower","subText","totalPower","result","gameState","resultContainer","titleText","detailContent","detailText","burdenImpactText","currentStage","stageName","AGE_PARAMETERS","turnsInStage","maxTurns","turn","previousMaxVitality","newChallenges","newMaxVitality","transitionContainer","textElement","vitalityChangeText","reviewRecommendation","reviewText","reviewButton","skipButton","particle","warningContainer","iconText","messageText","actionText","renewal","remainingTurns","insuranceName","warningColor","iconEmoji","urgencyText","pulseRepeats","displayTime","recommendationText","recommendText","buttons","titleBg","feature","featureText","detailBg","selectButton","adjustment","tooltipText","tooltipContainer","selectedTypeText","confirmText","cardChoices","onComplete","cardSpacing","cardX","cardDesc","coverageText","durationText","durationLabel","goldGlow","nextCount","selectedContainer","element","insuranceCount","burdenAmount","adviceText","flashOverlay","highlightContainer","acquiredText","isInProgress","textObj","enabled","buttonBg","resolveButton","isVictory","gameCanvas","endContainer","stats","statsText","retryButton","menuButton","message","notificationContainer","colors","renewalOption","subtitle","subtitleText","shouldRenew","messageType","error","TutorialManager","TutorialOverlay","_data","currentStep","totalSteps","targetBounds","targetElement","canGoBack","INTERACTIVE_GAME_TUTORIAL","config","name","game","cards","challenge","insurances","minSelection","maxSelection","defaultChoice","level","SoundManager","MobilePerformanceManager","success","obj"],"mappings":"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"}