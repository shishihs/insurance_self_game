var v=Object.defineProperty;var y=Object.getOwnPropertySymbols;var I=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var p=(o,e,t)=>e in o?v(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,g=(o,e)=>{for(var t in e||(e={}))I.call(e,t)&&p(o,t,e[t]);if(y)for(var t of y(e))x.call(e,t)&&p(o,t,e[t]);return o};var a=(o,e,t)=>p(o,typeof e!="symbol"?e+"":e,t);class d{constructor(e){a(this,"id");a(this,"name");a(this,"description");a(this,"type");a(this,"power");a(this,"cost");a(this,"effects");a(this,"imageUrl");a(this,"category");a(this,"insuranceType");a(this,"coverage");a(this,"penalty");a(this,"ageBonus");a(this,"durationType");a(this,"remainingTurns");a(this,"dreamCategory");this.id=e.id,this.name=e.name,this.description=e.description,this.type=e.type,this.power=e.power,this.cost=e.cost,this.effects=e.effects,this.imageUrl=e.imageUrl,this.category=e.category,this.insuranceType=e.insuranceType,this.coverage=e.coverage,this.penalty=e.penalty,"ageBonus"in e&&(this.ageBonus=e.ageBonus),"durationType"in e&&(this.durationType=e.durationType),"remainingTurns"in e&&(this.remainingTurns=e.remainingTurns),"dreamCategory"in e&&(this.dreamCategory=e.dreamCategory)}calculateEffectivePower(e=0){const t=e+(this.ageBonus||0);return Math.max(0,this.power+t)}hasEffect(e){return this.effects.some(t=>t.type===e)}isLifeCard(){return this.type==="life"}isInsuranceCard(){return this.type==="insurance"}isPitfallCard(){return this.type==="pitfall"}isDreamCard(){return this.dreamCategory!==void 0}isTermInsurance(){return this.isInsuranceCard()&&this.durationType==="term"}isWholeLifeInsurance(){return this.isInsuranceCard()&&this.durationType==="whole_life"}isExpired(){return this.isTermInsurance()?this.remainingTurns!==void 0&&this.remainingTurns<=0:!1}decrementTurn(){this.isTermInsurance()&&this.remainingTurns!==void 0&&this.remainingTurns>0&&this.remainingTurns--}getRemainingTurnsDisplay(){return!this.isTermInsurance()||this.remainingTurns===void 0?"終身":this.remainingTurns<=0?"期限切れ":`残り${this.remainingTurns}ターン`}clone(){const e={id:this.id,name:this.name,description:this.description,type:this.type,power:this.power,cost:this.cost,effects:[...this.effects],imageUrl:this.imageUrl,category:this.category,insuranceType:this.insuranceType,coverage:this.coverage,penalty:this.penalty,ageBonus:this.ageBonus||0,durationType:this.durationType,remainingTurns:this.remainingTurns,dreamCategory:this.dreamCategory};return new d(e)}applyInsuranceEffect(e){if(!this.isInsuranceCard()||!this.coverage)return e;const t=this.effects.find(s=>s.type==="shield");if(t&&t.value){const s=Math.min(e,t.value);return Math.max(0,e-s)}return e}toDisplayString(){let e=`${this.name} (Power: ${this.power}, Cost: ${this.cost})`;return this.coverage&&(e+=`, Coverage: ${this.coverage}`),this.ageBonus&&(e+=`, Age Bonus: +${this.ageBonus}`),this.isInsuranceCard()&&(e+=`, 期間: ${this.getRemainingTurnsDisplay()}`),this.effects.length>0&&(e+=`
Effects:`,this.effects.forEach(t=>{e+=`
  - ${t.description}`})),e}}class l{constructor(e,t=[]){a(this,"cards");a(this,"name");this.name=e,this.cards=[...t]}getName(){return this.name}size(){return this.cards.length}isEmpty(){return this.cards.length===0}addCard(e){this.cards.push(e)}addCards(e){this.cards.push(...e)}drawCard(){return this.cards.pop()||null}drawCards(e){const t=[];for(let s=0;s<e&&!this.isEmpty();s++){const r=this.drawCard();r&&t.push(r)}return t}removeCard(e){const t=this.cards.findIndex(s=>s.id===e);return t!==-1?(this.cards.splice(t,1),!0):!1}shuffle(){for(let e=this.cards.length-1;e>0;e--){const t=Math.floor(Math.random()*(e+1));[this.cards[e],this.cards[t]]=[this.cards[t],this.cards[e]]}}getCards(){return[...this.cards]}countCardsByType(e){return this.cards.filter(t=>t.type===e).length}clear(){this.cards=[]}clone(){return new l(this.name,this.cards.map(e=>e.clone()))}getStats(){const e={total:this.cards.length,byType:{life:0,insurance:0,pitfall:0},averagePower:0,averageCost:0};let t=0,s=0;return this.cards.forEach(r=>{e.byType[r.type]++,t+=r.power,s+=r.cost}),e.averagePower=e.total>0?t/e.total:0,e.averageCost=e.total>0?s/e.total:0,e}}class h{static generateId(){return`card_${Date.now()}_${this.cardIdCounter++}`}static createStarterLifeCards(){const e=[];return e.push(this.createLifeCard({name:"朝のジョギング",description:"健康的な一日の始まり",category:"health",power:2,cost:1})),e.push(this.createLifeCard({name:"栄養バランスの良い食事",description:"体調管理の基本",category:"health",power:3,cost:2})),e.push(this.createLifeCard({name:"新しいスキルの習得",description:"成長への投資",category:"career",power:3,cost:2})),e.push(this.createLifeCard({name:"チームワーク",description:"仲間との協力",category:"career",power:2,cost:1})),e.push(this.createLifeCard({name:"家族との団らん",description:"心の充電",category:"family",power:2,cost:1})),e.push(this.createLifeCard({name:"趣味の時間",description:"リフレッシュタイム",category:"hobby",power:2,cost:1})),e.push(this.createLifeCard({name:"計画的な貯蓄",description:"将来への備え",category:"finance",power:3,cost:2})),e}static createBasicInsuranceCards(e="youth"){const t=[],s=e==="middle"?.5:e==="fulfillment"?1:0;return t.push(this.createInsuranceCard({name:"医療保険",description:"病気やケガに備える永続保障",insuranceType:"medical",power:4,cost:3,coverage:100,ageBonus:s})),t.push(this.createInsuranceCard({name:"生命保険",description:"家族を守る永続保障",insuranceType:"life",power:5,cost:4,coverage:200,ageBonus:s})),t.push(this.createInsuranceCard({name:"収入保障保険",description:"働けなくなった時の永続保障",insuranceType:"income",power:4,cost:3,coverage:150,ageBonus:s})),t}static createExtendedInsuranceCards(e="youth"){const t=[],s=e==="middle"?.5:e==="fulfillment"?1:0;return[{name:"医療保険",insuranceType:"medical",power:5,cost:4,coverage:100},{name:"生命保険",insuranceType:"life",power:6,cost:5,coverage:200},{name:"収入保障保険",insuranceType:"income",power:5,cost:4,coverage:150}].forEach(i=>{t.push(this.createInsuranceCard({name:i.name,description:`${i.name}の永続保障`,insuranceType:i.insuranceType,power:i.power,cost:i.cost,coverage:i.coverage,ageBonus:s}))}),[{name:"傷害保険",insuranceType:"medical",power:4,cost:3,coverage:80},{name:"就業不能保険",insuranceType:"income",power:7,cost:6,coverage:250},{name:"介護保険",insuranceType:"medical",power:6,cost:5,coverage:180},{name:"がん保険",insuranceType:"medical",power:5,cost:4,coverage:120},{name:"個人年金保険",insuranceType:"income",power:4,cost:4,coverage:100},{name:"学資保険",insuranceType:"life",power:4,cost:3,coverage:90}].forEach(i=>{t.push(this.createInsuranceCard({name:i.name,description:`${i.name}の永続保障`,insuranceType:i.insuranceType,power:i.power,cost:i.cost,coverage:i.coverage,ageBonus:s}))}),t}static createInsuranceTypeChoices(e="youth"){const t=[],s=e==="middle"?.5:e==="fulfillment"?1:0,n=[...[{type:"medical",name:"医療保険",description:"病気やケガに備える保障",power:5,baseCost:4,coverage:100},{type:"life",name:"生命保険",description:"家族を守る保障",power:6,baseCost:5,coverage:200},{type:"income",name:"収入保障保険",description:"働けなくなった時の保障",power:5,baseCost:4,coverage:150}]];for(let i=0;i<3&&n.length>0;i++){const u=Math.floor(Math.random()*n.length),c=n.splice(u,1)[0],C=10,m=Math.ceil(c.baseCost*.7),w=c.baseCost,T={insuranceType:c.type,name:c.name,description:c.description,baseCard:{name:c.name,description:c.description,type:"insurance",power:c.power,cost:c.baseCost,insuranceType:c.type,coverage:c.coverage,effects:[{type:"shield",value:c.coverage,description:`${c.coverage}ポイントの保障`}],ageBonus:s},termOption:{cost:m,duration:C,description:`${C}ターン限定の保障（低コスト）`},wholeLifeOption:{cost:w,description:"生涯にわたる永続保障（高コスト）"}};t.push(T)}return t}static createTermInsuranceCard(e){return new d({id:this.generateId(),type:"insurance",name:`定期${e.name}`,description:`${e.baseCard.description}（${e.termOption.duration}ターン限定）`,power:e.baseCard.power,cost:e.termOption.cost,insuranceType:e.insuranceType,coverage:e.baseCard.coverage,effects:e.baseCard.effects,ageBonus:e.baseCard.ageBonus,durationType:"term",remainingTurns:e.termOption.duration})}static createWholeLifeInsuranceCard(e){return new d({id:this.generateId(),type:"insurance",name:`終身${e.name}`,description:`${e.baseCard.description}（永続保障）`,power:e.baseCard.power,cost:e.wholeLifeOption.cost,insuranceType:e.insuranceType,coverage:e.baseCard.coverage,effects:e.baseCard.effects,ageBonus:e.baseCard.ageBonus,durationType:"whole_life"})}static createChallengeCards(e){const t=[];return e==="youth"?(t.push(this.createChallengeCard({name:"就職活動",description:"新たなキャリアの始まり",power:5,dreamCategory:"physical"})),t.push(this.createChallengeCard({name:"一人暮らし",description:"独立への第一歩",power:4,dreamCategory:"physical"})),t.push(this.createChallengeCard({name:"資格試験",description:"スキルアップのチャンス",power:6,dreamCategory:"intellectual"}))):e==="middle"?(t.push(this.createChallengeCard({name:"子育て",description:"家族の成長",power:8,dreamCategory:"physical"})),t.push(this.createChallengeCard({name:"住宅購入",description:"大きな決断",power:10,dreamCategory:"physical"})),t.push(this.createChallengeCard({name:"親の介護",description:"家族の支え合い",power:9,dreamCategory:"mixed"}))):(t.push(this.createChallengeCard({name:"定年退職",description:"新しい人生のスタート",power:12,dreamCategory:"intellectual"})),t.push(this.createChallengeCard({name:"健康管理",description:"健やかな老後のために",power:11,dreamCategory:"mixed"}))),t}static createPitfallCards(){const e=[];return e.push(this.createPitfallCard({name:"急な入院",description:"予期せぬ医療費",power:0,penalty:3})),e.push(this.createPitfallCard({name:"失業",description:"収入の途絶",power:0,penalty:4})),e.push(this.createPitfallCard({name:"事故",description:"予期せぬトラブル",power:0,penalty:2})),e}static createLifeCard(e){return new d({id:this.generateId(),type:"life",name:e.name,description:e.description,power:e.power,cost:e.cost,category:e.category,effects:[]})}static createInsuranceCard(e){return new d({id:this.generateId(),type:"insurance",name:e.name,description:e.description,power:e.power,cost:e.cost,insuranceType:e.insuranceType,coverage:e.coverage,effects:[{type:"shield",value:e.coverage,description:`${e.coverage}ポイントの保障`}],ageBonus:e.ageBonus||0})}static createChallengeCard(e){return new d({id:this.generateId(),type:"life",name:e.name,description:e.description,power:e.power,cost:0,effects:[],dreamCategory:e.dreamCategory})}static createPitfallCard(e){return new d({id:this.generateId(),type:"pitfall",name:e.name,description:e.description,power:e.power,cost:0,penalty:e.penalty,effects:[]})}}a(h,"cardIdCounter",0);class M{constructor(){a(this,"hand",[]);a(this,"discardPile",[]);a(this,"playerDeck",new l("Player Deck"));a(this,"challengeDeck",new l("Challenge Deck"));a(this,"selectedCards",[]);a(this,"cardChoices");a(this,"config")}initialize(e,t,s){this.playerDeck=e,this.challengeDeck=t,this.hand=[],this.discardPile=[],this.selectedCards=[],this.cardChoices=void 0,this.config=s}getState(){return{hand:[...this.hand],discardPile:[...this.discardPile],playerDeck:this.playerDeck.clone(),challengeDeck:this.challengeDeck.clone(),selectedCards:[...this.selectedCards],cardChoices:this.cardChoices?[...this.cardChoices]:void 0}}setState(e){this.hand=[...e.hand],this.discardPile=[...e.discardPile],this.playerDeck=e.playerDeck.clone(),this.challengeDeck=e.challengeDeck.clone(),this.selectedCards=[...e.selectedCards],this.cardChoices=e.cardChoices?[...e.cardChoices]:void 0}drawCards(e){if(!this.config)throw new Error("CardManager not initialized");const t=[];for(let r=0;r<e;r++){this.playerDeck.isEmpty()&&this.discardPile.length>0&&this.reshuffleDeck();const n=this.playerDeck.drawCard();n&&(t.push(n),this.hand.push(n))}const s=this.enforceHandLimit();return{drawnCards:t,discardedCards:s}}toggleCardSelection(e){const t=this.selectedCards.findIndex(s=>s.id===e.id);return t!==-1?(this.selectedCards.splice(t,1),!1):(this.selectedCards.push(e),!0)}clearSelection(){this.selectedCards=[]}discardSelectedCards(){const e=[];return this.selectedCards.forEach(t=>{const s=this.hand.findIndex(r=>r.id===t.id);if(s!==-1){const r=this.hand.splice(s,1)[0];this.discardPile.push(r),e.push(r)}}),this.selectedCards=[],e}addToHand(e){this.hand.push(e)}addToDiscardPile(e){this.discardPile.push(e)}addToPlayerDeck(e){this.playerDeck.addCard(e)}enforceHandLimit(){if(!this.config)return[];const e=[];for(;this.hand.length>this.config.maxHandSize;){const t=this.hand.shift();t&&(this.discardPile.push(t),e.push(t))}return e}setCardChoices(e){this.cardChoices=[...e]}clearCardChoices(){this.cardChoices=void 0}getCardChoiceById(e){var t;return(t=this.cardChoices)==null?void 0:t.find(s=>s.id===e)}reshuffleDeck(){this.playerDeck.addCards(this.discardPile),this.playerDeck.shuffle(),this.discardPile=[]}}const f={youth:{maxVitality:35,label:"青年期",ageMultiplier:0},middle:{maxVitality:30,label:"中年期",ageMultiplier:.5},fulfillment:{maxVitality:27,label:"充実期",ageMultiplier:1}},D={physical:3,intellectual:-2,mixed:0};class E{constructor(e){a(this,"id");a(this,"status");a(this,"phase");a(this,"stage");a(this,"turn");a(this,"vitality");a(this,"maxVitality");a(this,"cardManager");a(this,"currentChallenge");a(this,"stats");a(this,"config");a(this,"insuranceCards");a(this,"expiredInsurances");a(this,"insuranceBurden");a(this,"insuranceTypeChoices");a(this,"startedAt");a(this,"completedAt");this.id=this.generateId(),this.status="not_started",this.phase="setup",this.stage="youth",this.turn=0,this.vitality=e.startingVitality,this.maxVitality=f[this.stage].maxVitality,this.cardManager=new M;const t=new l("Player Deck"),s=new l("Challenge Deck");h.createStarterLifeCards().forEach(i=>t.addCard(i)),h.createChallengeCards(this.stage).forEach(i=>s.addCard(i)),this.cardManager.initialize(t,s,e),this.stats={totalChallenges:0,successfulChallenges:0,failedChallenges:0,cardsAcquired:0,highestVitality:e.startingVitality,turnsPlayed:0},this.config=e,this.insuranceCards=[],this.expiredInsurances=[],this.insuranceBurden=0}generateId(){return`game_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}start(){if(this.status!=="not_started")throw new Error("Game has already started");this.status="in_progress",this.startedAt=new Date,this.phase="draw",this.turn=1,this.stats.turnsPlayed=1}drawCards(e){return this.cardManager.drawCards(e).drawnCards}startChallenge(e){if(this.phase!=="draw")throw new Error("Can only start challenge during draw phase");this.currentChallenge=e,this.cardManager.clearSelection(),this.phase="challenge"}toggleCardSelection(e){return this.cardManager.toggleCardSelection(e)}resolveChallenge(){if(!this.currentChallenge||this.phase!=="challenge")throw new Error("No active challenge to resolve");const e=this.cardManager.getState().selectedCards,t=this.calculateTotalPower(e),s=t.total,r=this.getDreamRequiredPower(this.currentChallenge),n=s>=r;this.stats.totalChallenges++,n?this.stats.successfulChallenges++:this.stats.failedChallenges++;let i=0;n?i=Math.floor(s-r)/2:i=-(r-s),this.updateVitality(i),this.cardManager.discardSelectedCards();const u={success:n,playerPower:s,challengePower:r,vitalityChange:i,message:n?`チャレンジ成功！ +${i} 活力`:`チャレンジ失敗... ${i} 活力`,powerBreakdown:t};if(n){const c=h.createInsuranceTypeChoices(this.stage);this.insuranceTypeChoices=c,u.insuranceTypeChoices=c,this.phase="insurance_type_selection"}else this.phase="resolution";return this.currentChallenge=void 0,this.cardManager.clearSelection(),u}selectCard(e){if(this.phase!=="card_selection")throw new Error("Not in card selection phase");const t=this.cardManager.getCardChoiceById(e);if(!t)throw new Error("Invalid card selection");return this.cardManager.addToPlayerDeck(t),this.stats.cardsAcquired++,t.type==="insurance"&&(this.insuranceCards.push(t),this.updateInsuranceBurden()),this.cardManager.clearCardChoices(),this.phase="resolution",!0}selectInsuranceType(e,t){if(this.phase!=="insurance_type_selection")throw new Error("Not in insurance type selection phase");if(!this.insuranceTypeChoices)throw new Error("No insurance type choices available");const s=this.insuranceTypeChoices.find(i=>i.insuranceType===e);if(!s)return{success:!1,message:"Invalid insurance type selection"};let r;t==="term"?r=h.createTermInsuranceCard(s):r=h.createWholeLifeInsuranceCard(s),this.cardManager.addToPlayerDeck(r),this.stats.cardsAcquired++,this.insuranceCards.push(r),this.updateInsuranceBurden(),this.insuranceTypeChoices=void 0,this.phase="resolution";const n=t==="term"?`定期保険（${s.termOption.duration}ターン）`:"終身保険";return{success:!0,selectedCard:r,message:`${s.name}（${n}）を選択しました。コスト: ${r.cost}`}}updateVitality(e){this.vitality=Math.max(0,Math.min(this.maxVitality*2,this.vitality+e)),this.stats.highestVitality=Math.max(this.stats.highestVitality,this.vitality),this.vitality<=0&&(this.status="game_over",this.completedAt=new Date)}updateMaxVitalityForAge(){const e=f[this.stage].maxVitality;this.maxVitality=e,this.vitality>e&&(this.vitality=e)}nextTurn(){if(this.status!=="in_progress")throw new Error("Game is not in progress");this.turn++,this.stats.turnsPlayed++,this.phase="draw";const e=this.updateInsuranceExpirations();return this.drawCards(1),{insuranceExpirations:e,newExpiredCount:(e==null?void 0:e.expiredCards.length)||0,remainingInsuranceCount:this.insuranceCards.length}}advanceStage(){this.stage==="youth"?(this.stage="middle",this.updateMaxVitalityForAge()):this.stage==="middle"?(this.stage="fulfillment",this.updateMaxVitalityForAge()):(this.status="victory",this.completedAt=new Date)}get hand(){return this.cardManager.getState().hand}get discardPile(){return this.cardManager.getState().discardPile}get playerDeck(){return this.cardManager.getState().playerDeck}get challengeDeck(){return this.cardManager.getState().challengeDeck}get selectedCards(){return this.cardManager.getState().selectedCards}get cardChoices(){return this.cardManager.getState().cardChoices}get currentInsuranceTypeChoices(){return this.insuranceTypeChoices}isInProgress(){return this.status==="in_progress"}isCompleted(){return this.status==="game_over"||this.status==="victory"}getDreamRequiredPower(e){if(!e.isDreamCard()||!e.dreamCategory||this.stage==="youth")return e.power;const t=D[e.dreamCategory],s=e.power+t;return Math.max(1,s)}getExpiredInsurances(){return[...this.expiredInsurances]}clearExpiredInsurances(){this.expiredInsurances=[]}getExpiringsSoonInsurances(){return this.insuranceCards.filter(e=>e.isTermInsurance()&&e.remainingTurns!==void 0&&e.remainingTurns<=2&&e.remainingTurns>0)}getExpirationWarnings(){return this.getExpiringsSoonInsurances().map(t=>`⚠️ 「${t.name}」の期限まであと${t.remainingTurns}ターンです`)}getActiveInsurances(){return[...this.insuranceCards]}calculateInsuranceBurden(){const e=this.insuranceCards.length,t=Math.floor(e/3);return t===0?0:-t}updateInsuranceBurden(){this.insuranceBurden=this.calculateInsuranceBurden()}updateInsuranceExpirations(){const e=[];if(this.insuranceCards.forEach(t=>{t.isTermInsurance()&&(t.decrementTurn(),t.isExpired()&&e.push(t))}),e.length>0)return this.insuranceCards=this.insuranceCards.filter(t=>!e.includes(t)),this.expiredInsurances.push(...e),this.updateInsuranceBurden(),this.createExpirationNotice(e)}createExpirationNotice(e){const t=e.map(r=>r.name).join("、"),s=e.length===1?`定期保険「${t}」の期限が切れました。`:`定期保険${e.length}件（${t}）の期限が切れました。`;return{expiredCards:e,message:s,showRenewalOption:!0,turnNumber:this.turn}}calculateTotalPower(e){let t=0,s=0;e.forEach(i=>{i.type==="insurance"?s+=i.calculateEffectivePower():t+=i.calculateEffectivePower()});const r=this.insuranceBurden,n=t+s+r;return{base:t,insurance:s,burden:r,total:Math.max(0,n)}}addCardToHand(e){this.cardManager.addToHand(e)}addCardToDiscardPile(e){this.cardManager.addToDiscardPile(e)}addCardToPlayerDeck(e){this.cardManager.addToPlayerDeck(e)}clearHand(){const e=this.cardManager.getState();e.hand=[],this.cardManager.setState(e)}setHand(e){const t=this.cardManager.getState();t.hand=[...e],this.cardManager.setState(t)}setCardChoices(e){this.cardManager.setCardChoices(e)}setPhase(e){this.phase=e}setStage(e){this.stage=e,this.updateMaxVitalityForAge()}getSnapshot(){const e=this.cardManager.getState();return{id:this.id,status:this.status,phase:this.phase,stage:this.stage,turn:this.turn,vitality:this.vitality,maxVitality:this.maxVitality,playerDeck:e.playerDeck,hand:e.hand,discardPile:e.discardPile,challengeDeck:e.challengeDeck,currentChallenge:this.currentChallenge,selectedCards:e.selectedCards,cardChoices:e.cardChoices,insuranceTypeChoices:this.insuranceTypeChoices,insuranceCards:[...this.insuranceCards],expiredInsurances:[...this.expiredInsurances],insuranceBurden:this.insuranceBurden,stats:g({},this.stats),config:g({},this.config),startedAt:this.startedAt,completedAt:this.completedAt}}}const S={PROGRESS:"insurance_game_tutorial_progress",SETTINGS:"insurance_game_tutorial_settings",COMPLETED_TUTORIALS:"insurance_game_completed_tutorials"};export{f as A,h as C,E as G,S as T};
//# sourceMappingURL=game-logic-DNW83sYz.js.map
